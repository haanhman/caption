{"0":{"dur":2,"text":">>Dr. Deborah Trytten: So now that we know\nprimitive data type and basic control statements,"},"3":{"dur":3,"text":"we're going to put them together to write\na program that will allow us to choose cheap"},"7":{"dur":7,"text":"audiobooks. Here's the problem statement:\nI have a subscription to Laudible.com, an"},"14":{"dur":4,"text":"online retailer that sells audiobooks. Each\nmonth I get one credit for a fixed fee of"},"19":{"dur":5,"text":"$14.95. Each book has a title, a length in\nhours and minutes, and a number of credits."},"25":{"dur":4,"text":"We're going to write a program that reads\nthe data for the books and chooses the ones"},"29":{"dur":4,"text":"that's the best value. What I mean by the\nbest value is the one where you get the most"},"34":{"dur":5,"text":"number of minutes of time for the given credits.\nThat's probably not a very good way to choose"},"39":{"dur":3,"text":"audiobooks, but it's what we're going to do\nthis morning anyways, and we'll end the input"},"43":{"dur":3,"text":"with the Sentinel of END."},"46":{"dur":5,"text":"Now that we're doing test-driven development,\nwe want to write the test data for the program"},"52":{"dur":7,"text":"first. So here's some possible input. Let's\nsay A Tale of Two Cities took 150 hours and"},"60":{"dur":3,"text":"5 minutes and cost one credit. Now I don't\nknow if it really took that long, but it probably"},"63":{"dur":5,"text":"seemed like it took that long. A Tale of Three\nCities could take 100 hours and 55 minutes"},"69":{"dur":4,"text":"and cost one credit. A Tale of Four Cities\ncould take 50 hours and 20 minutes and cost"},"74":{"dur":6,"text":"two credits, and A Tale of Five Cities could\ntake 150 hours and 5 minutes and cost three"},"80":{"dur":3,"text":"credits. When we look at these, we can see\nthat A Tale of Two Cities is the one that's"},"84":{"dur":5,"text":"going to be the best value, and so that's\nthe one we'll have as the output."},"89":{"dur":4,"text":"Notice that there is some unnecessary information\nin this problem statement. This is actually"},"94":{"dur":3,"text":"very typical of what you get when you talk\nto people who want you to design software"},"97":{"dur":4,"text":"for things. They tell you all kinds of stuff\nthat you don't need to know, and then you"},"102":{"dur":4,"text":"have to pull out the things that are really\nrelevant. In this case, the fact that a monthly"},"107":{"dur":7,"text":"subscription costs $14.95 is irrelevant. It's\nall about credits. We might consider some"},"116":{"dur":4,"text":"boundary cases here, like what happens if\nthere aren't any audiobooks. I guess that"},"120":{"dur":3,"text":"case doesn't particularly make sense because\nif there aren't any, you're not going to buy"},"124":{"dur":4,"text":"any. If there's one, it will be the best deal\nautomatically, so those are some good boundary"},"128":{"dur":6,"text":"cases this time. We might also consider what\nhappens with ties. Ties are one of those things"},"135":{"dur":6,"text":"that tend to be a problem in computer science.\nOne strategy that you can use is sort of first-come,"},"141":{"dur":5,"text":"first-serve. That is, if you find another\nvalue later that ties your first one, the"},"147":{"dur":4,"text":"first one is the one that remains. It really\ndoesn't matter which way you settle ties,"},"151":{"dur":3,"text":"but it's very important that you let people\nknow how they're settled, so they know what"},"155":{"dur":2,"text":"to expect."},"157":{"dur":4,"text":"Here's a tough question: how much test data\nis enough? I've only put one piece of test"},"162":{"dur":4,"text":"data here, and that probably isn't enough,\nbut you could go on writing test data all"},"167":{"dur":5,"text":"day and all night and so you have to balance\nthat. For this program given that it's a relatively"},"173":{"dur":6,"text":"simple program, probably this is sufficient\ntest data. We can always test more later."},"180":{"dur":4,"text":"The next thing we're going to do is create\nour class, so let's go to Eclipse. I'm opening"},"185":{"dur":7,"text":"Eclipse from the launchpad, entering our workspace.\nSo let's create a new project for Laudible.com."},"204":{"dur":4,"text":"Remember project names are allowed to have\nperiods in them, so this will work fine. When"},"208":{"dur":6,"text":"we get to creating our class, however, we're\nonly going to be able to use Laudible. Once"},"215":{"dur":5,"text":"again, I'm having a main program put in the\nclass. Now in this case I forgot to select"},"220":{"dur":5,"text":"the source directory when I started in, so\nI'm going to have to browse for it now. So"},"225":{"dur":6,"text":"I'm going to find the Laudible.com project\nand select the source directory as the place"},"231":{"dur":5,"text":"where I want my class file. One thing you'll\nnotice is that Eclipse is giving us a little"},"236":{"dur":5,"text":"warning here. It's saying the use of the default\npackage is discouraged, and actually Eclipse"},"242":{"dur":4,"text":"is right on this one, but it's okay for beginning\nprogrammers. We'll learn how to work around"},"247":{"dur":7,"text":"that later. So here's our class, and as always\nwe're going to need to beautify it a little"},"256":{"dur":7,"text":"bit. And it's been pretty handy having our\nproblem statement moved in, so let's go and"},"273":{"dur":7,"text":"grab that from our PowerPoint"},"284":{"dur":7,"text":"and put that as a comment at the top. Now\nthat got a little bit ugly, so we're going"},"298":{"dur":7,"text":"to beautify it a little bit too. Notice that\nI'm keeping it well within the bounds of the"},"317":{"dur":7,"text":"code that we can see. That's always a good\nstrategy."},"329":{"dur":4,"text":"The next thing to notice is the input and\ncalculation are intertwined here as they have"},"333":{"dur":4,"text":"been in our last several programs. Don't worry,\nwe're going to stop having that soon, and"},"337":{"dur":4,"text":"so you'll see something different. But for\nright now they're together, and so this means"},"342":{"dur":5,"text":"that both the input and calculation are going\nto have to be part of our method signature."},"347":{"dur":3,"text":"The parameter once again is going to be the\nscanner object that we bring in from the main"},"351":{"dur":5,"text":"program, and we might want to think about\nthe return type. What exactly is it that we"},"356":{"dur":4,"text":"want to get? Well, if you look back at our\noutput data that we did in our test-driven"},"361":{"dur":4,"text":"development, you'll see that our output was\nA Tale of Two Cities. That's a string, and"},"366":{"dur":2,"text":"so that's definitely what we want to have."},"369":{"dur":7,"text":"Let's look at our method name inside the program.\nRemember that the methods go outside of the"},"376":{"dur":5,"text":"main method but inside the class. Now I'm\ngoing to make a mistake here on purpose because"},"382":{"dur":4,"text":"there's a very simple thing to forget, and\nthat's to put public and static in front of"},"386":{"dur":5,"text":"methods. And it gives a really crazy message,\nso I want you to see that message once. So"},"392":{"dur":7,"text":"our return type was going to be string. We're\ngoing to read and find cheapest book, and"},"403":{"dur":7,"text":"we're going to have an input scanner. Now\nas always, we need to remember to import Java"},"415":{"dur":7,"text":"dot util dot scanner, so that the program\ndoesn't complain. And here let's just return"},"430":{"dur":6,"text":"'help me.'"},"436":{"dur":6,"text":"So we're going to call this from our main\nprogram now. We're going to need to create"},"443":{"dur":7,"text":"our scanner object here. New scanner system\nin same as usual, and we'll call our \nread and find cheapest book stub from keyboard,"},"470":{"dur":4,"text":"and you'll notice right now that Eclipse still\nhas a red X. You'll see this red X a lot."},"475":{"dur":5,"text":"This is a very common mistake to make, so\nlet's look at the error message--cannot make"},"480":{"dur":5,"text":"a static reference to the non-static method\nread and find cheapest book of scanner from"},"486":{"dur":6,"text":"the type Laudible. That's really not a very\nhelpful message, but it does have a couple"},"493":{"dur":4,"text":"of keywords in it that will help you remember\nhow to fix it. When it was talking about static"},"498":{"dur":6,"text":"and non-static, what it was trying to say\nwas that this method that we're calling here"},"504":{"dur":7,"text":"the read and find cheapest book is not a static\nmethod, and we called it from a static method."},"511":{"dur":6,"text":"That combination isn't allowed. The way you\nfix that problem is by putting public static"},"518":{"dur":4,"text":"in front of the method. Later on we'll have\ndifferent strategies, but for right now all"},"522":{"dur":6,"text":"of our methods will be public and static.\nThe next thing we need to do is to read our"},"529":{"dur":5,"text":"input in. We'll have a title, and that should\nbe on one line, and then the numbers of hours"},"534":{"dur":4,"text":"and minutes and credits. Now there is a problem\nif you put the hours, and minutes, and credits"},"539":{"dur":6,"text":"on the same line as the title. That doesn't\nwork because when we read in our choices are"},"545":{"dur":4,"text":"to read in things between spaces, in which\ncase we would only get the first word of the"},"549":{"dur":6,"text":"title, or to read in whole lines, in which\ncase we'd get the title and the hours, minutes,"},"555":{"dur":6,"text":"and credits, so we have to have those things\non two separate lines."},"562":{"dur":4,"text":"The other thing we need to think about is\ndo we have our next versus next line problem"},"566":{"dur":5,"text":"again? We talked about this problem in a previous\nvideo and it's a constant thorn in our side"},"571":{"dur":5,"text":"when it comes to reading input, so we'll think\nabout that when we're writing our code. So"},"577":{"dur":7,"text":"let's go and write our code. So inside the\nmethod we're going to create a string for"},"585":{"dur":7,"text":"the title, an int for the hours, an int for\nthe minutes, and an int for the credits because"},"596":{"dur":7,"text":"all of those things are integral. We're going\nto need a loop. Let me move our counsel out"},"607":{"dur":6,"text":"of the way so we have a little bit more space\nto work. Now in this case even though we're"},"614":{"dur":4,"text":"still going to have a while loop, this is\na sentinel controlled loop instead of a counter"},"619":{"dur":5,"text":"controlled loop. And so we're going to have\nto use priming reads to make this work. So"},"624":{"dur":3,"text":"that means we're going to prompt the user\nbefore the loop and get data before we enter"},"628":{"dur":5,"text":"the loop. Then we'll start our while loop,\nand inside the while loop at the bottom is"},"634":{"dur":5,"text":"when we'll read the data for the next execution.\nThat's the only way that you can get sentinels"},"639":{"dur":2,"text":"to work properly in code."},"642":{"dur":7,"text":"So we'll do system output line enter the title\nof your book on one line, and system out print"},"658":{"dur":7,"text":"line and the hours, minutes, and credits on\nanother line. Notice I'm giving the user some"},"670":{"dur":6,"text":"very specific instructions because it makes\na big difference that they enter things correctly."},"676":{"dur":7,"text":"So title will equal input dot next line because\nwe know it's on a line by itself. Hours will"},"687":{"dur":7,"text":"equal input dot next int because it's an integer.\nMinutes will equal input dot next int, and"},"697":{"dur":7,"text":"credits will equal input dot next int. So\nthere we have all of our data. Now it's time"},"705":{"dur":5,"text":"to think about whether we have the next versus\nnext line problem. After we finish reading"},"710":{"dur":4,"text":"credits, there is a new line character that's\nsitting on the screen. That's what gets entered"},"715":{"dur":6,"text":"when you hit enter on your keyboard. So if\nwe go and read the title now using next line,"},"721":{"dur":5,"text":"it will get that empty character, and it won't\nget the title correctly. And then our program"},"726":{"dur":1,"text":"will break immediately."},"728":{"dur":5,"text":"So we have the next line problem, and we need\nto use next line again to get rid of it. So"},"734":{"dur":6,"text":"we do input dot next line. Now things like\nthat are really hard to figure out when you're"},"740":{"dur":4,"text":"reading the code, so you definitely want to\nput a comment there to explain what's going"},"745":{"dur":7,"text":"on. I'm going to put this one on the side.\nRead in the carriage return at the end of"},"755":{"dur":5,"text":"the line. You don't always think of doing\nthings like this when you're reading input"},"760":{"dur":3,"text":"initially, but you'll remember to do it once\nyou've programmed a bit and had your programs"},"764":{"dur":7,"text":"break every time you forget. So this is before\nthe while loop. Now we need our while loop."},"773":{"dur":7,"text":"Title equals end. And we want a not in front\nof that of course because we want to stop"},"788":{"dur":5,"text":"when the title equals end. We want to continue\nwhen the title is not equal to end. Remember"},"794":{"dur":6,"text":"that we use equals because we're comparing\nstrings here, and so that makes a difference."},"800":{"dur":3,"text":"The other thing that we might notice is that\nwe didn't actually tell the user about that"},"804":{"dur":7,"text":"end thing. That's going to cause problems\nbecause they won't know what to do. System"},"812":{"dur":7,"text":"out print line enter end when the program\nis finished. So now we've given the user correct"},"826":{"dur":1,"text":"instructions."},"828":{"dur":6,"text":"Oh, I see Eclipse is unhappy once again about\ncredit. That's because I called it credits"},"834":{"dur":7,"text":"above instead of credit. We can fix it either\nway, but that will get rid of the little red"},"843":{"dur":7,"text":"X. Okay, so here's our while statement. The\nother comment we haven't put in here is that"},"856":{"dur":6,"text":"we're doing priming reads. You definitely\nwant to tell somebody who's reading the code"},"862":{"dur":7,"text":"about that. Remember all this stuff is going\nto go at the end of the loop too, so we will"},"870":{"dur":7,"text":"copy it. Notice I even copied the comment\nin and put it in there. We're trying to find"},"881":{"dur":5,"text":"the cheapest book. We've read in the number\nof hours, the number of minutes, and the credits,"},"887":{"dur":5,"text":"and so what we need to calculate is the cost\nper minute in terms of credits. So let's make"},"893":{"dur":7,"text":"a comment about that. So we need a double\nfor the cost per minutes. The value of that"},"910":{"dur":7,"text":"will equal the number of hours times 60 plus\nthe number of minutes divided by the credits."},"921":{"dur":5,"text":"We want to think about our precedence a little\nbit because we may not have the precedence"},"926":{"dur":5,"text":"correct. So remember multiplicative operators\nlike times and divide get done before additive"},"932":{"dur":7,"text":"operators, so we definitely want to put some\nparentheses around here. I actually like to"},"940":{"dur":4,"text":"put in a lot of parentheses in my programs\nanyways because it makes it clear what your"},"945":{"dur":7,"text":"intention was. This is what we want: the total\nnumber of minutes to be calculated first and"},"953":{"dur":3,"text":"then the credits to be divided out at the\nend."},"957":{"dur":4,"text":"The next thing we need to do is to find the\nminimum. Now we've done the minimum thing"},"962":{"dur":7,"text":"before, so we know we need a variable to keep\ntrack of the minimum. So we'll call it minimum"},"974":{"dur":7,"text":"cost per minute, and we have to think about\nwhat this value should be set to. Now this"},"982":{"dur":5,"text":"is a double value, so we can't use integer\nmax value like we did before. That isn't going"},"987":{"dur":4,"text":"to work, and it turns out the double class\ndoesn't have a maximum value. So we might"},"992":{"dur":5,"text":"want to think about how we could initialize\nthis. Well, one easy way to do it is to initialize"},"998":{"dur":6,"text":"it to the cost per minute of the first value.\nThat way we know we'll have a legal value."},"1004":{"dur":6,"text":"We can grab that right from here. We can't\nuse cost per minute up there because it's"},"1010":{"dur":5,"text":"declared inside the loop, and so it's out\nof scope at this point, but the other values"},"1016":{"dur":3,"text":"still work."},"1019":{"dur":3,"text":"Now if you think about it, in addition to\nknowing the minimum cost, we also want to"},"1022":{"dur":7,"text":"know which book had the minimum cost, so we're\ngoing to need a string to store that. So we'll"},"1030":{"dur":7,"text":"call it cheapest book so far, and that's going\nto be the title of the first one. Inside the"},"1043":{"dur":7,"text":"loop if the cost per minute is greater than\u2014whoops,\nI'm sorry\u2014less than cheapest book so far,"},"1057":{"dur":7,"text":"what that means is we found a new book that's\ncheaper. So cheapest book so far will get"},"1064":{"dur":7,"text":"the value of cost per minute, and\u2014oh, I'm\nsorry, I'm using the wrong variable. Cheapest"},"1074":{"dur":7,"text":"book so far is our string, so that should\nget the value of title, not cost per minute."},"1081":{"dur":3,"text":"Notice that Eclipse was telling me that I\nwas making a mistake there, and if I'd paid"},"1085":{"dur":4,"text":"attention to it a little bit sooner, I might\nnot have typed so much stuff wrong. Cost per"},"1090":{"dur":7,"text":"minute has to be less than \nminimum cost per minute. I expect Eclipse\nis about to be happier soon. Minimum cost"},"1106":{"dur":7,"text":"per minute equals cost per minute. So we've\ngot an interesting structure here between"},"1118":{"dur":4,"text":"the priming reads and the if statement in\nthe middle of the while loop. We've got a"},"1122":{"dur":5,"text":"pretty substantial while loop, so let's put\nin some more comments to help it make more"},"1127":{"dur":7,"text":"sense. So find the let's say find whether\nthe current element is the minimum. So notice"},"1139":{"dur":4,"text":"we've got two or three lines of code and a\ncomment before each. That's a really nice"},"1144":{"dur":7,"text":"balance in code. Then we've got our priming\nreads, and now instead of returning 'help"},"1154":{"dur":7,"text":"me,' we can return cheapest book so far. So\nit looks like we may have our method done,"},"1163":{"dur":4,"text":"or at least we will when I put the c back\nin cheapest."},"1167":{"dur":7,"text":"Now is a good time to test. So here we go.\nSo we have A Tale of Two Cities, and it's"},"1183":{"dur":7,"text":"going to run for 500 hours and 5 minutes and\ncost one credit. Then we have A Tale of Three"},"1191":{"dur":7,"text":"Cities, and it's going to run for 250 minutes\nor hours and 10 minutes and cost one credit,"},"1200":{"dur":7,"text":"and then we have A Tale of Four Cities, and\nit's going to run for 100 hours and 55 minutes"},"1208":{"dur":7,"text":"and cost five credits, and then we're at the\nend. Uh oh, something went wrong. We don't"},"1218":{"dur":5,"text":"see any output. Now what's happened here is\nactually an input problem, and we're going"},"1223":{"dur":4,"text":"to have to go to the code to see it. One of\nthe things that you can notice here is that"},"1228":{"dur":4,"text":"this little red box is still lighted up. That\nmeans our program is still running. The real"},"1233":{"dur":4,"text":"problem here is we didn't give the user very\ngood instructions because when they enter"},"1237":{"dur":7,"text":"end, as you'll see when we look at the code,\nthe title gets read and then the computer"},"1248":{"dur":4,"text":"is waiting to read the hours and minutes and\ncredits. It can't tell that end has been read"},"1252":{"dur":7,"text":"if we don't tell it, and so we need to put\nan if statement in here to fix it. So if title"},"1260":{"dur":7,"text":"equals end, a curly brace to start and a curly\nbrace to end. We're going to move those over."},"1282":{"dur":6,"text":"Now we might want to think about it very carefully.\nDo we want to do this when titles equals end"},"1288":{"dur":5,"text":"or when title is not equal to end? Well, we\ngo on and read the input when title is not"},"1293":{"dur":6,"text":"equal to end, so that means we need a little\nexclamation point here to say not. So now"},"1300":{"dur":4,"text":"if we get end, we don't try to read the other\nthings. Now there are other ways that you"},"1304":{"dur":4,"text":"can have tried to fix this program. For example,\nyou could have prompted the user to enter"},"1309":{"dur":3,"text":"end and then to enter fake data, but that\nisn't respectful to users, and it makes your"},"1313":{"dur":3,"text":"programs look unprofessional. So we don't\ndo things that way."},"1317":{"dur":7,"text":"Let's run the program again and see if it\nworks. Here we go. A Tale of Two Cities, 500"},"1332":{"dur":7,"text":"hours, 5 minutes, one credit. A Tale of Three\nCities, 250 hours, 10 minutes, one credit."},"1347":{"dur":7,"text":"A Tale of Four Cities, 100 hours, 55 minutes,\ntwo credits, and A Tale of Five Cities, 50"},"1357":{"dur":7,"text":"hours, 25 minutes, and three credits. Here\ncomes the moment of truth. We're entering"},"1365":{"dur":6,"text":"end, and our program stopped. Now why did\nour program not give any output? Well, that's"},"1371":{"dur":4,"text":"easy. We didn't write any output for it to\ngive, so we need to go back to our main program"},"1376":{"dur":7,"text":"and fix that. Some people when they develop\nprograms write the output first, and then"},"1383":{"dur":5,"text":"write the calculation, and then write the\ninput. That strategy is called backward chaining,"},"1388":{"dur":5,"text":"and it can work really well. So notice here\neven though we returned the title we didn't"},"1393":{"dur":7,"text":"store it in a variable, and we didn't print\nit out. Let's store it in a variable. Best"},"1401":{"dur":7,"text":"title equals, and then print something out\nto the user system out print line \nthe cheapest book is \nbest title. Notice that I was careful to add"},"1428":{"dur":5,"text":"in a space after the cheapest book is so all\nthe words didn't get smashed together. I notice"},"1434":{"dur":5,"text":"though that I've gotten a couple of extra\nlittle lines, so we want to get rid of those."},"1439":{"dur":7,"text":"We're ready to run again. Here we go\u2014A Tale\nof Two Cities, A Tale of Three Cities, A Tale"},"1462":{"dur":7,"text":"of Four Cities, and A Tale of Five Cities,\nand the cheapest book is A Tale of Five Cities."},"1478":{"dur":7,"text":"Uh oh, what happened? We need to go back and\nlook at the logic in our program again. So"},"1487":{"dur":7,"text":"we know this has to do the calculation. So\nwe have the hours times 60 plus minutes. Now"},"1499":{"dur":6,"text":"let's think carefully about what's going on\nhere. When we have the hours times 60 plus"},"1505":{"dur":5,"text":"minutes, all of these things were integers\nas were the credits. That means that we did"},"1511":{"dur":5,"text":"integer division. Remember that's one of those\ntroublesome operations, so we might want to"},"1516":{"dur":5,"text":"think about how we could fix that. Well, the\neasiest way is to make one of the values integers."},"1522":{"dur":5,"text":"One way that people sometimes try to fix it\nis by casting to double early on, and that"},"1527":{"dur":7,"text":"can work, but where I like to cast is right\nhere. I like to cast the denominator. So that"},"1534":{"dur":5,"text":"tells it to use the number of credits. So\nwe fixed one problem. Let's see if that solves"},"1540":{"dur":7,"text":"the issue. Remember there's often more than\none problem in code."},"1559":{"dur":7,"text":"So here's our test data being entered again.\nUh oh, it's still A Tale of Five Cities. So"},"1582":{"dur":4,"text":"even though we fixed one problem, we didn't\nfix all the problems. This is very typical"},"1586":{"dur":7,"text":"of program development. So we think that this\nmay be correct, so let's look at this comparison."},"1594":{"dur":5,"text":"If the cost per minute is less than the minimum\ncost per minute, then the minimum cost per"},"1599":{"dur":5,"text":"minute becomes cost per minute. That seems\ncorrect, so that probably isn't the problem."},"1605":{"dur":4,"text":"Let's look and see how we initialized cost\nper minute and see if we did that correctly."},"1610":{"dur":6,"text":"Well, the minimum cost per minute was originally\nset to hours times 60 plus minutes divide"},"1616":{"dur":6,"text":"by credits. Uh oh, we used that formula over\nand we didn't fix it. So let's fix this one"},"1622":{"dur":5,"text":"too. Now we don't know if this is the ultimate\nproblem, but it's one more problem with a"},"1627":{"dur":2,"text":"code that we're fixing."},"1630":{"dur":7,"text":"Here we go. Same old data. And you may figured\nout what's wrong with the problem all\u2014I'm"},"1657":{"dur":7,"text":"sorry, what's wrong with the problem already,\nin which case good for you. That's a skill"},"1665":{"dur":7,"text":"you learn. We're still at A Tale of Five Cities.\nWell, let's give it a little bit more thought"},"1674":{"dur":7,"text":"here about what we've done. Did we really\ncalculate the cost per minute or did we calculate"},"1681":{"dur":6,"text":"the minutes per credit? We have our equation\nupside down. These are the mistakes you make"},"1687":{"dur":4,"text":"all the time when you're programming, and\nyou definitely need to learn to spot them."},"1692":{"dur":5,"text":"There are a couple of different ways we could\nfigure it. One is we could change our calculation"},"1698":{"dur":5,"text":"to look for the maximum number of minutes\nper credit. That's probably a really good"},"1703":{"dur":4,"text":"solution here. Then we don't have to turn\nour mathematical equation that we spent so"},"1707":{"dur":5,"text":"much time working on upside down. Now I hasten\nto add that the two errors we found in the"},"1712":{"dur":4,"text":"program before were real mistakes, and we\nwere going to have to fix those sooner or"},"1717":{"dur":4,"text":"later, so the fact that we fix them before\nthis one instead of after that doesn't matter."},"1722":{"dur":4,"text":"So let's go and change some variable names\nand get our program doing the right thing."},"1727":{"dur":7,"text":"What we're going to want now is the maximum\nminutes per credit. Now see that makes a lot"},"1737":{"dur":5,"text":"more sense one way or another because you've\ngot minutes in the numerator and credits in"},"1743":{"dur":4,"text":"the denominator. Although notice our credits\nhave scrolled off screen, which makes them"},"1747":{"dur":5,"text":"hard to read, so we're going to move them\nover. Now our cheapest book so far, that part"},"1753":{"dur":7,"text":"is okay. Instead of cost per minute, we'll\nchange this to minutes per credit, and we'll"},"1777":{"dur":7,"text":"have to move this and change it all the way\ndown. So this is now maximum minutes per credit,"},"1789":{"dur":7,"text":"and this is now minutes per credit. And we'll\nhave to change these too, and everything else"},"1820":{"dur":0,"text":"looks fine."},"1821":{"dur":4,"text":"When you make those kind of changes, make\nsure you check over to the side to make sure"},"1825":{"dur":4,"text":"there are no little red boxes, and over on\nthis side for red X's because Eclipse will"},"1830":{"dur":4,"text":"tell you if you found everything or not. Okay,\nso maybe our program is going to work this"},"1835":{"dur":7,"text":"time. 500 hours, 5 minutes, one credit. Cross\nyour fingers. The cheapest book is A Tale"},"1869":{"dur":6,"text":"of Five Cities still. Okay, so we really have\na problem here. So we need to look and see"},"1875":{"dur":7,"text":"what's going on. Well, we think we fixed that\nokay, but look at what we did in this part"},"1883":{"dur":5,"text":"of the statement right here. We changed our\nwords to be maximum instead of minimum, but"},"1889":{"dur":5,"text":"we forgot to change our mathematical symbol,\nand that's why it didn't get fixed. When we're"},"1894":{"dur":7,"text":"finding a maximum, we want to change it when\nit's greater, not when it's smaller. The other"},"1901":{"dur":4,"text":"thing to think about is how we initialize\nthat to start with. Now it happens that we"},"1906":{"dur":5,"text":"initialized it to the first value, and so\nthat should still work okay. If we had initialized"},"1911":{"dur":6,"text":"it to a small number, we would have to reconsider\nthat when we change it to minimum to maximum."},"1918":{"dur":7,"text":"One more time. A Tale of Two Cities, hallelujah!\nNotice also that having our test data in advance"},"1954":{"dur":3,"text":"really helped us out here because then when\nwe made a mistake in the program, we were"},"1958":{"dur":6,"text":"able to find it. Here's something to think\nabout with a program\u2014is it possible to test"},"1964":{"dur":6,"text":"a program too much? Well, yes, but no one\never really does. In fact, testing programs"},"1971":{"dur":4,"text":"is not really the greatest way to check and\nsee that they're working or not. There is"},"1975":{"dur":4,"text":"a better way to make sure that your programs\nare correct. It's actually possible to prove"},"1980":{"dur":4,"text":"that a program is correct. Now this is a very\nadvanced technique. It's not something that"},"1984":{"dur":4,"text":"beginning programmers usually learn, but it's\na really great idea, and it is important because"},"1989":{"dur":6,"text":"so much of what we do with software now depends\non the software working correctly. Is it really"},"1995":{"dur":4,"text":"possible to prove that programs are correct?\nWell, yes, not only is it possible, you could"},"2000":{"dur":5,"text":"even automate the process. If you're interested\nin things like this, you're going to want"},"2005":{"dur":4,"text":"to learn a language where it's a little easier\nto do this. One of the easiest languages to"},"2009":{"dur":5,"text":"learn that does this is a language called\nLisp. I actually wrote my doctoral dissertation"},"2014":{"dur":6,"text":"research code in Lisp. It's a wonderful language\nto use. It's called ACL2 if you look for it"},"2021":{"dur":4,"text":"online, and it's a really good language for\nproving that programs are correct. If you're"},"2026":{"dur":5,"text":"interested in this part of computer science,\nyou may want to take CS 2603 Applied Logic"},"2031":{"dur":5,"text":"for Hardware and Software. That class has\nthis class as a prerequisite so you could"},"2036":{"dur":1,"text":"do it next semester."}}