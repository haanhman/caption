{"3":{"dur":2,"text":"This episode is supported by Hover."},"6":{"dur":3,"text":"Hi, I'm Carrie Anne, and welcome to Crash\nCourse Computer Science!"},"9":{"dur":3,"text":"Computers in the 1940s and early 50s ran one\nprogram at a time."},"12":{"dur":2,"text":"A programmer would write one at their desk,\nfor example, on punch cards."},"15":{"dur":4,"text":"Then, they\u2019d carry it to a room containing\na room-sized computer, and hand it to a dedicated"},"19":{"dur":1,"text":"computer operator."},"20":{"dur":3,"text":"That person would then feed the program into\nthe computer when it was next available."},"24":{"dur":2,"text":"The computer would run it, spit out some output,\nand halt."},"27":{"dur":4,"text":"This very manual process worked OK back when\ncomputers were slow, and running a program"},"31":{"dur":1,"text":"often took hours, days or even weeks."},"33":{"dur":5,"text":"But, as we discussed last episode, computers\nbecame faster... and faster... and faster"},"38":{"dur":1,"text":"\u2013 exponentially so!"},"39":{"dur":3,"text":"Pretty soon, having humans run around and\ninserting programs into readers was taking"},"43":{"dur":2,"text":"longer than running the actual programs themselves."},"46":{"dur":4,"text":"We needed a way for computers to operate themselves,\nand so, operating systems were born."},"50":{"dur":9,"text":"INTRO"},"59":{"dur":3,"text":"Operating systems, or OS\u2019es for short, are\njust programs."},"63":{"dur":3,"text":"But, special privileges on the hardware let\nthem run and manage other programs."},"67":{"dur":3,"text":"They\u2019re typically the first one to start\nwhen a computer is turned on, and all subsequent"},"70":{"dur":1,"text":"programs are launched by the OS."},"72":{"dur":4,"text":"They got their start in the 1950s, as computers\nbecame more widespread and more powerful."},"76":{"dur":4,"text":"The very first OSes augmented the mundane,\nmanual task of loading programs by hand."},"81":{"dur":3,"text":"Instead of being given one program at a time,\ncomputers could be given batches."},"85":{"dur":4,"text":"When the computer was done with one, it would automatically and near-instantly start the next."},"90":{"dur":3,"text":"There was no downtime while someone scurried\naround an office to find the next program"},"93":{"dur":1,"text":"to run."},"94":{"dur":1,"text":"This was called batch processing."},"96":{"dur":2,"text":"While computers got faster, they also got\ncheaper."},"98":{"dur":3,"text":"So, they were popping up all over the world,\nespecially in universities and government"},"102":{"dur":1,"text":"offices."},"103":{"dur":2,"text":"Soon, people started sharing software."},"105":{"dur":1,"text":"But there was a problem\u2026"},"106":{"dur":4,"text":"In the era of one-off computers, like the\nHarvard Mark 1 or ENIAC, programmers only"},"111":{"dur":2,"text":"had to write code for that one single machine."},"113":{"dur":4,"text":"The processor, punch card readers, and printers\nwere known and unchanging."},"118":{"dur":4,"text":"But as computers became more widespread, their\nconfigurations were not always identical,"},"122":{"dur":3,"text":"like computers might have the same CPU, but\nnot the same printer."},"125":{"dur":1,"text":"This was a huge pain for programmers."},"127":{"dur":3,"text":"Not only did they have to worry about writing\ntheir program, but also how to interface with"},"131":{"dur":5,"text":"each and every model of printer, and all devices\nconnected to a computer, what are called peripherals."},"136":{"dur":4,"text":"Interfacing with early peripherals was very\nlow level, requiring programmers to know intimate"},"140":{"dur":2,"text":"hardware details about each device."},"143":{"dur":4,"text":"On top of that, programmers rarely had access to every model of a peripheral to test their code on."},"147":{"dur":4,"text":"So, they had to write code as best they could,\noften just by reading manuals, and hope it"},"152":{"dur":1,"text":"worked when shared."},"153":{"dur":3,"text":"Things weren\u2019t exactly plug-and-play back\nthen\u2026 more plug-and-pray."},"156":{"dur":4,"text":"This was clearly terrible, so to make it easier\nfor programmers, Operating Systems stepped"},"160":{"dur":4,"text":"in as intermediaries between software programs\nand hardware peripherals."},"165":{"dur":4,"text":"More specifically, they provided a software\nabstraction, through APIs, called device drivers."},"170":{"dur":4,"text":"These allow programmers to talk to common\ninput and output hardware, or I\/O for short,"},"174":{"dur":1,"text":"using standardized mechanisms."},"176":{"dur":3,"text":"For example, programmers could call a function\nlike \u201cprint highscore\u201d, and the OS would"},"180":{"dur":2,"text":"do the heavy lifting to get it onto paper."},"182":{"dur":3,"text":"By the end of the 1950s, computers had gotten\nso fast, they were often idle waiting for"},"186":{"dur":3,"text":"slow mechanical things, like printers and\npunch card readers."},"189":{"dur":4,"text":"While programs were blocked on I\/O, the expensive\nprocessor was just chillin\u2019... not like"},"193":{"dur":1,"text":"a villain\u2026 you know, just relaxing."},"195":{"dur":4,"text":"In the late 50\u2019s, the University of Manchester,\nin the UK, started work on a supercomputer"},"199":{"dur":2,"text":"called Atlas, one of the first in the world."},"201":{"dur":3,"text":"They knew it was going to be wicked fast,\nso they needed a way to make maximal use of"},"205":{"dur":1,"text":"the expensive machine."},"206":{"dur":4,"text":"Their solution was a program called the Atlas\nSupervisor, finished in 1962."},"211":{"dur":4,"text":"This operating system not only loaded programs\nautomatically, like earlier batch systems,"},"215":{"dur":3,"text":"but could also run several at the same time\non its single CPU."},"219":{"dur":1,"text":"It did this through clever scheduling."},"220":{"dur":4,"text":"Let\u2019s say we have a game program running\non Atlas, and we call the function \u201cprint"},"224":{"dur":3,"text":"highscore\u201d which instructs Atlas to print\nthe value of a variable named \u201chighscore\u201d"},"228":{"dur":4,"text":"onto paper to show our friends that we\u2019re\nthe ultimate champion of virtual tiddlywinks."},"232":{"dur":4,"text":"That function call is going to take a while,\nthe equivalent of thousands of clock cycles,"},"237":{"dur":4,"text":"because mechanical printers are slow in comparison\nto electronic CPUs."},"241":{"dur":4,"text":"So instead of waiting for the I\/O to finish,\nAtlas instead puts our program to sleep, then"},"245":{"dur":3,"text":"selects and runs another program that\u2019s\nwaiting and ready to run."},"248":{"dur":3,"text":"Eventually, the printer will report back to\nAtlas that it finished printing the value"},"252":{"dur":1,"text":"of \u201chighscore\u201d."},"253":{"dur":3,"text":"Atlas then marks our program as ready to go,\nand at some point, it will be scheduled to"},"256":{"dur":4,"text":"run again on the CPU, and continue onto the\nnext line of code following the print statement."},"261":{"dur":4,"text":"In this way, Atlas could have one program\nrunning calculations on the CPU, while another"},"265":{"dur":3,"text":"was printing out data, and yet another reading\nin data from a punch tape."},"269":{"dur":4,"text":"Atlas\u2019 engineers doubled down on this idea,\nand outfitted their computer with 4 paper"},"274":{"dur":4,"text":"tape readers, 4 paper tape punches, and up\nto 8 magnetic tape drives."},"278":{"dur":4,"text":"This allowed many programs to be in progress\nall at once, sharing time on a single CPU."},"283":{"dur":3,"text":"This ability, enabled by the Operating System,\nis called multitasking."},"286":{"dur":4,"text":"There\u2019s one big catch to having many programs running simultaneously on a single computer, though."},"291":{"dur":3,"text":"Each one is going to need some memory, and\nwe can\u2019t lose that program\u2019s data when"},"295":{"dur":1,"text":"we switch to another program."},"296":{"dur":2,"text":"The solution is to allocate each program its\nown block of memory."},"299":{"dur":4,"text":"So, for example, let\u2019s say a computer has\n10,000 memory locations in total."},"304":{"dur":6,"text":"Program A might get allocated memory addresses\n0 through 999, and Program B might get 1000"},"310":{"dur":2,"text":"through 1999, and so on."},"313":{"dur":4,"text":"If a program asks for more memory, the operating\nsystem decides if it can grant that request,"},"317":{"dur":2,"text":"and if so, what memory block to allocate next."},"320":{"dur":2,"text":"This flexibility is great, but introduces\na quirk."},"323":{"dur":4,"text":"It means that Program A could end up being\nallocated non-sequential blocks of memory,"},"327":{"dur":5,"text":"in say addresses 0 through 999, and 2000 through 2999."},"333":{"dur":4,"text":"And this is just a simple example - a real\nprogram might be allocated dozens of blocks"},"337":{"dur":1,"text":"scattered all over memory."},"338":{"dur":3,"text":"As you might imagine, this would get really\nconfusing for programmers to keep track of."},"342":{"dur":3,"text":"Maybe there\u2019s a long list of sales data\nin memory that a program has to total up at"},"346":{"dur":3,"text":"the end of the day, but this list is stored\nacross a bunch of different blocks of memory."},"350":{"dur":4,"text":"To hide this complexity, Operating Systems\nvirtualize memory locations."},"354":{"dur":3,"text":"With Virtual Memory, programs can assume their\nmemory always starts at address 0, keeping"},"358":{"dur":1,"text":"things simple and consistent."},"360":{"dur":4,"text":"However, the actual, physical location in\ncomputer memory is hidden and abstracted by"},"364":{"dur":1,"text":"the operating system."},"366":{"dur":7,"text":"Just a new level of abstraction."},"373":{"dur":3,"text":"Let\u2019s take our example Program B, which\nhas been allocated a block of memory from"},"377":{"dur":3,"text":"address 1000 to 1999."},"381":{"dur":4,"text":"As far as Program B can tell, this appears\nto be a block from 0 to 999."},"385":{"dur":4,"text":"The OS and CPU handle the virtual-to-physical\nmemory remapping automatically."},"389":{"dur":6,"text":"So, if Program B requests memory location\n42, it really ends up reading address 1042."},"396":{"dur":4,"text":"This virtualization of memory addresses is\neven more useful for Program A, which in our"},"400":{"dur":4,"text":"example, has been allocated two blocks of\nmemory that are separated from one another."},"404":{"dur":2,"text":"This too is invisible to Program A."},"406":{"dur":4,"text":"As far as it can tell, it\u2019s been allocated\na continuous block of 2000 addresses."},"411":{"dur":5,"text":"When Program A reads memory address 999, that\ndoes coincidentally map to physical memory"},"417":{"dur":1,"text":"address 999."},"419":{"dur":4,"text":"But if Program A reads the very next value\nin memory, at address 1000, that gets mapped"},"423":{"dur":2,"text":"behind the scenes to physical memory address\n2000."},"426":{"dur":5,"text":"This mechanism allows programs to have flexible\nmemory sizes, called dynamic memory allocation,"},"431":{"dur":2,"text":"that appear to be continuous to them."},"433":{"dur":4,"text":"It simplifies everything and offers tremendous\nflexibility to the Operating System in running"},"438":{"dur":1,"text":"multiple programs simultaneously."},"440":{"dur":3,"text":"Another upside of allocating each program\nits own memory, is that they\u2019re better isolated"},"443":{"dur":0,"text":"from one another."},"444":{"dur":4,"text":"So, if a buggy program goes awry, and starts\nwriting gobbledygook, it can only trash its"},"448":{"dur":2,"text":"own memory, not that of other programs."},"451":{"dur":2,"text":"This feature is called Memory Protection."},"453":{"dur":4,"text":"This is also really useful in protecting against\nmalicious software, like viruses."},"457":{"dur":3,"text":"For example, we generally don\u2019t want other\nprograms to have the ability to read or modify"},"461":{"dur":4,"text":"the memory of, let say, our email, with that\nkind of access, malware could send emails"},"465":{"dur":2,"text":"on your behalf and maybe steal personal information."},"468":{"dur":0,"text":"Not good!"},"469":{"dur":2,"text":"Atlas had both virtual and protected memory."},"471":{"dur":2,"text":"It was the first computer and OS to support\nthese features!"},"474":{"dur":3,"text":"By the 1970s, computers were sufficiently\nfast and cheap."},"478":{"dur":4,"text":"Institutions like a university could buy a\ncomputer and let students use it."},"482":{"dur":4,"text":"It was not only fast enough to run several\nprograms at once, but also give several users"},"486":{"dur":2,"text":"simultaneous, interactive access."},"489":{"dur":4,"text":"This was done through a terminal, which is\na keyboard and screen that connects to a big"},"493":{"dur":2,"text":"computer, but doesn\u2019t contain any processing\npower itself."},"496":{"dur":4,"text":"A refrigerator-sized computer might have 50\nterminals connected to it, allowing up to"},"501":{"dur":1,"text":"50 users."},"502":{"dur":4,"text":"Now operating systems had to handle not just\nmultiple programs, but also multiple users."},"507":{"dur":3,"text":"So that no one person could gobble up all\nof a computer's resources, operating systems"},"510":{"dur":1,"text":"were developed that offered time-sharing."},"512":{"dur":4,"text":"With time-sharing each individual user was\nonly allowed to utilize a small fraction of"},"517":{"dur":2,"text":"the computer\u2019s processor, memory, and so\non."},"519":{"dur":4,"text":"Because computers are so fast, even getting\njust 1\/50th of its resources was enough for"},"524":{"dur":1,"text":"individuals to complete many tasks."},"525":{"dur":4,"text":"The most influential of early time-sharing\nOperating Systems was Multics, or Multiplexed"},"530":{"dur":3,"text":"Information and Computing Service, released\nin 1969."},"534":{"dur":4,"text":"Multics was the first major operating\nsystem designed to be secure from the outset."},"538":{"dur":4,"text":"Developers didn\u2019t want mischievous users\naccessing data they shouldn't, like students"},"542":{"dur":3,"text":"attempting to access the final exam on their\nprofessor\u2019s account."},"545":{"dur":4,"text":"Features like this meant Multics was really\ncomplicated for its time, using around 1 Megabit"},"550":{"dur":1,"text":"of memory, which was a lot back then!"},"552":{"dur":3,"text":"That might be half of a computer's memory,\njust to run the OS!"},"555":{"dur":3,"text":"Dennis Ritchie, one of the researchers working\non Multics, once said:"},"558":{"dur":4,"text":"\u201cOne of the obvious things that went wrong\nwith Multics as a commercial success was just"},"563":{"dur":2,"text":"that it was sort of over-engineered in a sense."},"565":{"dur":1,"text":"There was just too much in it.\u201d"},"566":{"dur":2,"text":"T\nhis lead Dennis, and another Multics researcher,"},"568":{"dur":4,"text":"Ken Thompson, to strike out on their own and build a new, lean operating system\u2026 called Unix."},"573":{"dur":2,"text":"They wanted to separate the OS into two parts:"},"576":{"dur":4,"text":"First was the core functionality of the OS,\nthings like memory management, multitasking,"},"580":{"dur":2,"text":"and dealing with I\/O, which is called the\nkernel."},"583":{"dur":3,"text":"The second part was a wide array of useful\ntools that came bundled with, but not part"},"587":{"dur":2,"text":"of the kernel, things like programs and libraries."},"589":{"dur":3,"text":"Building a compact, lean kernel meant intentionally\nleaving some functionality out."},"593":{"dur":2,"text":"Tom Van Vleck, another Multics developer,\nrecalled:"},"595":{"dur":4,"text":"\u201cI remarked to Dennis that easily half the\ncode I was writing in Multics was error recovery"},"600":{"dur":0,"text":"code.\""},"601":{"dur":2,"text":"He said, \"We left all that stuff out of Unix."},"603":{"dur":4,"text":"If there's an error, we have this routine\ncalled panic, and when it is called, the machine"},"607":{"dur":3,"text":"crashes, and you holler down the hall, 'Hey,\nreboot it.'\"\u201d"},"611":{"dur":3,"text":"You might have heard of kernel panics, This\nis where the term came from."},"614":{"dur":4,"text":"It\u2019s literally when the kernel crashes,\nhas no recourse to recover, and so calls a"},"618":{"dur":1,"text":"function called \u201cpanic\u201d."},"619":{"dur":3,"text":"Originally, all it did was print the word\n\u201cpanic\u201d and then enter"},"622":{"dur":1,"text":"an infinite loop."},"624":{"dur":4,"text":"This simplicity meant that Unix could be run\non cheaper and more diverse hardware, making"},"628":{"dur":3,"text":"it popular inside Bell Labs, where Dennis\nand Ken worked."},"631":{"dur":3,"text":"As more developers started using Unix to build\nand run their own programs, the number of"},"634":{"dur":1,"text":"contributed tools grew."},"636":{"dur":4,"text":"Soon after its release in 1971, it gained\ncompilers for different programming languages"},"641":{"dur":4,"text":"and even a word processor, quickly making\nit one of the most popular OSes of the 1970s"},"645":{"dur":1,"text":"and 80s."},"646":{"dur":4,"text":"At the same time, by the early 1980s, the\ncost of a basic computer had fallen to the"},"650":{"dur":4,"text":"point where individual people could afford\none, called a personal or home computer."},"655":{"dur":4,"text":"These were much simpler than the big mainframes\nfound at universities, corporations, and governments."},"659":{"dur":2,"text":"So, their operating systems had to be equally\nsimple."},"662":{"dur":5,"text":"For example, Microsoft\u2019s Disk Operating\nSystem, or MS-DOS, was just 160 kilobytes,"},"667":{"dur":2,"text":"allowing it to fit, as the name suggests,\nonto a single disk."},"670":{"dur":4,"text":"First released in 1981, it became the most\npopular OS for early home computers, even"},"675":{"dur":3,"text":"though it lacked multitasking and protected\nmemory."},"678":{"dur":3,"text":"This meant that programs could, and would,\nregularly crash the system."},"682":{"dur":4,"text":"While annoying, it was an acceptable tradeoff,\nas users could just turn their own computers"},"686":{"dur":0,"text":"off and on again!"},"687":{"dur":4,"text":"Even early versions of Windows, first released\nby Microsoft in 1985 and which dominated the"},"692":{"dur":3,"text":"OS scene throughout the 1990s, lacked strong\nmemory protection."},"695":{"dur":4,"text":"When programs misbehaved, you could get the\nblue screen of death, a sign that a program"},"700":{"dur":3,"text":"had crashed so badly that it took down the\nwhole operating system."},"703":{"dur":4,"text":"Luckily, newer versions of Windows have better protections and usually don't crash that often."},"708":{"dur":4,"text":"Today, computers run modern operating systems,\nlike Mac OS X, Windows 10, Linux, iOS and"},"713":{"dur":1,"text":"Android."},"714":{"dur":4,"text":"Even though the computers we own are most\noften used by just a single person, you! their"},"718":{"dur":3,"text":"OSes all have multitasking and virtual and\nprotected memory."},"722":{"dur":4,"text":"So, they can run many programs at once: you\ncan watch YouTube in your web browser, edit"},"726":{"dur":5,"text":"a photo in Photoshop, play music in Spotify\nand sync Dropbox all at the same time."},"732":{"dur":3,"text":"This wouldn\u2019t be possible without those\ndecades of research and development on Operating"},"736":{"dur":3,"text":"Systems, and of course the proper memory to\nstore those programs."},"739":{"dur":1,"text":"Which we\u2019ll get to next week."},"741":{"dur":2,"text":"I\u2019d like to thank Hover for sponsoring this\nepisode."},"744":{"dur":3,"text":"Hover is a service that helps you buy and\nmanage domain names."},"747":{"dur":4,"text":"Hover has over 400 domain extensions to end\nyour domain with - including .com and .net."},"752":{"dur":3,"text":"You can also get unique domains that are more\nprofessional than a generic address."},"755":{"dur":4,"text":"Here at Crash Course, we'd get the domain\nname \u201cmongols.fans\u201d but I think you know"},"760":{"dur":0,"text":"that already."},"761":{"dur":3,"text":"Once you have your domain, you can set up\nyour custom email to forward to your existing"},"764":{"dur":3,"text":"email address -- including Outlook or Gmail\nor whatever you already use."},"768":{"dur":4,"text":"With Hover, you can get a custom domain and\nemail address for 10% off."},"772":{"dur":5,"text":"Go to Hover.com\/crashcourse today to create\nyour custom domain and help support our show!"}}