{"3.42":{"start":"3.42","dur":"2.4","text":"This episode is supported by Hover."},"6.00":{"start":"6","dur":"3.44","text":"Hi, I&#39;m Carrie Anne, and welcome to Crash\nCourse Computer Science!"},"9.44":{"start":"9.44","dur":"3.3","text":"Computers in the 1940s and early 50s ran one\nprogram at a time."},"12.74":{"start":"12.74","dur":"2.819","text":"A programmer would write one at their desk,\nfor example, on punch cards."},"15.56":{"start":"15.559","dur":"4.071","text":"Then, they\u2019d carry it to a room containing\na room-sized computer, and hand it to a dedicated"},"19.63":{"start":"19.63","dur":"1","text":"computer operator."},"20.63":{"start":"20.63","dur":"3.77","text":"That person would then feed the program into\nthe computer when it was next available."},"24.40":{"start":"24.4","dur":"2.74","text":"The computer would run it, spit out some output,\nand halt."},"27.14":{"start":"27.14","dur":"4.59","text":"This very manual process worked OK back when\ncomputers were slow, and running a program"},"31.73":{"start":"31.73","dur":"1.891","text":"often took hours, days or even weeks."},"33.62":{"start":"33.621","dur":"5.139","text":"But, as we discussed last episode, computers\nbecame faster... and faster... and faster"},"38.76":{"start":"38.76","dur":"1.22","text":"\u2013 exponentially so!"},"39.98":{"start":"39.98","dur":"3.64","text":"Pretty soon, having humans run around and\ninserting programs into readers was taking"},"43.62":{"start":"43.62","dur":"2.529","text":"longer than running the actual programs themselves."},"46.15":{"start":"46.149","dur":"4.551","text":"We needed a way for computers to operate themselves,\nand so, operating systems were born."},"50.70":{"start":"50.7","dur":"9.14","text":"INTRO"},"59.84":{"start":"59.84","dur":"3.3","text":"Operating systems, or OS\u2019es for short, are\njust programs."},"63.14":{"start":"63.14","dur":"3.94","text":"But, special privileges on the hardware let\nthem run and manage other programs."},"67.08":{"start":"67.08","dur":"3.78","text":"They\u2019re typically the first one to start\nwhen a computer is turned on, and all subsequent"},"70.86":{"start":"70.86","dur":"1.71","text":"programs are launched by the OS."},"72.57":{"start":"72.57","dur":"4.41","text":"They got their start in the 1950s, as computers\nbecame more widespread and more powerful."},"76.98":{"start":"76.98","dur":"4.78","text":"The very first OSes augmented the mundane,\nmanual task of loading programs by hand."},"81.76":{"start":"81.76","dur":"3.93","text":"Instead of being given one program at a time,\ncomputers could be given batches."},"85.69":{"start":"85.69","dur":"4.31","text":"When the computer was done with one, it would automatically and near-instantly start the next."},"90.00":{"start":"90","dur":"3.52","text":"There was no downtime while someone scurried\naround an office to find the next program"},"93.52":{"start":"93.52","dur":"1","text":"to run."},"94.53":{"start":"94.53","dur":"1.66","text":"This was called batch processing."},"96.19":{"start":"96.19","dur":"2.24","text":"While computers got faster, they also got\ncheaper."},"98.43":{"start":"98.43","dur":"3.9","text":"So, they were popping up all over the world,\nespecially in universities and government"},"102.33":{"start":"102.33","dur":"1","text":"offices."},"103.33":{"start":"103.33","dur":"2.01","text":"Soon, people started sharing software."},"105.34":{"start":"105.34","dur":"1.49","text":"But there was a problem\u2026"},"106.83":{"start":"106.83","dur":"4.31","text":"In the era of one-off computers, like the\nHarvard Mark 1 or ENIAC, programmers only"},"111.14":{"start":"111.14","dur":"2.72","text":"had to write code for that one single machine."},"113.86":{"start":"113.86","dur":"4.29","text":"The processor, punch card readers, and printers\nwere known and unchanging."},"118.15":{"start":"118.15","dur":"4.11","text":"But as computers became more widespread, their\nconfigurations were not always identical,"},"122.26":{"start":"122.26","dur":"3.4","text":"like computers might have the same CPU, but\nnot the same printer."},"125.66":{"start":"125.66","dur":"1.9","text":"This was a huge pain for programmers."},"127.56":{"start":"127.56","dur":"3.689","text":"Not only did they have to worry about writing\ntheir program, but also how to interface with"},"131.25":{"start":"131.249","dur":"5.191","text":"each and every model of printer, and all devices\nconnected to a computer, what are called peripherals."},"136.44":{"start":"136.44","dur":"4.44","text":"Interfacing with early peripherals was very\nlow level, requiring programmers to know intimate"},"140.88":{"start":"140.88","dur":"2.22","text":"hardware details about each device."},"143.10":{"start":"143.1","dur":"4.78","text":"On top of that, programmers rarely had access to every model of a peripheral to test their code on."},"147.88":{"start":"147.88","dur":"4.18","text":"So, they had to write code as best they could,\noften just by reading manuals, and hope it"},"152.06":{"start":"152.06","dur":"1","text":"worked when shared."},"153.07":{"start":"153.069","dur":"3.521","text":"Things weren\u2019t exactly plug-and-play back\nthen\u2026 more plug-and-pray."},"156.59":{"start":"156.59","dur":"4.25","text":"This was clearly terrible, so to make it easier\nfor programmers, Operating Systems stepped"},"160.84":{"start":"160.84","dur":"4.64","text":"in as intermediaries between software programs\nand hardware peripherals."},"165.48":{"start":"165.48","dur":"4.84","text":"More specifically, they provided a software\nabstraction, through APIs, called device drivers."},"170.32":{"start":"170.32","dur":"4.3","text":"These allow programmers to talk to common\ninput and output hardware, or I\/O for short,"},"174.63":{"start":"174.629","dur":"1.801","text":"using standardized mechanisms."},"176.43":{"start":"176.43","dur":"3.699","text":"For example, programmers could call a function\nlike \u201cprint highscore\u201d, and the OS would"},"180.13":{"start":"180.129","dur":"2.22","text":"do the heavy lifting to get it onto paper."},"182.35":{"start":"182.349","dur":"3.941","text":"By the end of the 1950s, computers had gotten\nso fast, they were often idle waiting for"},"186.29":{"start":"186.29","dur":"3.539","text":"slow mechanical things, like printers and\npunch card readers."},"189.83":{"start":"189.829","dur":"4.11","text":"While programs were blocked on I\/O, the expensive\nprocessor was just chillin\u2019... not like"},"193.94":{"start":"193.939","dur":"1.54","text":"a villain\u2026 you know, just relaxing."},"195.48":{"start":"195.479","dur":"4.021","text":"In the late 50\u2019s, the University of Manchester,\nin the UK, started work on a supercomputer"},"199.50":{"start":"199.5","dur":"2.459","text":"called Atlas, one of the first in the world."},"201.96":{"start":"201.959","dur":"3.821","text":"They knew it was going to be wicked fast,\nso they needed a way to make maximal use of"},"205.78":{"start":"205.78","dur":"1.09","text":"the expensive machine."},"206.87":{"start":"206.87","dur":"4.33","text":"Their solution was a program called the Atlas\nSupervisor, finished in 1962."},"211.20":{"start":"211.2","dur":"4.17","text":"This operating system not only loaded programs\nautomatically, like earlier batch systems,"},"215.37":{"start":"215.37","dur":"3.8","text":"but could also run several at the same time\non its single CPU."},"219.17":{"start":"219.17","dur":"1.399","text":"It did this through clever scheduling."},"220.57":{"start":"220.569","dur":"4.191","text":"Let\u2019s say we have a game program running\non Atlas, and we call the function \u201cprint"},"224.76":{"start":"224.76","dur":"3.78","text":"highscore\u201d which instructs Atlas to print\nthe value of a variable named \u201chighscore\u201d"},"228.54":{"start":"228.54","dur":"4.069","text":"onto paper to show our friends that we\u2019re\nthe ultimate champion of virtual tiddlywinks."},"232.61":{"start":"232.609","dur":"4.7","text":"That function call is going to take a while,\nthe equivalent of thousands of clock cycles,"},"237.31":{"start":"237.309","dur":"4.091","text":"because mechanical printers are slow in comparison\nto electronic CPUs."},"241.40":{"start":"241.4","dur":"4.58","text":"So instead of waiting for the I\/O to finish,\nAtlas instead puts our program to sleep, then"},"245.98":{"start":"245.98","dur":"3","text":"selects and runs another program that\u2019s\nwaiting and ready to run."},"248.98":{"start":"248.98","dur":"3.069","text":"Eventually, the printer will report back to\nAtlas that it finished printing the value"},"252.05":{"start":"252.049","dur":"1.241","text":"of \u201chighscore\u201d."},"253.29":{"start":"253.29","dur":"3.64","text":"Atlas then marks our program as ready to go,\nand at some point, it will be scheduled to"},"256.93":{"start":"256.93","dur":"4.76","text":"run again on the CPU, and continue onto the\nnext line of code following the print statement."},"261.69":{"start":"261.69","dur":"4.289","text":"In this way, Atlas could have one program\nrunning calculations on the CPU, while another"},"265.98":{"start":"265.98","dur":"3.78","text":"was printing out data, and yet another reading\nin data from a punch tape."},"269.76":{"start":"269.76","dur":"4.32","text":"Atlas\u2019 engineers doubled down on this idea,\nand outfitted their computer with 4 paper"},"274.10":{"start":"274.1","dur":"4.14","text":"tape readers, 4 paper tape punches, and up\nto 8 magnetic tape drives."},"278.24":{"start":"278.24","dur":"4.97","text":"This allowed many programs to be in progress\nall at once, sharing time on a single CPU."},"283.21":{"start":"283.21","dur":"3.69","text":"This ability, enabled by the Operating System,\nis called multitasking."},"286.92":{"start":"286.92","dur":"4.82","text":"There\u2019s one big catch to having many programs running simultaneously on a single computer, though."},"291.74":{"start":"291.74","dur":"3.42","text":"Each one is going to need some memory, and\nwe can\u2019t lose that program\u2019s data when"},"295.16":{"start":"295.16","dur":"1.599","text":"we switch to another program."},"296.76":{"start":"296.759","dur":"2.72","text":"The solution is to allocate each program its\nown block of memory."},"299.48":{"start":"299.48","dur":"4.52","text":"So, for example, let\u2019s say a computer has\n10,000 memory locations in total."},"304.00":{"start":"304","dur":"6.7","text":"Program A might get allocated memory addresses\n0 through 999, and Program B might get 1000"},"310.71":{"start":"310.71","dur":"2.69","text":"through 1999, and so on."},"313.40":{"start":"313.4","dur":"4.56","text":"If a program asks for more memory, the operating\nsystem decides if it can grant that request,"},"317.96":{"start":"317.96","dur":"2.63","text":"and if so, what memory block to allocate next."},"320.59":{"start":"320.59","dur":"2.88","text":"This flexibility is great, but introduces\na quirk."},"323.47":{"start":"323.47","dur":"4.259","text":"It means that Program A could end up being\nallocated non-sequential blocks of memory,"},"327.73":{"start":"327.729","dur":"5.571","text":"in say addresses 0 through 999, and 2000 through 2999."},"333.30":{"start":"333.3","dur":"4.049","text":"And this is just a simple example - a real\nprogram might be allocated dozens of blocks"},"337.35":{"start":"337.349","dur":"1.301","text":"scattered all over memory."},"338.65":{"start":"338.65","dur":"3.91","text":"As you might imagine, this would get really\nconfusing for programmers to keep track of."},"342.56":{"start":"342.56","dur":"3.68","text":"Maybe there\u2019s a long list of sales data\nin memory that a program has to total up at"},"346.25":{"start":"346.25","dur":"3.79","text":"the end of the day, but this list is stored\nacross a bunch of different blocks of memory."},"350.05":{"start":"350.05","dur":"4.83","text":"To hide this complexity, Operating Systems\nvirtualize memory locations."},"354.88":{"start":"354.88","dur":"3.98","text":"With Virtual Memory, programs can assume their\nmemory always starts at address 0, keeping"},"358.86":{"start":"358.86","dur":"1.66","text":"things simple and consistent."},"360.52":{"start":"360.52","dur":"4.2","text":"However, the actual, physical location in\ncomputer memory is hidden and abstracted by"},"364.72":{"start":"364.72","dur":"1.52","text":"the operating system."},"366.24":{"start":"366.24","dur":"7.72","text":"Just a new level of abstraction."},"373.96":{"start":"373.96","dur":"3.66","text":"Let\u2019s take our example Program B, which\nhas been allocated a block of memory from"},"377.62":{"start":"377.62","dur":"3.46","text":"address 1000 to 1999."},"381.08":{"start":"381.08","dur":"4.8","text":"As far as Program B can tell, this appears\nto be a block from 0 to 999."},"385.88":{"start":"385.88","dur":"4.05","text":"The OS and CPU handle the virtual-to-physical\nmemory remapping automatically."},"389.93":{"start":"389.93","dur":"6.32","text":"So, if Program B requests memory location\n42, it really ends up reading address 1042."},"396.25":{"start":"396.25","dur":"4.069","text":"This virtualization of memory addresses is\neven more useful for Program A, which in our"},"400.32":{"start":"400.319","dur":"4.261","text":"example, has been allocated two blocks of\nmemory that are separated from one another."},"404.58":{"start":"404.58","dur":"2.17","text":"This too is invisible to Program A."},"406.75":{"start":"406.75","dur":"4.74","text":"As far as it can tell, it\u2019s been allocated\na continuous block of 2000 addresses."},"411.49":{"start":"411.49","dur":"5.549","text":"When Program A reads memory address 999, that\ndoes coincidentally map to physical memory"},"417.04":{"start":"417.039","dur":"1.97","text":"address 999."},"419.01":{"start":"419.009","dur":"4.46","text":"But if Program A reads the very next value\nin memory, at address 1000, that gets mapped"},"423.47":{"start":"423.469","dur":"2.85","text":"behind the scenes to physical memory address\n2000."},"426.32":{"start":"426.319","dur":"5.261","text":"This mechanism allows programs to have flexible\nmemory sizes, called dynamic memory allocation,"},"431.58":{"start":"431.58","dur":"2.32","text":"that appear to be continuous to them."},"433.90":{"start":"433.9","dur":"4.36","text":"It simplifies everything and offers tremendous\nflexibility to the Operating System in running"},"438.26":{"start":"438.26","dur":"1.84","text":"multiple programs simultaneously."},"440.10":{"start":"440.1","dur":"3.76","text":"Another upside of allocating each program\nits own memory, is that they\u2019re better isolated"},"443.87":{"start":"443.87","dur":"0.99","text":"from one another."},"444.87":{"start":"444.87","dur":"4.03","text":"So, if a buggy program goes awry, and starts\nwriting gobbledygook, it can only trash its"},"448.90":{"start":"448.9","dur":"2.76","text":"own memory, not that of other programs."},"451.66":{"start":"451.66","dur":"2.18","text":"This feature is called Memory Protection."},"453.84":{"start":"453.84","dur":"4.09","text":"This is also really useful in protecting against\nmalicious software, like viruses."},"457.93":{"start":"457.93","dur":"3.78","text":"For example, we generally don\u2019t want other\nprograms to have the ability to read or modify"},"461.71":{"start":"461.71","dur":"4.009","text":"the memory of, let say, our email, with that\nkind of access, malware could send emails"},"465.72":{"start":"465.72","dur":"2.8","text":"on your behalf and maybe steal personal information."},"468.52":{"start":"468.52","dur":"0.78","text":"Not good!"},"469.30":{"start":"469.3","dur":"2.36","text":"Atlas had both virtual and protected memory."},"471.66":{"start":"471.66","dur":"2.9","text":"It was the first computer and OS to support\nthese features!"},"474.56":{"start":"474.56","dur":"3.52","text":"By the 1970s, computers were sufficiently\nfast and cheap."},"478.08":{"start":"478.08","dur":"4.32","text":"Institutions like a university could buy a\ncomputer and let students use it."},"482.41":{"start":"482.409","dur":"4.57","text":"It was not only fast enough to run several\nprograms at once, but also give several users"},"486.98":{"start":"486.979","dur":"2.5","text":"simultaneous, interactive access."},"489.48":{"start":"489.479","dur":"4.071","text":"This was done through a terminal, which is\na keyboard and screen that connects to a big"},"493.55":{"start":"493.55","dur":"2.86","text":"computer, but doesn\u2019t contain any processing\npower itself."},"496.41":{"start":"496.41","dur":"4.7","text":"A refrigerator-sized computer might have 50\nterminals connected to it, allowing up to"},"501.11":{"start":"501.11","dur":"1","text":"50 users."},"502.11":{"start":"502.11","dur":"4.929","text":"Now operating systems had to handle not just\nmultiple programs, but also multiple users."},"507.04":{"start":"507.039","dur":"3.85","text":"So that no one person could gobble up all\nof a computer&#39;s resources, operating systems"},"510.89":{"start":"510.889","dur":"1.77","text":"were developed that offered time-sharing."},"512.66":{"start":"512.659","dur":"4.611","text":"With time-sharing each individual user was\nonly allowed to utilize a small fraction of"},"517.27":{"start":"517.27","dur":"2.59","text":"the computer\u2019s processor, memory, and so\non."},"519.86":{"start":"519.86","dur":"4.77","text":"Because computers are so fast, even getting\njust 1\/50th of its resources was enough for"},"524.63":{"start":"524.63","dur":"1.12","text":"individuals to complete many tasks."},"525.75":{"start":"525.75","dur":"4.589","text":"The most influential of early time-sharing\nOperating Systems was Multics, or Multiplexed"},"530.34":{"start":"530.34","dur":"3.74","text":"Information and Computing Service, released\nin 1969."},"534.08":{"start":"534.08","dur":"4.44","text":"Multics was the first major operating\nsystem designed to be secure from the outset."},"538.52":{"start":"538.52","dur":"4.12","text":"Developers didn\u2019t want mischievous users\naccessing data they shouldn&#39;t, like students"},"542.64":{"start":"542.64","dur":"3.1","text":"attempting to access the final exam on their\nprofessor\u2019s account."},"545.74":{"start":"545.74","dur":"4.53","text":"Features like this meant Multics was really\ncomplicated for its time, using around 1 Megabit"},"550.27":{"start":"550.27","dur":"1.999","text":"of memory, which was a lot back then!"},"552.27":{"start":"552.269","dur":"3.571","text":"That might be half of a computer&#39;s memory,\njust to run the OS!"},"555.84":{"start":"555.84","dur":"3.09","text":"Dennis Ritchie, one of the researchers working\non Multics, once said:"},"558.93":{"start":"558.93","dur":"4.27","text":"\u201cOne of the obvious things that went wrong\nwith Multics as a commercial success was just"},"563.20":{"start":"563.2","dur":"2.009","text":"that it was sort of over-engineered in a sense."},"565.21":{"start":"565.209","dur":"1.581","text":"There was just too much in it.\u201d"},"566.79":{"start":"566.79","dur":"2.13","text":"T\nhis lead Dennis, and another Multics researcher,"},"568.92":{"start":"568.92","dur":"4.72","text":"Ken Thompson, to strike out on their own and build a new, lean operating system\u2026 called Unix."},"573.64":{"start":"573.64","dur":"2.6","text":"They wanted to separate the OS into two parts:"},"576.24":{"start":"576.24","dur":"4.28","text":"First was the core functionality of the OS,\nthings like memory management, multitasking,"},"580.52":{"start":"580.52","dur":"2.81","text":"and dealing with I\/O, which is called the\nkernel."},"583.33":{"start":"583.33","dur":"3.93","text":"The second part was a wide array of useful\ntools that came bundled with, but not part"},"587.26":{"start":"587.26","dur":"2.52","text":"of the kernel, things like programs and libraries."},"589.78":{"start":"589.78","dur":"3.68","text":"Building a compact, lean kernel meant intentionally\nleaving some functionality out."},"593.47":{"start":"593.47","dur":"2.37","text":"Tom Van Vleck, another Multics developer,\nrecalled:"},"595.84":{"start":"595.84","dur":"4.7","text":"\u201cI remarked to Dennis that easily half the\ncode I was writing in Multics was error recovery"},"600.54":{"start":"600.54","dur":"0.74","text":"code.&quot;"},"601.28":{"start":"601.28","dur":"2.46","text":"He said, &quot;We left all that stuff out of Unix."},"603.74":{"start":"603.74","dur":"4.13","text":"If there&#39;s an error, we have this routine\ncalled panic, and when it is called, the machine"},"607.87":{"start":"607.87","dur":"3.149","text":"crashes, and you holler down the hall, &#39;Hey,\nreboot it.&#39;&quot;\u201d"},"611.02":{"start":"611.019","dur":"3.121","text":"You might have heard of kernel panics, This\nis where the term came from."},"614.14":{"start":"614.14","dur":"4.319","text":"It\u2019s literally when the kernel crashes,\nhas no recourse to recover, and so calls a"},"618.46":{"start":"618.459","dur":"1.481","text":"function called \u201cpanic\u201d."},"619.94":{"start":"619.94","dur":"3.01","text":"Originally, all it did was print the word\n\u201cpanic\u201d and then enter"},"622.95":{"start":"622.95","dur":"1.08","text":"an infinite loop."},"624.03":{"start":"624.03","dur":"4.09","text":"This simplicity meant that Unix could be run\non cheaper and more diverse hardware, making"},"628.12":{"start":"628.12","dur":"3","text":"it popular inside Bell Labs, where Dennis\nand Ken worked."},"631.12":{"start":"631.12","dur":"3.7","text":"As more developers started using Unix to build\nand run their own programs, the number of"},"634.82":{"start":"634.82","dur":"1.5","text":"contributed tools grew."},"636.32":{"start":"636.32","dur":"4.68","text":"Soon after its release in 1971, it gained\ncompilers for different programming languages"},"641.00":{"start":"641","dur":"4.51","text":"and even a word processor, quickly making\nit one of the most popular OSes of the 1970s"},"645.51":{"start":"645.51","dur":"1.019","text":"and 80s."},"646.53":{"start":"646.529","dur":"4.151","text":"At the same time, by the early 1980s, the\ncost of a basic computer had fallen to the"},"650.68":{"start":"650.68","dur":"4.339","text":"point where individual people could afford\none, called a personal or home computer."},"655.02":{"start":"655.019","dur":"4.461","text":"These were much simpler than the big mainframes\nfound at universities, corporations, and governments."},"659.48":{"start":"659.48","dur":"2.76","text":"So, their operating systems had to be equally\nsimple."},"662.24":{"start":"662.24","dur":"5.529","text":"For example, Microsoft\u2019s Disk Operating\nSystem, or MS-DOS, was just 160 kilobytes,"},"667.77":{"start":"667.769","dur":"2.82","text":"allowing it to fit, as the name suggests,\nonto a single disk."},"670.59":{"start":"670.589","dur":"4.582","text":"First released in 1981, it became the most\npopular OS for early home computers, even"},"675.17":{"start":"675.171","dur":"3.479","text":"though it lacked multitasking and protected\nmemory."},"678.65":{"start":"678.65","dur":"3.59","text":"This meant that programs could, and would,\nregularly crash the system."},"682.24":{"start":"682.24","dur":"4.159","text":"While annoying, it was an acceptable tradeoff,\nas users could just turn their own computers"},"686.40":{"start":"686.4","dur":"0.72","text":"off and on again!"},"687.12":{"start":"687.12","dur":"4.94","text":"Even early versions of Windows, first released\nby Microsoft in 1985 and which dominated the"},"692.06":{"start":"692.06","dur":"3.58","text":"OS scene throughout the 1990s, lacked strong\nmemory protection."},"695.64":{"start":"695.64","dur":"4.439","text":"When programs misbehaved, you could get the\nblue screen of death, a sign that a program"},"700.08":{"start":"700.08","dur":"3.509","text":"had crashed so badly that it took down the\nwhole operating system."},"703.59":{"start":"703.589","dur":"4.731","text":"Luckily, newer versions of Windows have better protections and usually don&#39;t crash that often."},"708.32":{"start":"708.32","dur":"4.78","text":"Today, computers run modern operating systems,\nlike Mac OS X, Windows 10, Linux, iOS and"},"713.10":{"start":"713.1","dur":"1.2","text":"Android."},"714.30":{"start":"714.3","dur":"4.44","text":"Even though the computers we own are most\noften used by just a single person, you! their"},"718.74":{"start":"718.74","dur":"3.48","text":"OSes all have multitasking and virtual and\nprotected memory."},"722.22":{"start":"722.22","dur":"4.049","text":"So, they can run many programs at once: you\ncan watch YouTube in your web browser, edit"},"726.27":{"start":"726.269","dur":"5.99","text":"a photo in Photoshop, play music in Spotify\nand sync Dropbox all at the same time."},"732.26":{"start":"732.259","dur":"3.83","text":"This wouldn\u2019t be possible without those\ndecades of research and development on Operating"},"736.09":{"start":"736.089","dur":"3.501","text":"Systems, and of course the proper memory to\nstore those programs."},"739.59":{"start":"739.59","dur":"1.61","text":"Which we\u2019ll get to next week."},"741.20":{"start":"741.2","dur":"2.88","text":"I\u2019d like to thank Hover for sponsoring this\nepisode."},"744.08":{"start":"744.08","dur":"3.08","text":"Hover is a service that helps you buy and\nmanage domain names."},"747.16":{"start":"747.16","dur":"4.98","text":"Hover has over 400 domain extensions to end\nyour domain with - including .com and .net."},"752.15":{"start":"752.149","dur":"3.651","text":"You can also get unique domains that are more\nprofessional than a generic address."},"755.80":{"start":"755.8","dur":"4.39","text":"Here at Crash Course, we&#39;d get the domain\nname \u201cmongols.fans\u201d but I think you know"},"760.19":{"start":"760.19","dur":"0.81","text":"that already."},"761.00":{"start":"761","dur":"3.76","text":"Once you have your domain, you can set up\nyour custom email to forward to your existing"},"764.78":{"start":"764.78","dur":"3.9","text":"email address -- including Outlook or Gmail\nor whatever you already use."},"768.68":{"start":"768.68","dur":"4.089","text":"With Hover, you can get a custom domain and\nemail address for 10% off."},"772.80":{"start":"772.8","dur":"5.18","text":"Go to Hover.com\/crashcourse today to create\nyour custom domain and help support our show!"}}