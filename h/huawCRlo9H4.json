{"2":{"dur":4,"text":">>Lars Bak: Good morning, and welcome to the\nsecond day of Google I\/O. I hope you all enjoyed"},"6":{"dur":3,"text":"the party yesterday with Billy Idol.\n[ Laughter ]"},"10":{"dur":3,"text":">>Lars Bak: Yeah. From my youth.\n[ Laughter ]"},"14":{"dur":7,"text":">>Lars Bak: So we want to talk about web programming\nlanguages and virtual machines and we're trying"},"22":{"dur":6,"text":"to argue why it's important to always make\nit faster so that you guys can make better"},"29":{"dur":3,"text":"applications.\nI'm Lars Bak. I'm the blue guy. And this is"},"33":{"dur":2,"text":"Kasper Lund --\n>>Kasper Lund: I'm the red guy."},"35":{"dur":0,"text":">>Lars Bak: -- the red guy.\n[ Laughter ]"},"36":{"dur":7,"text":">>Lars Bak: And we are from Google, from the\nDanish engineering office, so if we look tired,"},"44":{"dur":6,"text":"it's jet lag.\nAll right. So just to know -- so you know"},"51":{"dur":7,"text":"who we are, we've been working on virtual\nmachines for too long. I started in '86, and"},"58":{"dur":4,"text":"in '86 working on virtual machines for their\nprogramming languages was sort of a little"},"62":{"dur":5,"text":"bit niche, and it was only research communities\nthat had an interest in it."},"67":{"dur":5,"text":"But given today we have several hundred people\nhere, I'm pleased that there's more interest"},"72":{"dur":4,"text":"for it.\nSo I started working with Kasper 13 years"},"76":{"dur":7,"text":"ago and we've been doing Java virtual machines,\nSmalltalk virtual machines, JavaScript virtual"},"84":{"dur":4,"text":"machines, and now Dart, so we sort of have\na little bit of experience in doing compilers"},"89":{"dur":6,"text":"and garbage collectors, so hopefully we can\ntell you about some of our findings over the"},"95":{"dur":6,"text":"last many years.\nSo why are we here? We're here because we"},"102":{"dur":5,"text":"truly believe that speed in web browsers fuel\ninnovations for application developers, right?"},"108":{"dur":5,"text":"The more speed we can give you, the more interesting\napplications you can do. And we strongly believe"},"113":{"dur":5,"text":"in the fly-by web, right? Developers do one\napplication -- it runs on mobile phones and"},"118":{"dur":6,"text":"desktop systems -- and this is just fantastic.\nAnd the source that makes it work is the virtual"},"125":{"dur":4,"text":"machine inside the browser.\nAnd if we can make it faster, you can take"},"129":{"dur":4,"text":"advantage of it.\nThe question is, we have seen a lot of speedup"},"134":{"dur":6,"text":"in browsers over the last, I guess, five years.\nIs it fast enough or do we want more speed?"},"140":{"dur":5,"text":"So we are of the opinion that we need to do\neven better, and that is one of the reasons"},"146":{"dur":5,"text":"why we have started on this new venture to\ndo a Dart platform."},"151":{"dur":7,"text":">>Kasper Lund: So before we dive into the\ntechnical details of virtual machines and"},"158":{"dur":6,"text":"programming for the web, I just wanted to\ntake you back to 2006 when we started developing"},"164":{"dur":6,"text":"V8. At that point, Web pages had evolved from\nbeing fairly static to being a little bit"},"171":{"dur":5,"text":"more rich, and we were seeing sort of the\nfirst Web applications appear. At the point"},"176":{"dur":5,"text":"in time, you were probably running Firefox\n2.0, Internet Explorer 7.0, or some other"},"182":{"dur":5,"text":"browsers there, but it was very clear that\nthese browsers were not really designed for"},"188":{"dur":4,"text":"long-running, heavy Web applications. They\nwere designed for the web of two thousand-"},"192":{"dur":4,"text":"-- well, probably 2000, yeah.\nAnd so it was an interesting at that point"},"196":{"dur":5,"text":"in time, 2006, it was just before we were\nseeing these applications really come to life"},"201":{"dur":5,"text":"on the web. And even if you -- if you look\nat the Web sites I've depicted up here, you"},"206":{"dur":4,"text":"can tell the difference, if you can actually\nsee it from the back of the room, that in"},"210":{"dur":3,"text":"2008, already then we were seeing pages like\nBBC becoming a little bit more interactive"},"214":{"dur":5,"text":"and more rich.\nSo in 2006 when we set out to implement a"},"220":{"dur":4,"text":"new virtual machine for JavaScript for the\nweb, people believed that browsers were essentially"},"224":{"dur":4,"text":"fast enough. Web applications like Gmail and\nGoogle Maps ran fine and people were very"},"228":{"dur":5,"text":"impressed with them. People also believed\nthat JavaScript was just inherently too slow"},"234":{"dur":6,"text":"for writing heavy client-side computations.\nAnd even so, people didn't really expect the"},"240":{"dur":4,"text":"JavaScript to improve that much so they didn't\nthink that the execution of JavaScript was"},"244":{"dur":5,"text":"holding things back. They were okay with having\nmore code running on the server side and having"},"249":{"dur":5,"text":"fairly limited amounts of logic on the client\nside."},"255":{"dur":4,"text":"Another key thing for us when we started was\nthat performance at that point was evaluated"},"259":{"dur":4,"text":"using very simple micro-benchmarks, where\nall the emphasis was put on simple loops with"},"264":{"dur":6,"text":"very simple arithmetic and nobody paid any\nattention to the overhead for calling methods"},"270":{"dur":4,"text":"or how large applications would perform when\nit comes to memory management."},"275":{"dur":4,"text":"So people were really spending all their time\nlooking at small, simple loops and trying"},"280":{"dur":4,"text":"to make them run a little bit faster.\nSo here's an example of a benchmark that I"},"284":{"dur":2,"text":"think represents that line of thought pretty\nwell."},"287":{"dur":4,"text":"This is a benchmark, a JavaScript benchmark,\nfrom the SunSpider benchmark collection. It's"},"291":{"dur":5,"text":"known as \"bit-wise and\" and that's all it\ndoes. It computes the bit-wise and for a series"},"297":{"dur":4,"text":"of values here, starting out with a fairly\nlarge number and then it runs through a loop"},"301":{"dur":6,"text":"and you'll probably notice that even on the\niteration, I is zero so when you \"and\" that"},"308":{"dur":6,"text":"with anything, you'll get zero out. So this\nis just a fancy way of computing zero."},"314":{"dur":3,"text":"Not exactly something you want to spend a\nlot of time on optimizing for, I guess, and"},"317":{"dur":3,"text":"certainly not something that would, if you\nactually did optimize this, it would turn"},"321":{"dur":5,"text":"your application any faster.\nSo SunSpider is a benchmark that sort of represents"},"326":{"dur":5,"text":"some of the things and some of the problems\nfrom sort of the earlier web, and they -- it"},"332":{"dur":3,"text":"is being updated every now and then but not\nwith any significant differences. This is"},"336":{"dur":5,"text":"from SunSpider 1.0 released a couple of weeks\nago. It's very nice to see that they've added"},"341":{"dur":4,"text":"testing that actually does compute zero but\nit's still a really bad benchmark. Making"},"346":{"dur":4,"text":"this faster and tuning V8 for these kind of\nthings would not make your applications run"},"350":{"dur":5,"text":"any faster, so...\nSo when we started designing V8, we had to"},"355":{"dur":3,"text":"make a choice. Like what do we want to optimize\nfor?"},"358":{"dur":4,"text":"And there are basically two approaches.\nYou can optimize for the current apps and"},"362":{"dur":4,"text":"the current benchmarks, and that's a nice\nand simple incremental approach, and there's"},"367":{"dur":5,"text":"a good chance you can make things 10%, maybe\n20% faster that way. And we chose to optimize"},"373":{"dur":4,"text":"for the apps of the future at that point so\nwe decided that we wanted to support much"},"378":{"dur":3,"text":"heavier side client-side computations and\nwe wanted to turn the browser into a scalable"},"381":{"dur":5,"text":"application platform, sort of thus enabling\na new class of Webapps that could be written."},"387":{"dur":5,"text":"So optimizing a brand-new virtual machine\nfor some applications that you cannot write"},"393":{"dur":6,"text":"-- or you couldn't write in 2006 -- required\nus to come up with some benchmarks and some"},"399":{"dur":3,"text":"metrics that would allow us to make progress\non that problem."},"402":{"dur":4,"text":"Which is where the V8 benchmark suite entered\nthe game."},"407":{"dur":4,"text":"So the V8 benchmark suite is a collection\nof benchmarks that are structured and mostly"},"411":{"dur":7,"text":"object-oriented, and they're designed to push\nthe limits of browsers in 2006 but also today,"},"418":{"dur":4,"text":"and it's benchmarks that are mostly proven\nvaluable in the context of lots of other languages."},"423":{"dur":4,"text":"So it's benchmarks that we know that if we\noptimize for those, it will actually make"},"427":{"dur":3,"text":"it possible for you guys to write much larger\nand much more interesting applications."},"431":{"dur":5,"text":"It measures the performance of dynamic message\ncalls and property access and it also measures"},"437":{"dur":3,"text":"the performance of the memory management system,\nand closure creation and location, to a much"},"441":{"dur":2,"text":"higher degree than any of the existing benchmarks\nin 2006."},"443":{"dur":5,"text":">>Lars Bak: But Kasper, can I get the mic?\nThank you. Let's try to run it so we can see"},"449":{"dur":4,"text":"how it looks.\nSo here, let's search for the V8 benchmark"},"453":{"dur":5,"text":"suite and we can run Version 7 of it, and\nit will start running and you'll see the results"},"459":{"dur":4,"text":"trickling in on the right-hand side and you\ncan see the collection of benchmarks we are"},"463":{"dur":3,"text":"running. It's eight different benchmarks.\nThey're not big, but they are certainly not"},"467":{"dur":5,"text":"micro-benchmarks.\nAnd we should soon have the results."},"473":{"dur":7,"text":"The interesting part is that the score you\nsee is computed as the geometric mean between"},"481":{"dur":7,"text":"individual scores but it's calibrated for\nFirefox 2 on a high-end desktop machine in"},"489":{"dur":7,"text":"2008.\nSo we are pretty much running 160 times faster"},"497":{"dur":3,"text":"than one of the browsers in 2008, so this\nis pretty amazing."},"500":{"dur":5,"text":">>Kasper Lund: Yeah. The score was 100 on\nFirefox 2 on my beefy desktop machine in 2008."},"505":{"dur":5,"text":"It's a little bit better now. Which is nice.\n[ Laughter ]"},"511":{"dur":7,"text":">>Kasper Lund: So I think it's fair to conclude\nthat the performance improvements for JavaScript"},"519":{"dur":4,"text":"over the last eight years have been pretty\nimpressive. JavaScript itself executes a hundred"},"523":{"dur":5,"text":"times faster than it did before, at least,\nand we see people being able to write applications"},"528":{"dur":5,"text":"that use way bigger object heaps, and the\nGC pauses are even lower than they were at"},"534":{"dur":3,"text":"that point.\nAnother key thing for us as compilers and"},"538":{"dur":4,"text":"VM engineers is that people pay attention\nnow to performance of their Webapps and it's"},"542":{"dur":5,"text":"very, very common to see benchmark numbers\nreported in the press, so it's a -- there's"},"547":{"dur":5,"text":"a nice friendly competition going on to improve\nthe web platform performance."},"552":{"dur":3,"text":"Another thing that's very nice to see is that\nit's possible to write really large Webapps"},"556":{"dur":6,"text":"these days. We see common pages like Amazon,\nCNN, and ESPN have -- they're serving fairly"},"562":{"dur":5,"text":"large amounts of JavaScript codes to their\ncustomers all day, so it's not uncommon to"},"568":{"dur":6,"text":"see like a megabyte of JavaScript code, minified\nJavaScript code, being sent to clients. And"},"574":{"dur":4,"text":"the browsers are generally capable of working\nwith that. So things have certainly changed"},"578":{"dur":5,"text":"since 2006.\nOne thing that is important for us is to pay"},"584":{"dur":4,"text":"attention to where the time is actually spent\nin your browser, and what you have here is"},"589":{"dur":7,"text":"a couple of diagrams that show that we're\nspending around 60% of the time in JavaScript"},"597":{"dur":4,"text":"execution when you're running things like\nGmail, Google Docs, Google Search, and things"},"601":{"dur":5,"text":"like that, and the rest is spent in the general\nbrowser infrastructure."},"606":{"dur":3,"text":"On other sites like Twitter and Facebook,\nthe percentage in JavaScript is a little bit"},"609":{"dur":5,"text":"lower than that. And these measurements are\nall done by the Chrome team using Chrome,"},"615":{"dur":4,"text":"so we don't have the exact same numbers for\nthe other browsers. But it shows that no matter"},"620":{"dur":5,"text":"how fast we make the engines, the application\ndevelopers will adapt to that and add new"},"625":{"dur":4,"text":"functionality and essentially make their applications\nbetter by using this thing."},"630":{"dur":5,"text":"So imagine how it would feel like running\nmodern Gmail on a browser from 2006. I don't"},"636":{"dur":6,"text":"think you would like that at all.\nSo today, web developers are really pushing"},"642":{"dur":4,"text":"the limits of the platform and they really\nwant and demand predictable high performance."},"646":{"dur":3,"text":"Higher and higher, actually.\nThey want consistent frame rates for their"},"649":{"dur":4,"text":"games. And they really want to support large-scale\napplication development."},"654":{"dur":4,"text":"So people's expectations for this platform\nhave really changed. They really demand these"},"658":{"dur":4,"text":"things now, and all it took is 100X performance\nimprovement. It makes a really, really big"},"662":{"dur":3,"text":"change to the technology stack when you do\nthese things."},"666":{"dur":6,"text":"So the question is, of course, are the web\ndevelopers getting predictable and high performance,"},"672":{"dur":3,"text":"and can they actually support really large-scale\napplication development on the current web"},"676":{"dur":2,"text":"stack?\nSo before we answer that question, I think"},"678":{"dur":3,"text":"we should dive into the -- the current web\nstack and take a look at how we can improve"},"682":{"dur":6,"text":"the parts.\n>>Lars Bak: All right. Now we'll dive into"},"689":{"dur":3,"text":"what actually happens inside the virtual machine\nand the browser."},"692":{"dur":4,"text":"So I'll be talking about a few different techniques\nwe've been using to make V8 fast and I'll"},"697":{"dur":7,"text":"talk about the history behind these technologies.\nFirstly, let's look at a browser. So a browser"},"705":{"dur":6,"text":"has several parts. But if we look at the performance-critical\npart for a Webapp, it actually consists of"},"712":{"dur":3,"text":"two segments.\nAt the lower part, we have the JavaScript"},"716":{"dur":6,"text":"engine where you have all the code and the\nobjects and the WebObjects that point to the"},"722":{"dur":6,"text":"DOM. The DOM consists of the -- the nodes\nthat you can see on the screen. And when you"},"728":{"dur":6,"text":"execute your Web application, you manipulate\nthe DOM by executing JavaScript."},"735":{"dur":6,"text":"We all hope that when you develop a Web application,\nyou have low latency so it comes up fast and"},"741":{"dur":6,"text":"there's no pauses, it has high performance,\nand it also has low memory usage so you don't"},"747":{"dur":4,"text":"end up swapping when you run your application.\nAnd then, of course, more pauses if you do"},"752":{"dur":4,"text":"animation. But there are still big fears when\nyou run a Web application, right?"},"757":{"dur":6,"text":"If the object heap is too big, you can get\nvery large GC pauses, and you can have memory"},"763":{"dur":6,"text":"leaks. So having a Web application that runs\nfor weeks and suddenly it runs out of memory"},"769":{"dur":4,"text":"is not very pleasant for the user.\nAnd sometimes you'll get erratic performance"},"773":{"dur":5,"text":"behavior for no good reasons.\nAnd this is sort of some of the issues people"},"779":{"dur":7,"text":"are concerned about when writing for the web.\nHere is my picture of how a virtual machine"},"788":{"dur":3,"text":"or a JavaScript engine looked like in the\nyear 2006."},"791":{"dur":6,"text":"It had a simple parser that would take the\nsource code and convert into an abstract syntax"},"797":{"dur":4,"text":"tree or into byte codes and then it would\nhave a simplistic interpreter that would run"},"802":{"dur":6,"text":"over the AST, abstract syntax tree, or the\nbyte codes and execute the program."},"809":{"dur":4,"text":"And then it would have a simple memory management\nsystem to clean out unused memory."},"813":{"dur":5,"text":"Now, in 2006 you would not create many objects\nbecause you knew that if you created a lot"},"819":{"dur":4,"text":"of objects, your program would be slow, so\nyou actually didn't use many of the object-oriented"},"824":{"dur":5,"text":"qualities of the system.\nSo the conclusion is, it was very simple and"},"829":{"dur":4,"text":"that's nice that you can write this kind of\nVM in a few thousand lines, but the downside"},"833":{"dur":5,"text":"was it was really slow.\nToday, we have a sports car and I can guarantee"},"839":{"dur":6,"text":"you we have put in all kinds of fancy turbo\nengines in it to make it fast, right? We still"},"846":{"dur":6,"text":"have a parser, but instead of an interpreter,\nwe have a multi-tier adaptive compilation"},"852":{"dur":6,"text":"system. It's basically a -- it's a series\nof compilers that learns from the behavior"},"858":{"dur":5,"text":"of the program and tries to optimize the execution\nbased on behavior."},"864":{"dur":5,"text":"We have a de-optimization system that allows\nthe system to back out of optimization if"},"870":{"dur":5,"text":"the behavior of the program changes over time.\nAnd then we have a system that handles large"},"876":{"dur":6,"text":"object heaps. And in the V8 case, we have\na generation-based garbage collector that"},"882":{"dur":4,"text":"allows us to have heaps up to a gigabyte,\nat least, where you can still have reasonable"},"887":{"dur":7,"text":"pauses when running your program.\nNative code is generated on the fly and is"},"894":{"dur":5,"text":"generated by the buckets, I guarantee you,\nand what will happen when it's not used anymore,"},"900":{"dur":5,"text":"it will be removed by the garbage collector.\nSo even return addresses on the execution"},"905":{"dur":5,"text":"stack will function like pointers into the\ncode, and if they are not used anymore, the"},"911":{"dur":4,"text":"code will be eliminated.\nAnd then of course there's all this tool sport"},"916":{"dur":3,"text":"with debugging and profiling.\nBecause when you do optimizations -- right?"},"919":{"dur":5,"text":"-- you sort of lose the understanding of what\nthe source code is doing, so you cannot single-step"},"925":{"dur":2,"text":"an optimized code. It will give no meaning\nto you."},"928":{"dur":5,"text":"So what we try to do is we try to de-optimize\nthe code. If we try to single-step, it will"},"933":{"dur":5,"text":"look like you do single-stepping in the normal\nsource code. And that's great for a programmer,"},"939":{"dur":4,"text":"because then you can debug on an odd-based\nsystem or an intra-based system and get exactly"},"943":{"dur":6,"text":"the same behavior.\nIt's really complex, but the good thing is,"},"950":{"dur":5,"text":"it's fast.\nLet's go beyond the hood and see what's going"},"955":{"dur":3,"text":"on inside the V8 engine when it comes to a\nfew things."},"958":{"dur":5,"text":"I'll briefly mention how we make the code\nreally fast, and this is this multi-tier adaptive"},"964":{"dur":4,"text":"compilation system.\nI'll talk about how we handle large object"},"969":{"dur":5,"text":"heaps by doing this generation-based garbage\ncollection with a twist."},"974":{"dur":7,"text":"And then I'll talk about how we bind JavaScript\nobjects to the DOM nodes."},"982":{"dur":6,"text":"And this is -- this is tricky, so I'm calling\nit the tangoing between the tracing GC and"},"988":{"dur":7,"text":"reference counting.\nSo listen up. This might be a little bit tricky"},"996":{"dur":5,"text":"here.\nWhen you parse the code, the code is blue."},"1001":{"dur":5,"text":"You have a sea of JavaScript methods. Nothing\nhas been executed yet. When you start executing,"},"1007":{"dur":5,"text":"the first simplistic compiler will take the\nsource code and convert into native code,"},"1012":{"dur":2,"text":"right?\nIt doesn't know much about the behavior of"},"1015":{"dur":6,"text":"the program, so what it's doing is putting\nin inline cache stops that tracks the behavior"},"1021":{"dur":4,"text":"of the program. So in essence, what it's doing\nat one call site in the program, it tries"},"1026":{"dur":5,"text":"to figure out exactly what kind of type of\nobjects comes by."},"1031":{"dur":5,"text":"At the same time, we have this monitoring\nsystem in the system that detects when a method"},"1036":{"dur":5,"text":"is used frequently. If it's used frequently,\nwe said, \"Well, let's try to optimize it even"},"1041":{"dur":5,"text":"further.\" And the optimizing native compiler,\nwhat it will do, it will take the collected"},"1047":{"dur":6,"text":"type information from the inline caches and\nuse that to do aggressive inlining."},"1054":{"dur":4,"text":"So it basically assumes that the behavior\nof the program you had before you optimized"},"1058":{"dur":6,"text":"will be the same in all future. It's not always\nthe case, but we're optimistic here."},"1065":{"dur":5,"text":"So we do these aggressive inlining decisions,\nbut we put in the optimization hook so that"},"1070":{"dur":5,"text":"if our assumptions are wrong in the optimized\ncode, we can go back again to the naive, simple"},"1076":{"dur":3,"text":"code.\nIn most cases, we don't have to do that and"},"1079":{"dur":5,"text":"you'll get the predictable performance, which\nis great."},"1085":{"dur":7,"text":"It gets even harder -- right? -- because as\nyou all know, there's no types in JavaScript,"},"1092":{"dur":5,"text":"and that means we have to do funky stuff.\nOne funky thing we are doing is that if you"},"1097":{"dur":6,"text":"use an array and you put doubles in it, at\nsome point at runtime we decide to optimize"},"1104":{"dur":6,"text":"it by converting the representation of an\nobject from an array that can have any kind"},"1110":{"dur":5,"text":"of objects to a representation that can only\nhave double values. Right?"},"1116":{"dur":4,"text":"So we assume that moving forward, we will\nonly operate on double values in this array."},"1120":{"dur":4,"text":"That will certainly speed up programs that\ncontinue to have that behavior, but you still"},"1124":{"dur":4,"text":"need the hooks if something from the side\nwould put in an integer. Or not an integer."},"1129":{"dur":6,"text":"Let's say a -- a string in that array.\nThen we have to back out of that optimization"},"1135":{"dur":4,"text":"and go back to the standard representation\nof an object array. Very complicated."},"1140":{"dur":7,"text":"But anyways, you have a system that's always\nchanging when you run it."},"1149":{"dur":5,"text":"Did we invent this multi-tier adaptive compilation?\nNo, we are not that smart. There is actually"},"1154":{"dur":7,"text":"a long history of implementing dynamic languages,\nstarted with interpretation in the '50s with"},"1164":{"dur":5,"text":"Lisp. In the '70s, we have dynamic compilation\nbeing added to Smalltalk. And they even had"},"1169":{"dur":5,"text":"inline caching. It was not at the call side,\nbut they put it at the callee. So instead"},"1174":{"dur":3,"text":"of having it -- the method calling it, it\nwas actually at the prologue of the method"},"1178":{"dur":4,"text":"you called.\nAnd then the adaptive compilation was invented"},"1183":{"dur":5,"text":"in the '90s in the sales project where you\nhave mixed mode execution, runtime-type feedback"},"1188":{"dur":4,"text":"and all this kind of stuff.\nAnd then they also came up with deoptimization."},"1193":{"dur":4,"text":"So let me try to explain what deoptimization\nis. It is actually very simple."},"1198":{"dur":5,"text":"When you have the optimized code and you have\nactivations on the stack that's executing"},"1203":{"dur":5,"text":"and you figure out that something is wrong,\nyou need to revert. What you do is you take"},"1208":{"dur":7,"text":"that optimized activation and convert it into\na series of unoptimized activity on the stack,"},"1217":{"dur":6,"text":"flush the optimized code, and start using\nthe simple code again."},"1224":{"dur":4,"text":"This first appeared commercially in the HotSpot\nJVM. I assume you all know about what that"},"1229":{"dur":5,"text":"is.\nThe other thing we did in V8 to basically"},"1234":{"dur":6,"text":"use all this technology was introducing behind-the-scenes\nclasses. You know that JavaScript is prototype-based,"},"1241":{"dur":5,"text":"but we faked them behind the scenes in event\nclasses. Then you can apply all this technology"},"1246":{"dur":7,"text":"on the slide, and that made it fast.\nThe garbage collector in V8 is here. It might"},"1257":{"dur":5,"text":"look complicated. We basically have two generations.\nAnd the way it works is, as you are allocating"},"1263":{"dur":6,"text":"optics in your program, we will fill up the\nallocation space. It is called \"from\" here."},"1270":{"dur":5,"text":"When it is full, we will start a garbage collection\nprocess. And we have a tracing garbage collector."},"1276":{"dur":4,"text":"That means that we have well-defined routes,\nand we start following these routes through"},"1280":{"dur":7,"text":"the optics, through its references until we\nhave computed the complete live optigraph."},"1288":{"dur":5,"text":"And memory that's not occupied by the live\noptigraph is garbage, and it can be reclaimed"},"1293":{"dur":4,"text":"and used for further objects.\nLet's see what happens when you do a use-space"},"1298":{"dur":7,"text":"collection in V8. We migrate the optics to\nthe \"to\" space. And you can see it is smaller,"},"1307":{"dur":4,"text":"and that is because most optics die young.\nAnd this is great."},"1311":{"dur":7,"text":"Then we can start allocating and filling up\nthe \"to\" space and repeat the same story."},"1319":{"dur":7,"text":"The garbage collector in V8 is a precise garbage\ncollector. It stops the world and processes"},"1326":{"dur":6,"text":"the garbage and then continues on.\nYou can see you have red pointers in the graph."},"1333":{"dur":5,"text":"It denotes that the system has a stop buffer\nthat tracks pointers from old generation to"},"1338":{"dur":5,"text":"the new generation. And you need that if you\nwant to do fast use-space garbage collection."},"1344":{"dur":5,"text":"You don't have to scan the whole heap in order\nto do a small garbage collection."},"1349":{"dur":7,"text":"The old space in V8 has been segmented into\nnormal optics. That's the optics that's promoted"},"1358":{"dur":6,"text":"from use-space when they have survived for\na while, and then native code where you have"},"1364":{"dur":6,"text":"native instructions, and then a segment where\nyou have atomic data. Atomic data is data"},"1370":{"dur":6,"text":"that does not have pointers out again. So\nit could be typed arrays or double optics,"},"1376":{"dur":3,"text":"something like that. That is easier to handle\nin a separate space because they don't have"},"1380":{"dur":6,"text":"pointers out.\nAnyways, we didn't invent that either. Sorry."},"1386":{"dur":7,"text":"There's a long history of automatic memory\nmanagement done in Lisp in the '50s. Incremental"},"1394":{"dur":5,"text":"garbage collection done in the '70s in Lisp\nas well. And then you have generational-based"},"1399":{"dur":6,"text":"garbage collection that got invented by the\none guy in the '80s and generationally scavenged"},"1406":{"dur":5,"text":"any use of Smalltalk.\nSo all these techniques for doing garbage"},"1411":{"dur":4,"text":"collection is fairly simple in my mind because\nyou have all the pointers to the optics and"},"1415":{"dur":4,"text":"you can just process them.\nThe hard part is actually dancing with the"},"1420":{"dur":7,"text":"DOM. And I will try to tell you how that works.\nSo nodes in DOM is going by what we call reference"},"1429":{"dur":5,"text":"counting. Reference counting is a simplistic\ngarbage collection technology that keeps a"},"1435":{"dur":7,"text":"pointer in each optic that tells how many\npointers point to it. When that pointer goes"},"1442":{"dur":5,"text":"to zero, you can de-allocate the optic.\nThe problem is you don't know who points to"},"1448":{"dur":5,"text":"it. You just know how many. That means that\nif you want to move the optic memory, you"},"1454":{"dur":3,"text":"cannot do that because you cannot find how\nto point to it."},"1457":{"dur":6,"text":"And another deficiency of that mechanism is\nalso if you have a cycle, which can happen,"},"1464":{"dur":7,"text":"then it's a memory leak because you will never\nget down to zero in the reference count."},"1472":{"dur":5,"text":"And the problem is JavaScript V8 has optics\nthat are traced and we have to get all this"},"1477":{"dur":7,"text":"to work.\nSo, here we go. Bear with me. This is complicated."},"1484":{"dur":5,"text":"On the top you see the DOM. You have two nodes.\nThe first node has a reference count of 1."},"1490":{"dur":7,"text":"The second one has a count of 2. And you have\nwrapper optics that point to these DOM nodes"},"1497":{"dur":7,"text":"from beneath, and that is the V8 heap.\nNow, in order to make sure you can collect"},"1506":{"dur":4,"text":"these optics, you have to make tricks. And\nyou can see you have this pairing between"},"1510":{"dur":6,"text":"JavaScript optics and DOM nodes by using repointers.\nSo, in essence, you have a JavaScript wrapper"},"1517":{"dur":5,"text":"that points to a DOM node that in turn points\nto a persistent handle -- that's the black"},"1522":{"dur":5,"text":"ones -- that, in turn, will use a repointer\npointing back. So it is sort of a semicycle,"},"1528":{"dur":7,"text":"and you break the cycle by using repointers.\nSo that is simple."},"1535":{"dur":5,"text":"But it gets even more complicated. When V8\nis running out of memory and has to perform"},"1541":{"dur":5,"text":"a garbage collection, it has to call the DOM\nand ask the DOM to group all objects that"},"1547":{"dur":6,"text":"belong together because that's needed in order\nto only collect -- you basically have to collect"},"1553":{"dur":7,"text":"all grouped optics at the same time. That's\nneeded to avoid resurrection of wrapper optics."},"1562":{"dur":5,"text":"That might seem complicated, but it is needed\nbecause if you add a property to one of the"},"1567":{"dur":5,"text":"JavaScript nodes at the bottom and it suddenly\ndisappears and reappears again, the property"},"1573":{"dur":6,"text":"is gone and the application will get a little\nbit confused. So we need to do all this in"},"1579":{"dur":7,"text":"order to make sure garbage collection works.\nDid we invent this? Actually, that's the only"},"1587":{"dur":7,"text":"thing we did. It works. Chrome is great. But\nthat part we are not proud of. It needs a"},"1598":{"dur":6,"text":"lot more work in order to make sure that we\ncan guarantee that all memory is collected"},"1604":{"dur":3,"text":"the right way. But we will get back to this\nlater in this talk, what we are doing about"},"1608":{"dur":7,"text":"it.\nDoes this mean that V8 is as good as it gets?"},"1617":{"dur":4,"text":"Right? We have taken all these techniques\nfrom the past, advanced codebase techniques"},"1622":{"dur":4,"text":"with hidden classes and sophisticated memory\nmanagement."},"1627":{"dur":7,"text":"Is this what we have, or do we want more performance?\nWell, from the feedback we're getting, there's"},"1634":{"dur":7,"text":"still a lot of bottlenecks in the browser.\nPerformance is not still at par with real"},"1643":{"dur":4,"text":"languages. You can define what \"real\" is your\nown way. But I would sort of at least say"},"1647":{"dur":7,"text":"Java and C# as contenders.\nPerformance is still unpredictable. And you"},"1657":{"dur":4,"text":"can see if you do animation in the browser,\nsometimes you skip frames. And part of it"},"1661":{"dur":5,"text":"is because you do too much compilation. Part\nof it is because you do garbage collections."},"1667":{"dur":4,"text":"Part of it is because you are deoptimized\nbecause suddenly the assumption changed in"},"1671":{"dur":4,"text":"the program.\nAnd in JavaScript, that's very easy to do"},"1675":{"dur":5,"text":"because just jamming a lot of property on\na hot object, bam, performance changes."},"1681":{"dur":5,"text":"Startup is still slow. And the reason for\nthat is that you still have to read in the"},"1687":{"dur":3,"text":"source code whenever you have to start up\nthe program."},"1690":{"dur":7,"text":"And, of course, JavaScript is still JavaScript.\nThere's a lot of implicit conversions of values"},"1698":{"dur":7,"text":"when you run JavaScript. It is just complicated.\nSo having said that, the V8 project is still"},"1707":{"dur":7,"text":"doing excellent. They are still improving\nperformance quarter after quarter. But we"},"1714":{"dur":7,"text":"think that if we really want to push the performance\nto the next level, something else is needed."},"1722":{"dur":5,"text":"Let's look at performance over time when it\ncomes to V8. This is a graph that shows the"},"1727":{"dur":6,"text":"V8 benchmark score from the different versions\nof Chrome, all the way up to today."},"1734":{"dur":7,"text":"And it's gone from 3,800 all the way up to\n14,000. So it certainly has improved a lot."},"1744":{"dur":7,"text":"So this is great. But there's a downside.\nHere's the complexity over time of V8. And"},"1754":{"dur":5,"text":"we measure complexity by number of lines of\ncode in the VM."},"1759":{"dur":6,"text":"When we came out of V8, it was roughly 100,000\nlines of code. Now it's half a million lines"},"1765":{"dur":5,"text":"of code. And I don't know -- as a programmer,\nyou know that there's trouble when it gets"},"1771":{"dur":7,"text":"so big. It takes way more effort in order\nto improve performance. So we question whether"},"1779":{"dur":5,"text":"that's possible to get a factor of 2 in V8\nin the near time. You can follow the graph."},"1785":{"dur":5,"text":"Factor of 2 will take a long time, unless\nit is rewritten, of course. This also would"},"1791":{"dur":5,"text":"be a fun project.\n>>Kasper Lund: So we've gone through a lot"},"1796":{"dur":6,"text":"of Web technology stuff here and looked into\nhow V8 works and why it is as fast as it is."},"1803":{"dur":7,"text":"Let's dive into the Dart side and look at\nhow Dart improves this. So Dart is a simple"},"1812":{"dur":5,"text":"class-based unsurprising programming language.\nIt is designed to be very familiar so that"},"1818":{"dur":4,"text":"Web developers and application developers\ncan pick it up and learn to use it in no time."},"1823":{"dur":3,"text":"We've got excellent feedback from users of\nthe system that this really works. You can"},"1827":{"dur":5,"text":"sit down and code in Dart. And within a few\nhours, you feel like you are very productive"},"1832":{"dur":6,"text":"and it actually works out really well.\nTo hit that target of being very familiar,"},"1839":{"dur":5,"text":"we've designed it based on principles and\nconcepts found in other languages. So the"},"1844":{"dur":4,"text":"syntax is very much inspired by JavaScript,\nJava, C#, those kind of languages. And we"},"1849":{"dur":5,"text":"get a lot of other value from essentially\nstanding on the shoulders of other good programming"},"1854":{"dur":3,"text":"languages out there and picking the things\nthat we feel are good fits for a language"},"1858":{"dur":3,"text":"that needs to be really efficient and at the\nsame time very productive."},"1862":{"dur":4,"text":"One thing that we've added to Dart, which\nis a little bit uncommon is support for optional"},"1867":{"dur":4,"text":"static types. That means that you can write\nstatic-type notations where you want them,"},"1871":{"dur":4,"text":"where you feel like they convey the intent\nthat you want to convey. But you don't have"},"1875":{"dur":4,"text":"to put them in. The system is very flexible\nthat way. It doesn't require you, and it is"},"1879":{"dur":4,"text":"a fully dynamically typed system. It is hard\nto describe this in one slide without showing"},"1884":{"dur":5,"text":"some code. So I will use two.\nHere is a little bit of a taste of Dart. I"},"1890":{"dur":3,"text":"don't know how many of you are familiar with\nDart, tried it out. But for those of you who"},"1893":{"dur":3,"text":"are seeing it for the first time, I hope you\nwill find that this is reasonably readable."},"1897":{"dur":6,"text":"It is a very simple example. It shows that\nall Dart applications start with a main function."},"1903":{"dur":4,"text":"And in this case, I just added a little bit\nof an HTML interaction here. I am creating"},"1908":{"dur":6,"text":"a new button element, adding that to the document\nbody, and giving it a bit of text."},"1914":{"dur":4,"text":"Hopefully, you can read this code if you are\nfamiliar with JavaScript, C#, Java, those"},"1919":{"dur":3,"text":"kind of languages and it doesn't feel too\nforeign for you. That's exactly what we wanted"},"1922":{"dur":3,"text":"to try to get at.\nOne thing that might look a little bit different"},"1925":{"dur":6,"text":"here is the import, and it just shows that\nDart has support for modularity. So you can"},"1932":{"dur":5,"text":"import libraries of functionality and code\nand use that. So we do have a namespacing"},"1937":{"dur":5,"text":"mechanism and a way of carving up your application\nin multiple independent bits. So I hope this"},"1943":{"dur":6,"text":"seems reasonably easy to read for you guys.\nI think a good question to ask at this point"},"1950":{"dur":5,"text":"is: What are we trying to achieve with Dart?\nAnd we feel that there is a need for a much"},"1955":{"dur":4,"text":"more scalable development platform for Web\napps. We feel like it is too costly and too"},"1960":{"dur":4,"text":"difficult to write great Web apps. You can\nachieve amazing things on the Web today, but"},"1964":{"dur":3,"text":"you really have to invest a lot of time in\nit. Things are getting better, but we feel"},"1967":{"dur":4,"text":"like we need something like Dart to push the\nlimits of this and make it much, much easier"},"1971":{"dur":5,"text":"to write large, well-functioning applications.\nWe think there is a real need for higher performance"},"1977":{"dur":5,"text":"and much faster startup. And we certainly\nfeel like having predictable performance where"},"1982":{"dur":5,"text":"it's harder to write applications that really\nperform poorly because of somewhat weird semantics"},"1988":{"dur":5,"text":"in the core of the system that you're building\non is a must."},"1994":{"dur":4,"text":"Another thing that we consistently hear from\nusers of Dart and other systems is that having"},"1999":{"dur":4,"text":"great toolability, being able to write tools\nand use tools on your codebases for refactoring,"},"2003":{"dur":6,"text":"editing, and just maneuvering around, navigating\nyour code is a great big help. And the static"},"2010":{"dur":4,"text":"types that we have, even though they are optional,\nthey are a big help here, to just document"},"2014":{"dur":4,"text":"your intent of your code and make use of it.\nAnd, finally, I think it is very important"},"2019":{"dur":7,"text":"for us that we make it easy and nice to use\na set of consistent libraries and make it"},"2026":{"dur":4,"text":"easy for the community to create new libraries\nand share them in the same way. Certainly"},"2031":{"dur":4,"text":"an area where the Web suffered a little bit.\nWe see great things out there written for"},"2036":{"dur":3,"text":"JavaScript, but it is not necessarily trivial\nto make things fit together if you have multiple"},"2039":{"dur":3,"text":"independent pieces of JavaScript functionality\nyou want to bring together. We are trying"},"2043":{"dur":3,"text":"to make that better with Dart, so that's what\nwe are trying to achieve."},"2046":{"dur":6,"text":"Clearly, we want Dart to be useful in all\nbrowsers, all modern browsers. So we've written"},"2052":{"dur":5,"text":"a translator that translates Dart code to\nJavaScript that runs in all modern browsers."},"2058":{"dur":3,"text":"That translator itself is actually written\nin Dart, so we are trying to dogfood our own"},"2061":{"dur":4,"text":"product here. And that has been great experience\nfor us, to write a fairly significant amount"},"2066":{"dur":4,"text":"of code in Dart, translate -- in a translator\nthat translates Dart to JavaScript can actually"},"2071":{"dur":5,"text":"translate itself so you can take that big\npiece of code and translate it to JavaScript"},"2076":{"dur":5,"text":"and then you have a Dart-to-JavaScript translator\nin JavaScript. That's kind of neat. It runs"},"2082":{"dur":5,"text":"across all modern browsers. That's a big one\nhere."},"2087":{"dur":5,"text":"So the users that actually try using Dart\nare fairly happy with some of the decisions"},"2093":{"dur":7,"text":"we've made. And Thomas from an Austrian startup,\nBlossom, describes this fairly accurately"},"2100":{"dur":4,"text":"in one of his quotes here. He says that Dart\nis exactly what he needs to be productive"},"2105":{"dur":6,"text":"on the Web. So the feedback that we're getting\non the productivity gains of using something"},"2111":{"dur":2,"text":"like Dart for your Web applications is very,\nvery positive."},"2113":{"dur":6,"text":"I will let this slide stay up for two more\nseconds so you can read it."},"2119":{"dur":7,"text":">>Lars Bak: All right. Well, for me it is\ngood just to have a choice of another system,"},"2132":{"dur":5,"text":"if it fits your needs better.\nBut let's go a little bit deeper when it comes"},"2137":{"dur":7,"text":"to performance. I'd like to talk about why\nwe can make Dart faster than JavaScript. In"},"2144":{"dur":5,"text":"some cases, it already is.\nRight. We are VM engineers. We have done that"},"2150":{"dur":7,"text":"for most of our professional lives. And we\ndesigned Dart to make sure we could optimize"},"2157":{"dur":5,"text":"it. Maybe it is a little bit selfish, but\nit is basically so we can get better performance."},"2163":{"dur":6,"text":"So the language model, the language semantics,\nis very simple in Dart. It has a much simpler"},"2169":{"dur":3,"text":"optic model.\nIt means that when you first have allocated"},"2173":{"dur":5,"text":"an optic with fields, you cannot change it\nafter the allocation point. That's it. And"},"2178":{"dur":4,"text":"it allows us to have much faster access to\nfields, right? Just like in C# or in Java,"},"2182":{"dur":5,"text":"you can actually access the nth element because\nyou know that that is exactly where the foo"},"2188":{"dur":4,"text":"property is.\nProgrammers are declared so you don't have"},"2192":{"dur":6,"text":"to run Dart in order to set up the program\nin contrast to JavaScript. That allows us"},"2199":{"dur":6,"text":"to use snapshots for having fast startup of\napplications. We like that feature."},"2206":{"dur":6,"text":"And then we just have fewer special corner\ncases to worry about. As an example of a corner"},"2212":{"dur":4,"text":"case in JavaScript is that, well, you might\nactually like it as a programmer that you"},"2216":{"dur":6,"text":"can call a method with too many parameters\nor too few. Well, this is sort of nice but"},"2222":{"dur":4,"text":"in the implementation, somebody has to figure\nout what you called it with and that costs,"},"2227":{"dur":3,"text":"right? And if you don't provide enough argument,\nsomebody has to provide them for you, the"},"2231":{"dur":6,"text":"underlying system. And stuff like that makes\nthe code more complicated to generate and"},"2237":{"dur":7,"text":"the resultant code is also more loaded.\nLet's give an example. Here I tried to make"},"2244":{"dur":5,"text":"a side-by-side comparison between Dart and\nJavaScript and what code it generates and"},"2249":{"dur":6,"text":"how it works. On the right side, you can see\nthat we have two classes. We have a class"},"2256":{"dur":7,"text":"A. It has a method called foo. It prints out\nfoo. And then we have a subclass B that inherits"},"2263":{"dur":7,"text":"from -- or extends A. It has nothing. And\nyou create a new B -- it is called b, lowercase"},"2271":{"dur":6,"text":"b. And the main function on the right, you\ncall foo. Very, very simple. We try to mimic"},"2277":{"dur":5,"text":"the same in JavaScript. You have to go to\nthe left of the screen. The way we model inheritance"},"2282":{"dur":6,"text":"in JavaScript is by using prototypes, so we\nmake a function A. And in the prototype of"},"2289":{"dur":4,"text":"A, we put in the foo function, just like on\nthe right."},"2293":{"dur":7,"text":"And then we make a function B that calls constructor\nA. And in the B prototype, we don't do anything."},"2302":{"dur":5,"text":"We just set it to a new A and then we create\na new B and we call B. So it is sort of the"},"2308":{"dur":6,"text":"same. No difference.\nThe problem in JavaScript when it comes to"},"2314":{"dur":7,"text":"speed is you can actually on the fly change\nthe code. So in the inserter box you can see"},"2322":{"dur":5,"text":"that right there we actually are extending\nthe B pro type with a new foo that prints"},"2328":{"dur":6,"text":"in foo. You can call B foo again. And the\nsemantics is you have to print out new foo"},"2334":{"dur":6,"text":"now. We don't have that in Dart. We think\nthis is a plus. It is certainly a plus for"},"2341":{"dur":7,"text":"the implementation. So let's look at it. B\nis the object created. That's the object we"},"2348":{"dur":6,"text":"wanted to execute foo on. It points to the\nB prototype in JavaScript that, again, points"},"2355":{"dur":6,"text":"to the A prototype. When you start running\nthe program, you don't have the middle foo"},"2361":{"dur":6,"text":"so you have to execute the one up in A the\nproblem is, you don't know if somebody is"},"2368":{"dur":7,"text":"going to insert a foo going forward. The system\nhas to cope with it. So in V8 you have a choice."},"2375":{"dur":5,"text":"Either you have to always validate. There\nis no foo in the B prototype before you can"},"2381":{"dur":7,"text":"execute the one up in A. Then it will invalidate\nthe code, how it generated, with these assumptions."},"2394":{"dur":6,"text":"The problem is, the B prototype is an ordinary\nobject. You do not want to put in a general"},"2400":{"dur":7,"text":"dependency system for normal objects. So in\nDart -- no, sorry, in JavaScript V8, we actually"},"2409":{"dur":7,"text":"validate that there's no foo in the middle\nhere before we execute foo in the A prototype."},"2417":{"dur":7,"text":"That is expensive on the implementation side.\nLet me try to show you what it cost in generator"},"2427":{"dur":5,"text":"code. So given the example we had on the previous\nslide, we now have a small benchmark. It's"},"2433":{"dur":6,"text":"the micro benchmark. We don't like them, yes,\nbut I'm trying to make a point here. It's"},"2440":{"dur":7,"text":"a loop that just called B.foo repeatedly.\nAnd I warm up that program and I look at what"},"2449":{"dur":5,"text":"the various system generates. On the left\nside, you can see the result of what V8 generates."},"2454":{"dur":7,"text":"It generates nearly 300 bytes of common code\nand 239 bytes of stop code. The stop code"},"2463":{"dur":6,"text":"is the source. You need in order to optimization,\nif something goes wrong, for instance, you"},"2470":{"dur":7,"text":"add the extra code in the middle. On the Dart\nside, it's somewhat simpler. You can see the"},"2477":{"dur":7,"text":"optimized code here. It's much smaller. In\nfact, it's only a third of the V8 code being"},"2485":{"dur":5,"text":"generated. So the simple semantics in the\nprogramming language just makes sense, right?"},"2491":{"dur":7,"text":"It's much easier to make fast. Optimizing\na little bit of code is much easier than optimizing"},"2499":{"dur":5,"text":"a big piece of code. Generally, less code\nis great. Better memory performance. You also"},"2505":{"dur":7,"text":"get predictable performance because you cannot\nchange the code after you start it up. So"},"2512":{"dur":5,"text":"keep it simple. It's good for us, V8.\n>>Kasper Lund: Hopefully it's very good for"},"2518":{"dur":5,"text":"application developers that get more predictable\nperformance and just generally better performance."},"2524":{"dur":7,"text":"So let's benchmark this thing with a non-micro\nbrashing benchmark suite. To benchmark the"},"2532":{"dur":7,"text":"Dart VM. We have used multiple. A couple that\nare interesting are Richards and DeltaBlue."},"2545":{"dur":5,"text":"That means that if we make Richards and DeltaBlue\nfaster, it will have an impact on a real web"},"2551":{"dur":7,"text":"application. So using benchmark that you -- that\nhave proven valuable in the context of other"},"2558":{"dur":6,"text":"languages makes a lot of sense, especially\nif you want to try to bring a new programming"},"2564":{"dur":4,"text":"language implementation to the web and make\nsure it has nice performance properties that"},"2568":{"dur":6,"text":"match existing real languages. So we've used\nin the past for self, Strongtalk, V8, and"},"2575":{"dur":6,"text":"now we're using these two benchmarks for tuning\nDart. It's important to stress that these"},"2582":{"dur":4,"text":"benchmarks really measure the performance\nof calling methods, memory allocation, and"},"2587":{"dur":5,"text":"all the things applications tend to spend\na lot of time in. So Richards is an interesting"},"2592":{"dur":4,"text":"benchmark. It's a kernel simulating benchmark\nthat spends a lot of time in calling small"},"2596":{"dur":5,"text":"methods and dispatching between different\nobjects in here. What you see on the graph"},"2602":{"dur":7,"text":"here is the Dart VM is on the graph. V8 is\nthere and DART to JS, which is the generated"},"2609":{"dur":7,"text":"code we get from compiling the Richards version\nin Dart to JavaScript with our own Compiler"},"2616":{"dur":4,"text":"and running that on V8. So you have three\ndifferent runtime systems here in play that"},"2621":{"dur":5,"text":"execute the same benchmark. So the Dart VM\nis the fastest, which is a nice thing. You"},"2626":{"dur":5,"text":"can see the V8 performance is getting better\nbut not at the same pace as the Dart VM. Bigger"},"2632":{"dur":5,"text":"is better here. V8 has tuned for this benchmark\nsince its inception. We started out with a"},"2637":{"dur":4,"text":"Richards benchmark and we have achieved a\nlot of really cool speedups on these benchmarks"},"2641":{"dur":7,"text":"over the years. It means that V8 is fairly\ngood at optimizing for this kind of application"},"2649":{"dur":7,"text":"code and benchmark. The Dart VM is already\n1.7 times faster than V8 generates way less"},"2657":{"dur":5,"text":"code when running the benchmark and much better\nat executing that kind of code. The Dart to"},"2662":{"dur":5,"text":"JS code is a little bit behind. The handwritten\nversion of JavaScript that we use to tune"},"2668":{"dur":5,"text":"V8 and there's some extra checks going on\nin there. Something we're improving over time"},"2673":{"dur":5,"text":"as you can see by the graph. But it's really\nnice to see that over the last year, we have"},"2678":{"dur":5,"text":"been able to take the Dart VM from being a\nfairly simple implementation of a fairly simple"},"2683":{"dur":6,"text":"language to being a really efficient implementation\nof a fairly simple language. This also shows"},"2690":{"dur":3,"text":"on the DeltaBlue benchmark numbers. Here the\ndifference is even bigger. It's a factor of"},"2694":{"dur":6,"text":"2. DeltaBlue is a one-way constraint solver.\nIt spends time in allocating objects, constraints"},"2700":{"dur":5,"text":"and dispatcher on them. Again, it's a benchmark\nthat has been used for many different languages"},"2706":{"dur":5,"text":"and proven valuable in those context as well.\nIt's great to see that here the same story"},"2712":{"dur":5,"text":"repeats itself. The Dart VM is just a lot\nfaster than V8. Of course, it's also faster"},"2717":{"dur":5,"text":"than a version we compiled to JavaScript.\nIt's interesting to see that the Dart to JS"},"2722":{"dur":3,"text":"numbers here are actually faster than the\nhandwritten JavaScript. So the comparison"},"2726":{"dur":7,"text":"here is between handwritten JavaScript that\nV8 executes, where we have tried to implement"},"2733":{"dur":6,"text":"DeltaBlue in a reasonable way in JavaScript.\nAnd then the generated code, this is also"},"2739":{"dur":4,"text":"JavaScript, that we compiled from Dart code\nand the reason why it's a little bit faster"},"2744":{"dur":4,"text":"here is because we can do some analysis while\ncompiling. We can do some inlining to help"},"2749":{"dur":6,"text":"V8 execute this a little bit more quickly.\nWe do expect this to be able to improve the"},"2755":{"dur":5,"text":"quality of the Dart to JS Compiler over time.\nWe're aiming for trying to be as fast as the"},"2761":{"dur":4,"text":"code you would have written by hand in JavaScript.\nSo but clearly, the Dart VM is faster in this"},"2766":{"dur":5,"text":"kind of thing.\nIt's important to stress that performance"},"2771":{"dur":4,"text":"is super important to us. It really, really\nmatters that you get a really scalable application"},"2776":{"dur":7,"text":"platform out of using Dart. Having said that,\nI think it's important to point to the fact"},"2783":{"dur":4,"text":"that users of Dart are really finding that\nin addition to getting good performance, they"},"2787":{"dur":7,"text":"also feel that their productivity increased.\nAli has written a really large font atlas"},"2795":{"dur":7,"text":"generation tool, Glyph3D. We get this feedback\nfairly consistently, that people that use"},"2802":{"dur":4,"text":"Dart for building bigger things are very,\nvery happy with it."},"2806":{"dur":7,"text":">>Lars Bak: Thank you. Just to follow up on\nwhat Kasper said, performance is fantastic"},"2817":{"dur":5,"text":"in Dart right now and it's getting better\nover time. We have seen on the web the last"},"2823":{"dur":5,"text":"few weeks some examples where Dart is out\nperforming Java. We are super excited about"},"2829":{"dur":7,"text":"that. We hope to get up to that level for\nalmost all applications basically."},"2836":{"dur":7,"text":"So the ultimate goal is to get the Dart VM\ninto Chrome. I hope you all agree. Exactly."},"2848":{"dur":1,"text":"At least one.\n[ Laughter ]"},"2849":{"dur":6,"text":"But we have a little bit of a problem here.\nI sort of mentioned that the garbage collection"},"2856":{"dur":4,"text":"is story where the DOM was a little bit complicated\nwith these reference counts and stuff like"},"2861":{"dur":7,"text":"that. And putting Dart VM into the pit doesn't\nmake it easier. And we cannot convince ourselves"},"2869":{"dur":7,"text":"with reference counting that we can reclaim\nall unused cycles or memory data structures"},"2877":{"dur":7,"text":"in the browser. That means memory leaks. We\nreally do not want that. So that's a problem."},"2885":{"dur":5,"text":"But we like to do something about it. The\nohm way we can make sure that we do something"},"2890":{"dur":6,"text":"about it is to actually change the reference\ncounted nature of the DOM. And we create a"},"2897":{"dur":7,"text":"new project, started last month. It's called\nOilpan. It makes sure that it handles garbage"},"2904":{"dur":5,"text":"collection between the difference segments\ninside Chrome and Blink. Which is JavaScript,"},"2910":{"dur":7,"text":"DOM, eventually Dart. We want to convert the\nreference count in DOM into being traced so"},"2920":{"dur":5,"text":"we can trace through JavaScript ons, through\nDOM nodes and through Dart nodes and make"},"2925":{"dur":6,"text":"sure we know what we have. The cool thing\nabout tracing is you can find all pointers"},"2931":{"dur":5,"text":"that point to an object. That means you can\nmove the object if you choose to do so. You"},"2937":{"dur":7,"text":"can even do [indiscernible] and start from\nthat point on. And if you are really brave,"},"2950":{"dur":6,"text":"we can start doing concurrent manipulation\nof the DOM. So we hope this is all appealing"},"2957":{"dur":5,"text":"for us guys because it basically means we\nget a much faster browser out of it and a"},"2962":{"dur":7,"text":"browser use less memory. One thing about the\ncon currency when you have reference counting"},"2969":{"dur":5,"text":"in the objects, you actually have to put in\na lock around it if you do concurrent access."},"2975":{"dur":5,"text":"That's expensive. When you get a pointer to\nan object, you have to lock, increment the"},"2981":{"dur":3,"text":"pointer, unlock again. That's not practical\nwhen using reference counting. We can do all"},"2985":{"dur":7,"text":"this if unify the memory manager for playing.\nWe are excited about this project."},"2992":{"dur":6,"text":">>Kasper Lund: We feel like no presentation\nis really done without a demo of some sort."},"2999":{"dur":6,"text":"So lately we have been working on making Dart\neven faster. No surprise there. A lot of modern"},"3005":{"dur":4,"text":"CPUs today support what is known as SIMD,\nsingle instruction multi-data instructions,"},"3010":{"dur":6,"text":"where you have instructions on the CPU that\ncan operate on four floating point values"},"3016":{"dur":4,"text":"in parallel making it much, much faster. So\nthe Dart VM has been enhanced for support"},"3021":{"dur":5,"text":"for using those instructions and no other\nweb language has the support yet. It's very"},"3027":{"dur":5,"text":"nice to see this in action in a browser, just\nmaking things faster. It's really useful for"},"3032":{"dur":6,"text":"3D calculations, image processing, audio processing.\nWe would like to show you a little demo of"},"3039":{"dur":6,"text":"Google Chrome with the Dart VM put in there\nrunning a 3D animation thing with and without"},"3045":{"dur":5,"text":"the SIMD support to show you the significance\nof this kind of work. So let's switch to the"},"3050":{"dur":7,"text":"other.\n>>Lars Bak: So here we are running Dart VM"},"3061":{"dur":7,"text":"with a Blink with Dart VM. We have a bunch\nof monsters. They all handle inside Dart."},"3069":{"dur":5,"text":"So that means that the animation, the skeleton\npositions and all that is happening inside"},"3075":{"dur":7,"text":"Dart. It's not on the GPU. And this is the\n-- somebody is beeping. This benchmark has"},"3085":{"dur":6,"text":"been created so it is trying to always have\n60 frames per second. If it runs too fast,"},"3091":{"dur":7,"text":"it will throw in more monsters. We have 34.\nWe can turn it on with using a flag down here."},"3105":{"dur":7,"text":"Let's try it. SIMD. So this is using SIMD\nin animation in Dart."},"3120":{"dur":4,"text":"[ Applause ]\nSo a factor of three and a half is not too"},"3125":{"dur":7,"text":"bad, I guess. I'm really excited about this\nand it actually gives you a lot more power"},"3132":{"dur":7,"text":"to do computation inside JavaScript. So this\nis coming to you and I'm excited."},"3140":{"dur":7,"text":">>Kasper Lund: So let's conclude this presentation\nso we have time for some questions. So we"},"3153":{"dur":6,"text":"are VM guys. We want to have a job moving\nforward. We think performance is always interesting."},"3159":{"dur":6,"text":"I hope you like that, too. And we hope we\nhave convinced you that if you really want"},"3166":{"dur":7,"text":"to spark more performance into the browser,\nwe need probably a different option than JavaScript."},"3173":{"dur":7,"text":"I think Dart is one contender for that. The\nDart VM is already faster than JavaScript"},"3181":{"dur":6,"text":"and is approaching other programming languages\nout there. Again, just to point it out again"},"3188":{"dur":5,"text":"that higher performance is great for application\ndevelopers. That's where you actually can"},"3193":{"dur":7,"text":"get head room to do more interesting stuff.\nRight now, the core Dart platform is stable."},"3201":{"dur":7,"text":"We will start using the SDK. That doesn't\nmean it's inside Chrome. After we send out"},"3209":{"dur":7,"text":"1.0, that will be our main focus. Right now\nyou can see people on the web using Dart."},"3216":{"dur":6,"text":"Some have written fairly large bodies of code\nand they are happy with it. And inside Google"},"3223":{"dur":6,"text":"people have started using it. There's critical\nprojects start using Dart, hopefully we will"},"3229":{"dur":6,"text":"see some of these applications coming to you\nsoon. This will conclude our presentation."},"3236":{"dur":5,"text":"We should go to questions.\n[ Applause ]"},"3241":{"dur":7,"text":">>Kasper Lund: If we are unable to answer\nyour questions here. We have other Dart questions"},"3253":{"dur":5,"text":"at Google I\/O today. So if you have found\nthis inspiring and you want to see more on"},"3258":{"dur":5,"text":"more specific details, here's a list of things\nin room -- mostly in room 6, I guess, where"},"3264":{"dur":3,"text":"you can see other Dart presentations here.\nYes?"},"3268":{"dur":5,"text":">>Lars Bak: Let's get the first question.\n>>> My question is slightly related to that"},"3273":{"dur":5,"text":"first one, coming from a GWT development background,\nwondering if you have done any benchmarks"},"3279":{"dur":6,"text":"in comparison from the Dart to JavaScript\nCompiler to the Java to JavaScript Compiler."},"3286":{"dur":7,"text":">>Lars Bak: I don't have any numbers for you.\nIt is easy to try out. DeltaBlue, it is free"},"3294":{"dur":7,"text":"to try out for yourself. One thing I would\nlike to see is that we are trying to go beyond"},"3308":{"dur":7,"text":"grit in that we are doing a native Dart VM\nthat can boost performance and reduce startup"},"3315":{"dur":5,"text":"time. This is really what we want to get at.\nEspecially for mobile platforms where loading"},"3320":{"dur":5,"text":"an application can be a dog and take many\nresources. Faster VM, faster startup means"},"3326":{"dur":6,"text":"less battery. Next question, please.\n>>> Hi. Have there been discussions of including"},"3333":{"dur":6,"text":"Dart in other browsers and if not, would it\nbe possible to add it through plug-ins?"},"3339":{"dur":7,"text":">>Lars Bak: It will be fantastic to have all\nbrowsers using Dart. Clearly people have strong"},"3351":{"dur":3,"text":"opinions when it comes to programming languages.\nI don't really understand why but that's how"},"3355":{"dur":2,"text":"it is.\n[ Laughter ]"},"3358":{"dur":5,"text":"I just want to make sure that people the right\ntools to build the applications with. Our"},"3363":{"dur":5,"text":"system is completely open source. It has a\nwell-defined API. So when other browsers think"},"3368":{"dur":4,"text":"that this extra boost of performance will\nbe good for them, they can take it up and"},"3372":{"dur":4,"text":"we will be happy to help them out, basically.\nSo we are open for collaboration."},"3377":{"dur":6,"text":">>Kasper Lund: We have a few questions from\nour online audience and maybe just try to"},"3383":{"dur":4,"text":"answer a few of them as well. I can cover\nthe second one. I think you covered the grit"},"3388":{"dur":5,"text":"question already. This question is about Android\nstudio. And if we are planning on releasing"},"3394":{"dur":5,"text":"something similar for Dart. In a sense we\nalready are releasing something similar for"},"3399":{"dur":6,"text":"Dart. We have a fully-featured Dart editor.\nBut in addition to that, and maybe this is"},"3405":{"dur":3,"text":"what the question is really about, we do have\nsupport for using and working with Dart from"},"3409":{"dur":6,"text":"IntelliJ. It is here. If you are interested\nin this kind of thing, definitely come talk"},"3416":{"dur":5,"text":"to them at the booth. So the short answer\nis really that we are looking into releasing"},"3421":{"dur":4,"text":"all sorts of nice tools for Dart being based\nboth on Eclipse and IntelliJ. Definitely."},"3426":{"dur":3,"text":">>Lars Bak: Let's take the next question from\nthe audience."},"3429":{"dur":6,"text":">>> Hi. I have a bit of long -- seemingly\nlongstanding wisdom I got a few years ago"},"3435":{"dur":5,"text":"that occurs to me might be out of date which\nis the idea -- this is about V8, that JavaScript"},"3441":{"dur":5,"text":"objects are going to be more performant if\nyou define prototype rather than defining"},"3446":{"dur":5,"text":"methods dynamically in a constructor. It occurs\nto me with hidden, you have optimized it so"},"3452":{"dur":6,"text":"it wouldn't make a difference.\n>>Lars Bak: We certainly try to. We tried"},"3459":{"dur":6,"text":"very hard to optimize in V8. But it's still\nthe case that you have to create a new class"},"3466":{"dur":6,"text":"whenever you add a property in a way you haven't\nseen before. So you get a forest of classes"},"3472":{"dur":6,"text":"even for the same constructor. And in Dart,\nyou only have one format for one class whereas"},"3479":{"dur":6,"text":"in V8, right, depending on how you add properties\nto an object from a given constructor, you"},"3486":{"dur":4,"text":"can get a sea of them. We have to cut off\nat some point. We have limits inside V8. When"},"3490":{"dur":5,"text":"you reach a certain number of hidden classes\nfor constructer. We say, we actually just"},"3496":{"dur":7,"text":"-- we de-optimize now and we make sure that\nobjects will only be treated as maps and get"},"3504":{"dur":2,"text":"slow.\n>>> So is it true that, then, prototype would"},"3507":{"dur":5,"text":"be more performant in V8 than using construct-defining\nproperties, even if you define them the same"},"3512":{"dur":4,"text":"way every time in constructor.\n>>Lars Bak: I think it depends on exactly"},"3516":{"dur":4,"text":"the setup. You can make it so they perform\nexactly the same. It really depends on how"},"3521":{"dur":4,"text":"the application adds properties to your object\non the fly."},"3526":{"dur":6,"text":">>Kasper Lund: Little bit of explanation.\nV8 does try to move functions to the class"},"3532":{"dur":4,"text":"side so to share them behind the scenes anyway.\nSo you can say adding on the objects is sort"},"3537":{"dur":5,"text":"of optimize too, but it really depends on\nthe application if it makes a difference."},"3542":{"dur":4,"text":">>Lars Bak: Next question.\n>>> One of the arguments for no JS is that"},"3546":{"dur":4,"text":"you have JavaScript everywhere, service side\neven. Are you looking at Dart service side"},"3551":{"dur":5,"text":"or is there more momentum behind go.\n>>Lars Bak: That's a great question. Of course,"},"3556":{"dur":7,"text":"we have that. So we have a service side library\nyou can use. You can use the Dart VM stand"},"3565":{"dur":5,"text":"alone if you want to. You can use the same\nkind of ace synchronize size style as you"},"3570":{"dur":7,"text":"do in no JS. You saw the performance numbers\non the slide. This is a performance measurement"},"3578":{"dur":6,"text":"system we are using internally, all written\nin Dart. It controls a lot of machines at"},"3585":{"dur":7,"text":"the same time we use exactly that server side\nsystem. So, yes, we have a libraries for supporting"},"3594":{"dur":5,"text":"service side Dart execution but our main focus\nright now is the client side and getting it"},"3600":{"dur":2,"text":"to Chrome.\n>>Kasper Lund: I think we have time for one"},"3602":{"dur":5,"text":"more question. If you have more questions,\nthe large line, it will be at the office hours"},"3608":{"dur":5,"text":"booth so come to us and ask those questions\nthere. But let's take the final question."},"3614":{"dur":5,"text":">>> My question is there's a lot of JavaScript\ncode already there. Is there a tool, or even"},"3619":{"dur":3,"text":"if it is possible, to convert JavaScript into\nDart."},"3622":{"dur":5,"text":">>Kasper Lund: Generally we find that people\nthat try to rewrite existing code basis from"},"3627":{"dur":4,"text":"JavaScript or from other languages to Dart\nare generally fairly successful. It's also"},"3632":{"dur":4,"text":"possible to use the JavaScript code from Dart\nby wrapping it a little bit and using what"},"3636":{"dur":6,"text":"we called JavaScript interrupt. But generally\ntranslating from JavaScript, unless you use"},"3643":{"dur":5,"text":"very, very dynamic features of JavaScript\na lot, it's actually recently easy. A lot"},"3648":{"dur":3,"text":"of people have good success with that.\n>>> You guys have a tool."},"3651":{"dur":5,"text":">>Kasper Lund: There is no tool, no.\n>>Lars Bak: Thank you very much."},"3657":{"dur":0,"text":"[ Applause ]"}}