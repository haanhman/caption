{"2.28":{"start":"2.28","dur":"4.63","text":"&gt;&gt;Lars Bak: Good morning, and welcome to the\nsecond day of Google I\/O. I hope you all enjoyed"},"6.91":{"start":"6.91","dur":"3.34","text":"the party yesterday with Billy Idol.\n[ Laughter ]"},"10.25":{"start":"10.25","dur":"3.789","text":"&gt;&gt;Lars Bak: Yeah. From my youth.\n[ Laughter ]"},"14.04":{"start":"14.039","dur":"7","text":"&gt;&gt;Lars Bak: So we want to talk about web programming\nlanguages and virtual machines and we&#39;re trying"},"22.54":{"start":"22.54","dur":"6.75","text":"to argue why it&#39;s important to always make\nit faster so that you guys can make better"},"29.29":{"start":"29.29","dur":"3.8","text":"applications.\nI&#39;m Lars Bak. I&#39;m the blue guy. And this is"},"33.09":{"start":"33.09","dur":"2.17","text":"Kasper Lund --\n&gt;&gt;Kasper Lund: I&#39;m the red guy."},"35.26":{"start":"35.26","dur":"0.829","text":"&gt;&gt;Lars Bak: -- the red guy.\n[ Laughter ]"},"36.09":{"start":"36.089","dur":"7","text":"&gt;&gt;Lars Bak: And we are from Google, from the\nDanish engineering office, so if we look tired,"},"44.71":{"start":"44.71","dur":"6.32","text":"it&#39;s jet lag.\nAll right. So just to know -- so you know"},"51.03":{"start":"51.03","dur":"7","text":"who we are, we&#39;ve been working on virtual\nmachines for too long. I started in &#39;86, and"},"58.37":{"start":"58.37","dur":"4.14","text":"in &#39;86 working on virtual machines for their\nprogramming languages was sort of a little"},"62.51":{"start":"62.51","dur":"5.149","text":"bit niche, and it was only research communities\nthat had an interest in it."},"67.66":{"start":"67.659","dur":"5.021","text":"But given today we have several hundred people\nhere, I&#39;m pleased that there&#39;s more interest"},"72.68":{"start":"72.68","dur":"4.18","text":"for it.\nSo I started working with Kasper 13 years"},"76.86":{"start":"76.86","dur":"7","text":"ago and we&#39;ve been doing Java virtual machines,\nSmalltalk virtual machines, JavaScript virtual"},"84.67":{"start":"84.67","dur":"4.549","text":"machines, and now Dart, so we sort of have\na little bit of experience in doing compilers"},"89.22":{"start":"89.219","dur":"6.61","text":"and garbage collectors, so hopefully we can\ntell you about some of our findings over the"},"95.83":{"start":"95.829","dur":"6.93","text":"last many years.\nSo why are we here? We&#39;re here because we"},"102.76":{"start":"102.759","dur":"5.65","text":"truly believe that speed in web browsers fuel\ninnovations for application developers, right?"},"108.41":{"start":"108.409","dur":"5.291","text":"The more speed we can give you, the more interesting\napplications you can do. And we strongly believe"},"113.70":{"start":"113.7","dur":"5.099","text":"in the fly-by web, right? Developers do one\napplication -- it runs on mobile phones and"},"118.80":{"start":"118.799","dur":"6.521","text":"desktop systems -- and this is just fantastic.\nAnd the source that makes it work is the virtual"},"125.32":{"start":"125.32","dur":"4.109","text":"machine inside the browser.\nAnd if we can make it faster, you can take"},"129.43":{"start":"129.429","dur":"4.711","text":"advantage of it.\nThe question is, we have seen a lot of speedup"},"134.14":{"start":"134.14","dur":"6.76","text":"in browsers over the last, I guess, five years.\nIs it fast enough or do we want more speed?"},"140.90":{"start":"140.9","dur":"5.3","text":"So we are of the opinion that we need to do\neven better, and that is one of the reasons"},"146.20":{"start":"146.2","dur":"5","text":"why we have started on this new venture to\ndo a Dart platform."},"151.20":{"start":"151.2","dur":"7","text":"&gt;&gt;Kasper Lund: So before we dive into the\ntechnical details of virtual machines and"},"158.56":{"start":"158.56","dur":"6.22","text":"programming for the web, I just wanted to\ntake you back to 2006 when we started developing"},"164.78":{"start":"164.78","dur":"6.87","text":"V8. At that point, Web pages had evolved from\nbeing fairly static to being a little bit"},"171.65":{"start":"171.65","dur":"5.199","text":"more rich, and we were seeing sort of the\nfirst Web applications appear. At the point"},"176.85":{"start":"176.849","dur":"5.441","text":"in time, you were probably running Firefox\n2.0, Internet Explorer 7.0, or some other"},"182.29":{"start":"182.29","dur":"5.71","text":"browsers there, but it was very clear that\nthese browsers were not really designed for"},"188.00":{"start":"188","dur":"4.2","text":"long-running, heavy Web applications. They\nwere designed for the web of two thousand-"},"192.20":{"start":"192.2","dur":"4.33","text":"-- well, probably 2000, yeah.\nAnd so it was an interesting at that point"},"196.53":{"start":"196.53","dur":"5.03","text":"in time, 2006, it was just before we were\nseeing these applications really come to life"},"201.56":{"start":"201.56","dur":"5.02","text":"on the web. And even if you -- if you look\nat the Web sites I&#39;ve depicted up here, you"},"206.58":{"start":"206.58","dur":"4.379","text":"can tell the difference, if you can actually\nsee it from the back of the room, that in"},"210.96":{"start":"210.959","dur":"3.711","text":"2008, already then we were seeing pages like\nBBC becoming a little bit more interactive"},"214.67":{"start":"214.67","dur":"5.39","text":"and more rich.\nSo in 2006 when we set out to implement a"},"220.06":{"start":"220.06","dur":"4.2","text":"new virtual machine for JavaScript for the\nweb, people believed that browsers were essentially"},"224.26":{"start":"224.26","dur":"4.679","text":"fast enough. Web applications like Gmail and\nGoogle Maps ran fine and people were very"},"228.94":{"start":"228.939","dur":"5.211","text":"impressed with them. People also believed\nthat JavaScript was just inherently too slow"},"234.15":{"start":"234.15","dur":"6.08","text":"for writing heavy client-side computations.\nAnd even so, people didn&#39;t really expect the"},"240.23":{"start":"240.23","dur":"4.7","text":"JavaScript to improve that much so they didn&#39;t\nthink that the execution of JavaScript was"},"244.93":{"start":"244.93","dur":"5.039","text":"holding things back. They were okay with having\nmore code running on the server side and having"},"249.97":{"start":"249.969","dur":"5.3","text":"fairly limited amounts of logic on the client\nside."},"255.27":{"start":"255.269","dur":"4.421","text":"Another key thing for us when we started was\nthat performance at that point was evaluated"},"259.69":{"start":"259.69","dur":"4.94","text":"using very simple micro-benchmarks, where\nall the emphasis was put on simple loops with"},"264.63":{"start":"264.63","dur":"6.31","text":"very simple arithmetic and nobody paid any\nattention to the overhead for calling methods"},"270.94":{"start":"270.94","dur":"4.78","text":"or how large applications would perform when\nit comes to memory management."},"275.72":{"start":"275.72","dur":"4.34","text":"So people were really spending all their time\nlooking at small, simple loops and trying"},"280.06":{"start":"280.06","dur":"4.46","text":"to make them run a little bit faster.\nSo here&#39;s an example of a benchmark that I"},"284.52":{"start":"284.52","dur":"2.69","text":"think represents that line of thought pretty\nwell."},"287.21":{"start":"287.21","dur":"4.59","text":"This is a benchmark, a JavaScript benchmark,\nfrom the SunSpider benchmark collection. It&#39;s"},"291.80":{"start":"291.8","dur":"5.33","text":"known as &quot;bit-wise and&quot; and that&#39;s all it\ndoes. It computes the bit-wise and for a series"},"297.13":{"start":"297.13","dur":"4.42","text":"of values here, starting out with a fairly\nlarge number and then it runs through a loop"},"301.55":{"start":"301.55","dur":"6.53","text":"and you&#39;ll probably notice that even on the\niteration, I is zero so when you &quot;and&quot; that"},"308.08":{"start":"308.08","dur":"6.209","text":"with anything, you&#39;ll get zero out. So this\nis just a fancy way of computing zero."},"314.29":{"start":"314.289","dur":"3.451","text":"Not exactly something you want to spend a\nlot of time on optimizing for, I guess, and"},"317.74":{"start":"317.74","dur":"3.799","text":"certainly not something that would, if you\nactually did optimize this, it would turn"},"321.54":{"start":"321.539","dur":"5.061","text":"your application any faster.\nSo SunSpider is a benchmark that sort of represents"},"326.60":{"start":"326.6","dur":"5.55","text":"some of the things and some of the problems\nfrom sort of the earlier web, and they -- it"},"332.15":{"start":"332.15","dur":"3.94","text":"is being updated every now and then but not\nwith any significant differences. This is"},"336.09":{"start":"336.09","dur":"5.51","text":"from SunSpider 1.0 released a couple of weeks\nago. It&#39;s very nice to see that they&#39;ve added"},"341.60":{"start":"341.6","dur":"4.68","text":"testing that actually does compute zero but\nit&#39;s still a really bad benchmark. Making"},"346.28":{"start":"346.28","dur":"4.28","text":"this faster and tuning V8 for these kind of\nthings would not make your applications run"},"350.56":{"start":"350.56","dur":"5.15","text":"any faster, so...\nSo when we started designing V8, we had to"},"355.71":{"start":"355.71","dur":"3.109","text":"make a choice. Like what do we want to optimize\nfor?"},"358.82":{"start":"358.819","dur":"4.141","text":"And there are basically two approaches.\nYou can optimize for the current apps and"},"362.96":{"start":"362.96","dur":"4.75","text":"the current benchmarks, and that&#39;s a nice\nand simple incremental approach, and there&#39;s"},"367.71":{"start":"367.71","dur":"5.829","text":"a good chance you can make things 10%, maybe\n20% faster that way. And we chose to optimize"},"373.54":{"start":"373.539","dur":"4.481","text":"for the apps of the future at that point so\nwe decided that we wanted to support much"},"378.02":{"start":"378.02","dur":"3.89","text":"heavier side client-side computations and\nwe wanted to turn the browser into a scalable"},"381.91":{"start":"381.91","dur":"5.92","text":"application platform, sort of thus enabling\na new class of Webapps that could be written."},"387.83":{"start":"387.83","dur":"5.339","text":"So optimizing a brand-new virtual machine\nfor some applications that you cannot write"},"393.17":{"start":"393.169","dur":"6.601","text":"-- or you couldn&#39;t write in 2006 -- required\nus to come up with some benchmarks and some"},"399.77":{"start":"399.77","dur":"3.179","text":"metrics that would allow us to make progress\non that problem."},"402.95":{"start":"402.949","dur":"4.331","text":"Which is where the V8 benchmark suite entered\nthe game."},"407.28":{"start":"407.28","dur":"4.31","text":"So the V8 benchmark suite is a collection\nof benchmarks that are structured and mostly"},"411.59":{"start":"411.59","dur":"7","text":"object-oriented, and they&#39;re designed to push\nthe limits of browsers in 2006 but also today,"},"418.71":{"start":"418.71","dur":"4.95","text":"and it&#39;s benchmarks that are mostly proven\nvaluable in the context of lots of other languages."},"423.66":{"start":"423.66","dur":"4.039","text":"So it&#39;s benchmarks that we know that if we\noptimize for those, it will actually make"},"427.70":{"start":"427.699","dur":"3.9","text":"it possible for you guys to write much larger\nand much more interesting applications."},"431.60":{"start":"431.599","dur":"5.72","text":"It measures the performance of dynamic message\ncalls and property access and it also measures"},"437.32":{"start":"437.319","dur":"3.75","text":"the performance of the memory management system,\nand closure creation and location, to a much"},"441.07":{"start":"441.069","dur":"2.901","text":"higher degree than any of the existing benchmarks\nin 2006."},"443.97":{"start":"443.97","dur":"5.569","text":"&gt;&gt;Lars Bak: But Kasper, can I get the mic?\nThank you. Let&#39;s try to run it so we can see"},"449.54":{"start":"449.539","dur":"4.22","text":"how it looks.\nSo here, let&#39;s search for the V8 benchmark"},"453.76":{"start":"453.759","dur":"5.821","text":"suite and we can run Version 7 of it, and\nit will start running and you&#39;ll see the results"},"459.58":{"start":"459.58","dur":"4.08","text":"trickling in on the right-hand side and you\ncan see the collection of benchmarks we are"},"463.66":{"start":"463.66","dur":"3.939","text":"running. It&#39;s eight different benchmarks.\nThey&#39;re not big, but they are certainly not"},"467.60":{"start":"467.599","dur":"5.981","text":"micro-benchmarks.\nAnd we should soon have the results."},"473.58":{"start":"473.58","dur":"7","text":"The interesting part is that the score you\nsee is computed as the geometric mean between"},"481.04":{"start":"481.039","dur":"7","text":"individual scores but it&#39;s calibrated for\nFirefox 2 on a high-end desktop machine in"},"489.67":{"start":"489.669","dur":"7","text":"2008.\nSo we are pretty much running 160 times faster"},"497.28":{"start":"497.28","dur":"3.53","text":"than one of the browsers in 2008, so this\nis pretty amazing."},"500.81":{"start":"500.81","dur":"5.079","text":"&gt;&gt;Kasper Lund: Yeah. The score was 100 on\nFirefox 2 on my beefy desktop machine in 2008."},"505.89":{"start":"505.889","dur":"5.4","text":"It&#39;s a little bit better now. Which is nice.\n[ Laughter ]"},"511.29":{"start":"511.289","dur":"7","text":"&gt;&gt;Kasper Lund: So I think it&#39;s fair to conclude\nthat the performance improvements for JavaScript"},"519.17":{"start":"519.17","dur":"4.46","text":"over the last eight years have been pretty\nimpressive. JavaScript itself executes a hundred"},"523.63":{"start":"523.63","dur":"5.21","text":"times faster than it did before, at least,\nand we see people being able to write applications"},"528.84":{"start":"528.84","dur":"5.32","text":"that use way bigger object heaps, and the\nGC pauses are even lower than they were at"},"534.16":{"start":"534.16","dur":"3.86","text":"that point.\nAnother key thing for us as compilers and"},"538.02":{"start":"538.02","dur":"4.15","text":"VM engineers is that people pay attention\nnow to performance of their Webapps and it&#39;s"},"542.17":{"start":"542.17","dur":"5.4","text":"very, very common to see benchmark numbers\nreported in the press, so it&#39;s a -- there&#39;s"},"547.57":{"start":"547.57","dur":"5.12","text":"a nice friendly competition going on to improve\nthe web platform performance."},"552.69":{"start":"552.69","dur":"3.47","text":"Another thing that&#39;s very nice to see is that\nit&#39;s possible to write really large Webapps"},"556.16":{"start":"556.16","dur":"6.52","text":"these days. We see common pages like Amazon,\nCNN, and ESPN have -- they&#39;re serving fairly"},"562.68":{"start":"562.68","dur":"5.48","text":"large amounts of JavaScript codes to their\ncustomers all day, so it&#39;s not uncommon to"},"568.16":{"start":"568.16","dur":"6.61","text":"see like a megabyte of JavaScript code, minified\nJavaScript code, being sent to clients. And"},"574.77":{"start":"574.77","dur":"4.13","text":"the browsers are generally capable of working\nwith that. So things have certainly changed"},"578.90":{"start":"578.9","dur":"5.85","text":"since 2006.\nOne thing that is important for us is to pay"},"584.75":{"start":"584.75","dur":"4.75","text":"attention to where the time is actually spent\nin your browser, and what you have here is"},"589.50":{"start":"589.5","dur":"7","text":"a couple of diagrams that show that we&#39;re\nspending around 60% of the time in JavaScript"},"597.45":{"start":"597.45","dur":"4.12","text":"execution when you&#39;re running things like\nGmail, Google Docs, Google Search, and things"},"601.57":{"start":"601.57","dur":"5.04","text":"like that, and the rest is spent in the general\nbrowser infrastructure."},"606.61":{"start":"606.61","dur":"3.14","text":"On other sites like Twitter and Facebook,\nthe percentage in JavaScript is a little bit"},"609.75":{"start":"609.75","dur":"5.84","text":"lower than that. And these measurements are\nall done by the Chrome team using Chrome,"},"615.59":{"start":"615.59","dur":"4.48","text":"so we don&#39;t have the exact same numbers for\nthe other browsers. But it shows that no matter"},"620.07":{"start":"620.07","dur":"5.51","text":"how fast we make the engines, the application\ndevelopers will adapt to that and add new"},"625.58":{"start":"625.58","dur":"4.95","text":"functionality and essentially make their applications\nbetter by using this thing."},"630.53":{"start":"630.53","dur":"5.66","text":"So imagine how it would feel like running\nmodern Gmail on a browser from 2006. I don&#39;t"},"636.19":{"start":"636.19","dur":"6.48","text":"think you would like that at all.\nSo today, web developers are really pushing"},"642.67":{"start":"642.67","dur":"4.21","text":"the limits of the platform and they really\nwant and demand predictable high performance."},"646.88":{"start":"646.88","dur":"3.09","text":"Higher and higher, actually.\nThey want consistent frame rates for their"},"649.97":{"start":"649.97","dur":"4.03","text":"games. And they really want to support large-scale\napplication development."},"654.00":{"start":"654","dur":"4.21","text":"So people&#39;s expectations for this platform\nhave really changed. They really demand these"},"658.21":{"start":"658.21","dur":"4.66","text":"things now, and all it took is 100X performance\nimprovement. It makes a really, really big"},"662.87":{"start":"662.87","dur":"3.25","text":"change to the technology stack when you do\nthese things."},"666.12":{"start":"666.12","dur":"6.57","text":"So the question is, of course, are the web\ndevelopers getting predictable and high performance,"},"672.69":{"start":"672.69","dur":"3.43","text":"and can they actually support really large-scale\napplication development on the current web"},"676.12":{"start":"676.12","dur":"2.67","text":"stack?\nSo before we answer that question, I think"},"678.79":{"start":"678.79","dur":"3.82","text":"we should dive into the -- the current web\nstack and take a look at how we can improve"},"682.61":{"start":"682.61","dur":"6.69","text":"the parts.\n&gt;&gt;Lars Bak: All right. Now we&#39;ll dive into"},"689.30":{"start":"689.3","dur":"3.63","text":"what actually happens inside the virtual machine\nand the browser."},"692.93":{"start":"692.93","dur":"4.8","text":"So I&#39;ll be talking about a few different techniques\nwe&#39;ve been using to make V8 fast and I&#39;ll"},"697.73":{"start":"697.73","dur":"7","text":"talk about the history behind these technologies.\nFirstly, let&#39;s look at a browser. So a browser"},"705.46":{"start":"705.46","dur":"6.69","text":"has several parts. But if we look at the performance-critical\npart for a Webapp, it actually consists of"},"712.15":{"start":"712.15","dur":"3.91","text":"two segments.\nAt the lower part, we have the JavaScript"},"716.06":{"start":"716.06","dur":"6.63","text":"engine where you have all the code and the\nobjects and the WebObjects that point to the"},"722.69":{"start":"722.69","dur":"6.02","text":"DOM. The DOM consists of the -- the nodes\nthat you can see on the screen. And when you"},"728.71":{"start":"728.71","dur":"6.35","text":"execute your Web application, you manipulate\nthe DOM by executing JavaScript."},"735.06":{"start":"735.06","dur":"6.37","text":"We all hope that when you develop a Web application,\nyou have low latency so it comes up fast and"},"741.43":{"start":"741.43","dur":"6.49","text":"there&#39;s no pauses, it has high performance,\nand it also has low memory usage so you don&#39;t"},"747.92":{"start":"747.92","dur":"4.31","text":"end up swapping when you run your application.\nAnd then, of course, more pauses if you do"},"752.23":{"start":"752.23","dur":"4.88","text":"animation. But there are still big fears when\nyou run a Web application, right?"},"757.11":{"start":"757.11","dur":"6.03","text":"If the object heap is too big, you can get\nvery large GC pauses, and you can have memory"},"763.14":{"start":"763.14","dur":"6.04","text":"leaks. So having a Web application that runs\nfor weeks and suddenly it runs out of memory"},"769.18":{"start":"769.18","dur":"4.57","text":"is not very pleasant for the user.\nAnd sometimes you&#39;ll get erratic performance"},"773.75":{"start":"773.75","dur":"5.7","text":"behavior for no good reasons.\nAnd this is sort of some of the issues people"},"779.45":{"start":"779.45","dur":"7","text":"are concerned about when writing for the web.\nHere is my picture of how a virtual machine"},"788.21":{"start":"788.21","dur":"3.52","text":"or a JavaScript engine looked like in the\nyear 2006."},"791.73":{"start":"791.73","dur":"6.06","text":"It had a simple parser that would take the\nsource code and convert into an abstract syntax"},"797.79":{"start":"797.79","dur":"4.47","text":"tree or into byte codes and then it would\nhave a simplistic interpreter that would run"},"802.26":{"start":"802.26","dur":"6.86","text":"over the AST, abstract syntax tree, or the\nbyte codes and execute the program."},"809.12":{"start":"809.12","dur":"4.36","text":"And then it would have a simple memory management\nsystem to clean out unused memory."},"813.48":{"start":"813.48","dur":"5.53","text":"Now, in 2006 you would not create many objects\nbecause you knew that if you created a lot"},"819.01":{"start":"819.01","dur":"4.99","text":"of objects, your program would be slow, so\nyou actually didn&#39;t use many of the object-oriented"},"824.00":{"start":"824","dur":"5.04","text":"qualities of the system.\nSo the conclusion is, it was very simple and"},"829.04":{"start":"829.04","dur":"4.85","text":"that&#39;s nice that you can write this kind of\nVM in a few thousand lines, but the downside"},"833.89":{"start":"833.89","dur":"5.92","text":"was it was really slow.\nToday, we have a sports car and I can guarantee"},"839.81":{"start":"839.81","dur":"6.25","text":"you we have put in all kinds of fancy turbo\nengines in it to make it fast, right? We still"},"846.06":{"start":"846.06","dur":"6.5","text":"have a parser, but instead of an interpreter,\nwe have a multi-tier adaptive compilation"},"852.56":{"start":"852.56","dur":"6.04","text":"system. It&#39;s basically a -- it&#39;s a series\nof compilers that learns from the behavior"},"858.60":{"start":"858.6","dur":"5.85","text":"of the program and tries to optimize the execution\nbased on behavior."},"864.45":{"start":"864.45","dur":"5.88","text":"We have a de-optimization system that allows\nthe system to back out of optimization if"},"870.33":{"start":"870.33","dur":"5.89","text":"the behavior of the program changes over time.\nAnd then we have a system that handles large"},"876.22":{"start":"876.22","dur":"6.67","text":"object heaps. And in the V8 case, we have\na generation-based garbage collector that"},"882.89":{"start":"882.89","dur":"4.83","text":"allows us to have heaps up to a gigabyte,\nat least, where you can still have reasonable"},"887.72":{"start":"887.72","dur":"7","text":"pauses when running your program.\nNative code is generated on the fly and is"},"894.87":{"start":"894.87","dur":"5.33","text":"generated by the buckets, I guarantee you,\nand what will happen when it&#39;s not used anymore,"},"900.20":{"start":"900.2","dur":"5.21","text":"it will be removed by the garbage collector.\nSo even return addresses on the execution"},"905.41":{"start":"905.41","dur":"5.98","text":"stack will function like pointers into the\ncode, and if they are not used anymore, the"},"911.39":{"start":"911.39","dur":"4.92","text":"code will be eliminated.\nAnd then of course there&#39;s all this tool sport"},"916.31":{"start":"916.31","dur":"3.219","text":"with debugging and profiling.\nBecause when you do optimizations -- right?"},"919.53":{"start":"919.529","dur":"5.651","text":"-- you sort of lose the understanding of what\nthe source code is doing, so you cannot single-step"},"925.18":{"start":"925.18","dur":"2.9","text":"an optimized code. It will give no meaning\nto you."},"928.08":{"start":"928.08","dur":"5.55","text":"So what we try to do is we try to de-optimize\nthe code. If we try to single-step, it will"},"933.63":{"start":"933.63","dur":"5.47","text":"look like you do single-stepping in the normal\nsource code. And that&#39;s great for a programmer,"},"939.10":{"start":"939.1","dur":"4.47","text":"because then you can debug on an odd-based\nsystem or an intra-based system and get exactly"},"943.57":{"start":"943.57","dur":"6.45","text":"the same behavior.\nIt&#39;s really complex, but the good thing is,"},"950.02":{"start":"950.02","dur":"5.18","text":"it&#39;s fast.\nLet&#39;s go beyond the hood and see what&#39;s going"},"955.20":{"start":"955.2","dur":"3.63","text":"on inside the V8 engine when it comes to a\nfew things."},"958.83":{"start":"958.83","dur":"5.99","text":"I&#39;ll briefly mention how we make the code\nreally fast, and this is this multi-tier adaptive"},"964.82":{"start":"964.82","dur":"4.4","text":"compilation system.\nI&#39;ll talk about how we handle large object"},"969.22":{"start":"969.22","dur":"5.64","text":"heaps by doing this generation-based garbage\ncollection with a twist."},"974.86":{"start":"974.86","dur":"7","text":"And then I&#39;ll talk about how we bind JavaScript\nobjects to the DOM nodes."},"982.26":{"start":"982.26","dur":"6.68","text":"And this is -- this is tricky, so I&#39;m calling\nit the tangoing between the tracing GC and"},"988.94":{"start":"988.94","dur":"7","text":"reference counting.\nSo listen up. This might be a little bit tricky"},"996.53":{"start":"996.53","dur":"5.34","text":"here.\nWhen you parse the code, the code is blue."},"1001.87":{"start":"1001.87","dur":"5.5","text":"You have a sea of JavaScript methods. Nothing\nhas been executed yet. When you start executing,"},"1007.37":{"start":"1007.37","dur":"5.27","text":"the first simplistic compiler will take the\nsource code and convert into native code,"},"1012.64":{"start":"1012.64","dur":"2.93","text":"right?\nIt doesn&#39;t know much about the behavior of"},"1015.57":{"start":"1015.57","dur":"6.1","text":"the program, so what it&#39;s doing is putting\nin inline cache stops that tracks the behavior"},"1021.67":{"start":"1021.67","dur":"4.49","text":"of the program. So in essence, what it&#39;s doing\nat one call site in the program, it tries"},"1026.16":{"start":"1026.16","dur":"5.5","text":"to figure out exactly what kind of type of\nobjects comes by."},"1031.66":{"start":"1031.66","dur":"5.03","text":"At the same time, we have this monitoring\nsystem in the system that detects when a method"},"1036.69":{"start":"1036.69","dur":"5.16","text":"is used frequently. If it&#39;s used frequently,\nwe said, &quot;Well, let&#39;s try to optimize it even"},"1041.85":{"start":"1041.85","dur":"5.58","text":"further.&quot; And the optimizing native compiler,\nwhat it will do, it will take the collected"},"1047.43":{"start":"1047.43","dur":"6.57","text":"type information from the inline caches and\nuse that to do aggressive inlining."},"1054.00":{"start":"1054","dur":"4.92","text":"So it basically assumes that the behavior\nof the program you had before you optimized"},"1058.92":{"start":"1058.92","dur":"6.46","text":"will be the same in all future. It&#39;s not always\nthe case, but we&#39;re optimistic here."},"1065.38":{"start":"1065.38","dur":"5.28","text":"So we do these aggressive inlining decisions,\nbut we put in the optimization hook so that"},"1070.66":{"start":"1070.66","dur":"5.69","text":"if our assumptions are wrong in the optimized\ncode, we can go back again to the naive, simple"},"1076.35":{"start":"1076.35","dur":"3.28","text":"code.\nIn most cases, we don&#39;t have to do that and"},"1079.63":{"start":"1079.63","dur":"5.73","text":"you&#39;ll get the predictable performance, which\nis great."},"1085.36":{"start":"1085.36","dur":"7","text":"It gets even harder -- right? -- because as\nyou all know, there&#39;s no types in JavaScript,"},"1092.36":{"start":"1092.36","dur":"5.36","text":"and that means we have to do funky stuff.\nOne funky thing we are doing is that if you"},"1097.72":{"start":"1097.72","dur":"6.76","text":"use an array and you put doubles in it, at\nsome point at runtime we decide to optimize"},"1104.48":{"start":"1104.48","dur":"6.09","text":"it by converting the representation of an\nobject from an array that can have any kind"},"1110.57":{"start":"1110.57","dur":"5.48","text":"of objects to a representation that can only\nhave double values. Right?"},"1116.05":{"start":"1116.05","dur":"4.3","text":"So we assume that moving forward, we will\nonly operate on double values in this array."},"1120.35":{"start":"1120.35","dur":"4.03","text":"That will certainly speed up programs that\ncontinue to have that behavior, but you still"},"1124.38":{"start":"1124.38","dur":"4.67","text":"need the hooks if something from the side\nwould put in an integer. Or not an integer."},"1129.05":{"start":"1129.05","dur":"6.93","text":"Let&#39;s say a -- a string in that array.\nThen we have to back out of that optimization"},"1135.98":{"start":"1135.98","dur":"4.64","text":"and go back to the standard representation\nof an object array. Very complicated."},"1140.62":{"start":"1140.62","dur":"7","text":"But anyways, you have a system that&#39;s always\nchanging when you run it."},"1149.31":{"start":"1149.31","dur":"5.6","text":"Did we invent this multi-tier adaptive compilation?\nNo, we are not that smart. There is actually"},"1154.91":{"start":"1154.91","dur":"7","text":"a long history of implementing dynamic languages,\nstarted with interpretation in the &#39;50s with"},"1164.83":{"start":"1164.83","dur":"5.1","text":"Lisp. In the &#39;70s, we have dynamic compilation\nbeing added to Smalltalk. And they even had"},"1169.93":{"start":"1169.93","dur":"5.06","text":"inline caching. It was not at the call side,\nbut they put it at the callee. So instead"},"1174.99":{"start":"1174.99","dur":"3.76","text":"of having it -- the method calling it, it\nwas actually at the prologue of the method"},"1178.75":{"start":"1178.75","dur":"4.82","text":"you called.\nAnd then the adaptive compilation was invented"},"1183.57":{"start":"1183.57","dur":"5.32","text":"in the &#39;90s in the sales project where you\nhave mixed mode execution, runtime-type feedback"},"1188.89":{"start":"1188.89","dur":"4.95","text":"and all this kind of stuff.\nAnd then they also came up with deoptimization."},"1193.84":{"start":"1193.84","dur":"4.32","text":"So let me try to explain what deoptimization\nis. It is actually very simple."},"1198.16":{"start":"1198.16","dur":"5.38","text":"When you have the optimized code and you have\nactivations on the stack that&#39;s executing"},"1203.54":{"start":"1203.54","dur":"5.28","text":"and you figure out that something is wrong,\nyou need to revert. What you do is you take"},"1208.82":{"start":"1208.82","dur":"7","text":"that optimized activation and convert it into\na series of unoptimized activity on the stack,"},"1217.81":{"start":"1217.81","dur":"6.85","text":"flush the optimized code, and start using\nthe simple code again."},"1224.66":{"start":"1224.66","dur":"4.99","text":"This first appeared commercially in the HotSpot\nJVM. I assume you all know about what that"},"1229.65":{"start":"1229.65","dur":"5.15","text":"is.\nThe other thing we did in V8 to basically"},"1234.80":{"start":"1234.8","dur":"6.68","text":"use all this technology was introducing behind-the-scenes\nclasses. You know that JavaScript is prototype-based,"},"1241.48":{"start":"1241.48","dur":"5.12","text":"but we faked them behind the scenes in event\nclasses. Then you can apply all this technology"},"1246.60":{"start":"1246.6","dur":"7","text":"on the slide, and that made it fast.\nThe garbage collector in V8 is here. It might"},"1257.87":{"start":"1257.87","dur":"5.72","text":"look complicated. We basically have two generations.\nAnd the way it works is, as you are allocating"},"1263.59":{"start":"1263.59","dur":"6.77","text":"optics in your program, we will fill up the\nallocation space. It is called &quot;from&quot; here."},"1270.36":{"start":"1270.36","dur":"5.8","text":"When it is full, we will start a garbage collection\nprocess. And we have a tracing garbage collector."},"1276.16":{"start":"1276.16","dur":"4.49","text":"That means that we have well-defined routes,\nand we start following these routes through"},"1280.65":{"start":"1280.65","dur":"7","text":"the optics, through its references until we\nhave computed the complete live optigraph."},"1288.24":{"start":"1288.24","dur":"5.49","text":"And memory that&#39;s not occupied by the live\noptigraph is garbage, and it can be reclaimed"},"1293.73":{"start":"1293.73","dur":"4.44","text":"and used for further objects.\nLet&#39;s see what happens when you do a use-space"},"1298.17":{"start":"1298.17","dur":"7","text":"collection in V8. We migrate the optics to\nthe &quot;to&quot; space. And you can see it is smaller,"},"1307.44":{"start":"1307.44","dur":"4.38","text":"and that is because most optics die young.\nAnd this is great."},"1311.82":{"start":"1311.82","dur":"7","text":"Then we can start allocating and filling up\nthe &quot;to&quot; space and repeat the same story."},"1319.04":{"start":"1319.04","dur":"7","text":"The garbage collector in V8 is a precise garbage\ncollector. It stops the world and processes"},"1326.53":{"start":"1326.53","dur":"6.71","text":"the garbage and then continues on.\nYou can see you have red pointers in the graph."},"1333.24":{"start":"1333.24","dur":"5.59","text":"It denotes that the system has a stop buffer\nthat tracks pointers from old generation to"},"1338.83":{"start":"1338.83","dur":"5.38","text":"the new generation. And you need that if you\nwant to do fast use-space garbage collection."},"1344.21":{"start":"1344.21","dur":"5.35","text":"You don&#39;t have to scan the whole heap in order\nto do a small garbage collection."},"1349.56":{"start":"1349.56","dur":"7","text":"The old space in V8 has been segmented into\nnormal optics. That&#39;s the optics that&#39;s promoted"},"1358.01":{"start":"1358.01","dur":"6.09","text":"from use-space when they have survived for\na while, and then native code where you have"},"1364.10":{"start":"1364.1","dur":"6.29","text":"native instructions, and then a segment where\nyou have atomic data. Atomic data is data"},"1370.39":{"start":"1370.39","dur":"6.21","text":"that does not have pointers out again. So\nit could be typed arrays or double optics,"},"1376.60":{"start":"1376.6","dur":"3.72","text":"something like that. That is easier to handle\nin a separate space because they don&#39;t have"},"1380.32":{"start":"1380.32","dur":"6.58","text":"pointers out.\nAnyways, we didn&#39;t invent that either. Sorry."},"1386.90":{"start":"1386.9","dur":"7","text":"There&#39;s a long history of automatic memory\nmanagement done in Lisp in the &#39;50s. Incremental"},"1394.18":{"start":"1394.18","dur":"5.59","text":"garbage collection done in the &#39;70s in Lisp\nas well. And then you have generational-based"},"1399.77":{"start":"1399.77","dur":"6.47","text":"garbage collection that got invented by the\none guy in the &#39;80s and generationally scavenged"},"1406.24":{"start":"1406.24","dur":"5.08","text":"any use of Smalltalk.\nSo all these techniques for doing garbage"},"1411.32":{"start":"1411.32","dur":"4.65","text":"collection is fairly simple in my mind because\nyou have all the pointers to the optics and"},"1415.97":{"start":"1415.97","dur":"4.56","text":"you can just process them.\nThe hard part is actually dancing with the"},"1420.53":{"start":"1420.53","dur":"7","text":"DOM. And I will try to tell you how that works.\nSo nodes in DOM is going by what we call reference"},"1429.88":{"start":"1429.88","dur":"5.62","text":"counting. Reference counting is a simplistic\ngarbage collection technology that keeps a"},"1435.50":{"start":"1435.5","dur":"7","text":"pointer in each optic that tells how many\npointers point to it. When that pointer goes"},"1442.61":{"start":"1442.61","dur":"5.9","text":"to zero, you can de-allocate the optic.\nThe problem is you don&#39;t know who points to"},"1448.51":{"start":"1448.51","dur":"5.87","text":"it. You just know how many. That means that\nif you want to move the optic memory, you"},"1454.38":{"start":"1454.38","dur":"3.52","text":"cannot do that because you cannot find how\nto point to it."},"1457.90":{"start":"1457.9","dur":"6.77","text":"And another deficiency of that mechanism is\nalso if you have a cycle, which can happen,"},"1464.67":{"start":"1464.67","dur":"7","text":"then it&#39;s a memory leak because you will never\nget down to zero in the reference count."},"1472.23":{"start":"1472.23","dur":"5.1","text":"And the problem is JavaScript V8 has optics\nthat are traced and we have to get all this"},"1477.33":{"start":"1477.33","dur":"7","text":"to work.\nSo, here we go. Bear with me. This is complicated."},"1484.63":{"start":"1484.63","dur":"5.92","text":"On the top you see the DOM. You have two nodes.\nThe first node has a reference count of 1."},"1490.55":{"start":"1490.55","dur":"7","text":"The second one has a count of 2. And you have\nwrapper optics that point to these DOM nodes"},"1497.94":{"start":"1497.94","dur":"7","text":"from beneath, and that is the V8 heap.\nNow, in order to make sure you can collect"},"1506.07":{"start":"1506.07","dur":"4.78","text":"these optics, you have to make tricks. And\nyou can see you have this pairing between"},"1510.85":{"start":"1510.85","dur":"6.58","text":"JavaScript optics and DOM nodes by using repointers.\nSo, in essence, you have a JavaScript wrapper"},"1517.43":{"start":"1517.43","dur":"5.01","text":"that points to a DOM node that in turn points\nto a persistent handle -- that&#39;s the black"},"1522.44":{"start":"1522.44","dur":"5.76","text":"ones -- that, in turn, will use a repointer\npointing back. So it is sort of a semicycle,"},"1528.20":{"start":"1528.2","dur":"7","text":"and you break the cycle by using repointers.\nSo that is simple."},"1535.47":{"start":"1535.47","dur":"5.66","text":"But it gets even more complicated. When V8\nis running out of memory and has to perform"},"1541.13":{"start":"1541.13","dur":"5.91","text":"a garbage collection, it has to call the DOM\nand ask the DOM to group all objects that"},"1547.04":{"start":"1547.04","dur":"6.89","text":"belong together because that&#39;s needed in order\nto only collect -- you basically have to collect"},"1553.93":{"start":"1553.93","dur":"7","text":"all grouped optics at the same time. That&#39;s\nneeded to avoid resurrection of wrapper optics."},"1562.29":{"start":"1562.29","dur":"5.55","text":"That might seem complicated, but it is needed\nbecause if you add a property to one of the"},"1567.84":{"start":"1567.84","dur":"5.42","text":"JavaScript nodes at the bottom and it suddenly\ndisappears and reappears again, the property"},"1573.26":{"start":"1573.26","dur":"6.09","text":"is gone and the application will get a little\nbit confused. So we need to do all this in"},"1579.35":{"start":"1579.35","dur":"7","text":"order to make sure garbage collection works.\nDid we invent this? Actually, that&#39;s the only"},"1587.79":{"start":"1587.79","dur":"7","text":"thing we did. It works. Chrome is great. But\nthat part we are not proud of. It needs a"},"1598.80":{"start":"1598.8","dur":"6.09","text":"lot more work in order to make sure that we\ncan guarantee that all memory is collected"},"1604.89":{"start":"1604.89","dur":"3.88","text":"the right way. But we will get back to this\nlater in this talk, what we are doing about"},"1608.77":{"start":"1608.77","dur":"7","text":"it.\nDoes this mean that V8 is as good as it gets?"},"1617.84":{"start":"1617.84","dur":"4.62","text":"Right? We have taken all these techniques\nfrom the past, advanced codebase techniques"},"1622.46":{"start":"1622.46","dur":"4.65","text":"with hidden classes and sophisticated memory\nmanagement."},"1627.11":{"start":"1627.11","dur":"7","text":"Is this what we have, or do we want more performance?\nWell, from the feedback we&#39;re getting, there&#39;s"},"1634.52":{"start":"1634.52","dur":"7","text":"still a lot of bottlenecks in the browser.\nPerformance is not still at par with real"},"1643.39":{"start":"1643.39","dur":"4.48","text":"languages. You can define what &quot;real&quot; is your\nown way. But I would sort of at least say"},"1647.87":{"start":"1647.87","dur":"7","text":"Java and C# as contenders.\nPerformance is still unpredictable. And you"},"1657.22":{"start":"1657.22","dur":"4.28","text":"can see if you do animation in the browser,\nsometimes you skip frames. And part of it"},"1661.50":{"start":"1661.5","dur":"5.6","text":"is because you do too much compilation. Part\nof it is because you do garbage collections."},"1667.10":{"start":"1667.1","dur":"4.38","text":"Part of it is because you are deoptimized\nbecause suddenly the assumption changed in"},"1671.48":{"start":"1671.48","dur":"4.15","text":"the program.\nAnd in JavaScript, that&#39;s very easy to do"},"1675.63":{"start":"1675.63","dur":"5.92","text":"because just jamming a lot of property on\na hot object, bam, performance changes."},"1681.55":{"start":"1681.55","dur":"5.84","text":"Startup is still slow. And the reason for\nthat is that you still have to read in the"},"1687.39":{"start":"1687.39","dur":"3.22","text":"source code whenever you have to start up\nthe program."},"1690.61":{"start":"1690.61","dur":"7","text":"And, of course, JavaScript is still JavaScript.\nThere&#39;s a lot of implicit conversions of values"},"1698.42":{"start":"1698.42","dur":"7","text":"when you run JavaScript. It is just complicated.\nSo having said that, the V8 project is still"},"1707.47":{"start":"1707.47","dur":"7","text":"doing excellent. They are still improving\nperformance quarter after quarter. But we"},"1714.50":{"start":"1714.5","dur":"7","text":"think that if we really want to push the performance\nto the next level, something else is needed."},"1722.06":{"start":"1722.059","dur":"5.37","text":"Let&#39;s look at performance over time when it\ncomes to V8. This is a graph that shows the"},"1727.43":{"start":"1727.429","dur":"6.761","text":"V8 benchmark score from the different versions\nof Chrome, all the way up to today."},"1734.19":{"start":"1734.19","dur":"7","text":"And it&#39;s gone from 3,800 all the way up to\n14,000. So it certainly has improved a lot."},"1744.63":{"start":"1744.63","dur":"7","text":"So this is great. But there&#39;s a downside.\nHere&#39;s the complexity over time of V8. And"},"1754.13":{"start":"1754.13","dur":"5.71","text":"we measure complexity by number of lines of\ncode in the VM."},"1759.84":{"start":"1759.84","dur":"6.13","text":"When we came out of V8, it was roughly 100,000\nlines of code. Now it&#39;s half a million lines"},"1765.97":{"start":"1765.97","dur":"5.82","text":"of code. And I don&#39;t know -- as a programmer,\nyou know that there&#39;s trouble when it gets"},"1771.79":{"start":"1771.79","dur":"7","text":"so big. It takes way more effort in order\nto improve performance. So we question whether"},"1779.36":{"start":"1779.36","dur":"5.86","text":"that&#39;s possible to get a factor of 2 in V8\nin the near time. You can follow the graph."},"1785.22":{"start":"1785.22","dur":"5.95","text":"Factor of 2 will take a long time, unless\nit is rewritten, of course. This also would"},"1791.17":{"start":"1791.17","dur":"5.66","text":"be a fun project.\n&gt;&gt;Kasper Lund: So we&#39;ve gone through a lot"},"1796.83":{"start":"1796.83","dur":"6.95","text":"of Web technology stuff here and looked into\nhow V8 works and why it is as fast as it is."},"1803.78":{"start":"1803.78","dur":"7","text":"Let&#39;s dive into the Dart side and look at\nhow Dart improves this. So Dart is a simple"},"1812.87":{"start":"1812.87","dur":"5.85","text":"class-based unsurprising programming language.\nIt is designed to be very familiar so that"},"1818.72":{"start":"1818.72","dur":"4.97","text":"Web developers and application developers\ncan pick it up and learn to use it in no time."},"1823.69":{"start":"1823.69","dur":"3.72","text":"We&#39;ve got excellent feedback from users of\nthe system that this really works. You can"},"1827.41":{"start":"1827.41","dur":"5.45","text":"sit down and code in Dart. And within a few\nhours, you feel like you are very productive"},"1832.86":{"start":"1832.86","dur":"6.81","text":"and it actually works out really well.\nTo hit that target of being very familiar,"},"1839.67":{"start":"1839.67","dur":"5.19","text":"we&#39;ve designed it based on principles and\nconcepts found in other languages. So the"},"1844.86":{"start":"1844.86","dur":"4.33","text":"syntax is very much inspired by JavaScript,\nJava, C#, those kind of languages. And we"},"1849.19":{"start":"1849.19","dur":"5.739","text":"get a lot of other value from essentially\nstanding on the shoulders of other good programming"},"1854.93":{"start":"1854.929","dur":"3.75","text":"languages out there and picking the things\nthat we feel are good fits for a language"},"1858.68":{"start":"1858.679","dur":"3.611","text":"that needs to be really efficient and at the\nsame time very productive."},"1862.29":{"start":"1862.29","dur":"4.86","text":"One thing that we&#39;ve added to Dart, which\nis a little bit uncommon is support for optional"},"1867.15":{"start":"1867.15","dur":"4.33","text":"static types. That means that you can write\nstatic-type notations where you want them,"},"1871.48":{"start":"1871.48","dur":"4.26","text":"where you feel like they convey the intent\nthat you want to convey. But you don&#39;t have"},"1875.74":{"start":"1875.74","dur":"4.22","text":"to put them in. The system is very flexible\nthat way. It doesn&#39;t require you, and it is"},"1879.96":{"start":"1879.96","dur":"4.87","text":"a fully dynamically typed system. It is hard\nto describe this in one slide without showing"},"1884.83":{"start":"1884.83","dur":"5.25","text":"some code. So I will use two.\nHere is a little bit of a taste of Dart. I"},"1890.08":{"start":"1890.08","dur":"3.19","text":"don&#39;t know how many of you are familiar with\nDart, tried it out. But for those of you who"},"1893.27":{"start":"1893.27","dur":"3.87","text":"are seeing it for the first time, I hope you\nwill find that this is reasonably readable."},"1897.14":{"start":"1897.14","dur":"6.08","text":"It is a very simple example. It shows that\nall Dart applications start with a main function."},"1903.22":{"start":"1903.22","dur":"4.89","text":"And in this case, I just added a little bit\nof an HTML interaction here. I am creating"},"1908.11":{"start":"1908.11","dur":"6.189","text":"a new button element, adding that to the document\nbody, and giving it a bit of text."},"1914.30":{"start":"1914.299","dur":"4.88","text":"Hopefully, you can read this code if you are\nfamiliar with JavaScript, C#, Java, those"},"1919.18":{"start":"1919.179","dur":"3.351","text":"kind of languages and it doesn&#39;t feel too\nforeign for you. That&#39;s exactly what we wanted"},"1922.53":{"start":"1922.53","dur":"3.32","text":"to try to get at.\nOne thing that might look a little bit different"},"1925.85":{"start":"1925.85","dur":"6.32","text":"here is the import, and it just shows that\nDart has support for modularity. So you can"},"1932.17":{"start":"1932.17","dur":"5.629","text":"import libraries of functionality and code\nand use that. So we do have a namespacing"},"1937.80":{"start":"1937.799","dur":"5.981","text":"mechanism and a way of carving up your application\nin multiple independent bits. So I hope this"},"1943.78":{"start":"1943.78","dur":"6.33","text":"seems reasonably easy to read for you guys.\nI think a good question to ask at this point"},"1950.11":{"start":"1950.11","dur":"5.069","text":"is: What are we trying to achieve with Dart?\nAnd we feel that there is a need for a much"},"1955.18":{"start":"1955.179","dur":"4.831","text":"more scalable development platform for Web\napps. We feel like it is too costly and too"},"1960.01":{"start":"1960.01","dur":"4.57","text":"difficult to write great Web apps. You can\nachieve amazing things on the Web today, but"},"1964.58":{"start":"1964.58","dur":"3.08","text":"you really have to invest a lot of time in\nit. Things are getting better, but we feel"},"1967.66":{"start":"1967.66","dur":"4.05","text":"like we need something like Dart to push the\nlimits of this and make it much, much easier"},"1971.71":{"start":"1971.71","dur":"5.54","text":"to write large, well-functioning applications.\nWe think there is a real need for higher performance"},"1977.25":{"start":"1977.25","dur":"5.679","text":"and much faster startup. And we certainly\nfeel like having predictable performance where"},"1982.93":{"start":"1982.929","dur":"5.741","text":"it&#39;s harder to write applications that really\nperform poorly because of somewhat weird semantics"},"1988.67":{"start":"1988.67","dur":"5.79","text":"in the core of the system that you&#39;re building\non is a must."},"1994.46":{"start":"1994.46","dur":"4.73","text":"Another thing that we consistently hear from\nusers of Dart and other systems is that having"},"1999.19":{"start":"1999.19","dur":"4.609","text":"great toolability, being able to write tools\nand use tools on your codebases for refactoring,"},"2003.80":{"start":"2003.799","dur":"6.391","text":"editing, and just maneuvering around, navigating\nyour code is a great big help. And the static"},"2010.19":{"start":"2010.19","dur":"4.47","text":"types that we have, even though they are optional,\nthey are a big help here, to just document"},"2014.66":{"start":"2014.66","dur":"4.74","text":"your intent of your code and make use of it.\nAnd, finally, I think it is very important"},"2019.40":{"start":"2019.4","dur":"7","text":"for us that we make it easy and nice to use\na set of consistent libraries and make it"},"2026.89":{"start":"2026.89","dur":"4.46","text":"easy for the community to create new libraries\nand share them in the same way. Certainly"},"2031.35":{"start":"2031.35","dur":"4.73","text":"an area where the Web suffered a little bit.\nWe see great things out there written for"},"2036.08":{"start":"2036.08","dur":"3.91","text":"JavaScript, but it is not necessarily trivial\nto make things fit together if you have multiple"},"2039.99":{"start":"2039.99","dur":"3.569","text":"independent pieces of JavaScript functionality\nyou want to bring together. We are trying"},"2043.56":{"start":"2043.559","dur":"3.021","text":"to make that better with Dart, so that&#39;s what\nwe are trying to achieve."},"2046.58":{"start":"2046.58","dur":"6.13","text":"Clearly, we want Dart to be useful in all\nbrowsers, all modern browsers. So we&#39;ve written"},"2052.71":{"start":"2052.71","dur":"5.709","text":"a translator that translates Dart code to\nJavaScript that runs in all modern browsers."},"2058.42":{"start":"2058.419","dur":"3.421","text":"That translator itself is actually written\nin Dart, so we are trying to dogfood our own"},"2061.84":{"start":"2061.84","dur":"4.529","text":"product here. And that has been great experience\nfor us, to write a fairly significant amount"},"2066.37":{"start":"2066.369","dur":"4.941","text":"of code in Dart, translate -- in a translator\nthat translates Dart to JavaScript can actually"},"2071.31":{"start":"2071.31","dur":"5.41","text":"translate itself so you can take that big\npiece of code and translate it to JavaScript"},"2076.72":{"start":"2076.72","dur":"5.37","text":"and then you have a Dart-to-JavaScript translator\nin JavaScript. That&#39;s kind of neat. It runs"},"2082.09":{"start":"2082.09","dur":"5.26","text":"across all modern browsers. That&#39;s a big one\nhere."},"2087.35":{"start":"2087.35","dur":"5.9","text":"So the users that actually try using Dart\nare fairly happy with some of the decisions"},"2093.25":{"start":"2093.25","dur":"7","text":"we&#39;ve made. And Thomas from an Austrian startup,\nBlossom, describes this fairly accurately"},"2100.80":{"start":"2100.8","dur":"4.34","text":"in one of his quotes here. He says that Dart\nis exactly what he needs to be productive"},"2105.14":{"start":"2105.14","dur":"6.02","text":"on the Web. So the feedback that we&#39;re getting\non the productivity gains of using something"},"2111.16":{"start":"2111.16","dur":"2.61","text":"like Dart for your Web applications is very,\nvery positive."},"2113.77":{"start":"2113.77","dur":"6.099","text":"I will let this slide stay up for two more\nseconds so you can read it."},"2119.87":{"start":"2119.869","dur":"7","text":"&gt;&gt;Lars Bak: All right. Well, for me it is\ngood just to have a choice of another system,"},"2132.16":{"start":"2132.16","dur":"5.02","text":"if it fits your needs better.\nBut let&#39;s go a little bit deeper when it comes"},"2137.18":{"start":"2137.18","dur":"7","text":"to performance. I&#39;d like to talk about why\nwe can make Dart faster than JavaScript. In"},"2144.87":{"start":"2144.869","dur":"5.851","text":"some cases, it already is.\nRight. We are VM engineers. We have done that"},"2150.72":{"start":"2150.72","dur":"7","text":"for most of our professional lives. And we\ndesigned Dart to make sure we could optimize"},"2157.87":{"start":"2157.869","dur":"5.541","text":"it. Maybe it is a little bit selfish, but\nit is basically so we can get better performance."},"2163.41":{"start":"2163.41","dur":"6.199","text":"So the language model, the language semantics,\nis very simple in Dart. It has a much simpler"},"2169.61":{"start":"2169.609","dur":"3.451","text":"optic model.\nIt means that when you first have allocated"},"2173.06":{"start":"2173.06","dur":"5.18","text":"an optic with fields, you cannot change it\nafter the allocation point. That&#39;s it. And"},"2178.24":{"start":"2178.24","dur":"4.58","text":"it allows us to have much faster access to\nfields, right? Just like in C# or in Java,"},"2182.82":{"start":"2182.82","dur":"5.25","text":"you can actually access the nth element because\nyou know that that is exactly where the foo"},"2188.07":{"start":"2188.07","dur":"4.5","text":"property is.\nProgrammers are declared so you don&#39;t have"},"2192.57":{"start":"2192.57","dur":"6.76","text":"to run Dart in order to set up the program\nin contrast to JavaScript. That allows us"},"2199.33":{"start":"2199.33","dur":"6.75","text":"to use snapshots for having fast startup of\napplications. We like that feature."},"2206.08":{"start":"2206.08","dur":"6.02","text":"And then we just have fewer special corner\ncases to worry about. As an example of a corner"},"2212.10":{"start":"2212.1","dur":"4.25","text":"case in JavaScript is that, well, you might\nactually like it as a programmer that you"},"2216.35":{"start":"2216.35","dur":"6.14","text":"can call a method with too many parameters\nor too few. Well, this is sort of nice but"},"2222.49":{"start":"2222.49","dur":"4.61","text":"in the implementation, somebody has to figure\nout what you called it with and that costs,"},"2227.10":{"start":"2227.1","dur":"3.93","text":"right? And if you don&#39;t provide enough argument,\nsomebody has to provide them for you, the"},"2231.03":{"start":"2231.03","dur":"6.15","text":"underlying system. And stuff like that makes\nthe code more complicated to generate and"},"2237.18":{"start":"2237.18","dur":"7","text":"the resultant code is also more loaded.\nLet&#39;s give an example. Here I tried to make"},"2244.26":{"start":"2244.26","dur":"5.7","text":"a side-by-side comparison between Dart and\nJavaScript and what code it generates and"},"2249.96":{"start":"2249.96","dur":"6.64","text":"how it works. On the right side, you can see\nthat we have two classes. We have a class"},"2256.60":{"start":"2256.6","dur":"7","text":"A. It has a method called foo. It prints out\nfoo. And then we have a subclass B that inherits"},"2263.78":{"start":"2263.78","dur":"7","text":"from -- or extends A. It has nothing. And\nyou create a new B -- it is called b, lowercase"},"2271.37":{"start":"2271.369","dur":"6.261","text":"b. And the main function on the right, you\ncall foo. Very, very simple. We try to mimic"},"2277.63":{"start":"2277.63","dur":"5.239","text":"the same in JavaScript. You have to go to\nthe left of the screen. The way we model inheritance"},"2282.87":{"start":"2282.869","dur":"6.5","text":"in JavaScript is by using prototypes, so we\nmake a function A. And in the prototype of"},"2289.37":{"start":"2289.369","dur":"4.121","text":"A, we put in the foo function, just like on\nthe right."},"2293.49":{"start":"2293.49","dur":"7","text":"And then we make a function B that calls constructor\nA. And in the B prototype, we don&#39;t do anything."},"2302.24":{"start":"2302.24","dur":"5.85","text":"We just set it to a new A and then we create\na new B and we call B. So it is sort of the"},"2308.09":{"start":"2308.09","dur":"6.69","text":"same. No difference.\nThe problem in JavaScript when it comes to"},"2314.78":{"start":"2314.78","dur":"7","text":"speed is you can actually on the fly change\nthe code. So in the inserter box you can see"},"2322.66":{"start":"2322.66","dur":"5.4","text":"that right there we actually are extending\nthe B pro type with a new foo that prints"},"2328.06":{"start":"2328.06","dur":"6.27","text":"in foo. You can call B foo again. And the\nsemantics is you have to print out new foo"},"2334.33":{"start":"2334.33","dur":"6.789","text":"now. We don&#39;t have that in Dart. We think\nthis is a plus. It is certainly a plus for"},"2341.12":{"start":"2341.119","dur":"7","text":"the implementation. So let&#39;s look at it. B\nis the object created. That&#39;s the object we"},"2348.33":{"start":"2348.33","dur":"6.92","text":"wanted to execute foo on. It points to the\nB prototype in JavaScript that, again, points"},"2355.25":{"start":"2355.25","dur":"6.68","text":"to the A prototype. When you start running\nthe program, you don&#39;t have the middle foo"},"2361.93":{"start":"2361.93","dur":"6.17","text":"so you have to execute the one up in A the\nproblem is, you don&#39;t know if somebody is"},"2368.10":{"start":"2368.1","dur":"7","text":"going to insert a foo going forward. The system\nhas to cope with it. So in V8 you have a choice."},"2375.37":{"start":"2375.369","dur":"5.711","text":"Either you have to always validate. There\nis no foo in the B prototype before you can"},"2381.08":{"start":"2381.08","dur":"7","text":"execute the one up in A. Then it will invalidate\nthe code, how it generated, with these assumptions."},"2394.62":{"start":"2394.619","dur":"6.121","text":"The problem is, the B prototype is an ordinary\nobject. You do not want to put in a general"},"2400.74":{"start":"2400.74","dur":"7","text":"dependency system for normal objects. So in\nDart -- no, sorry, in JavaScript V8, we actually"},"2409.76":{"start":"2409.76","dur":"7","text":"validate that there&#39;s no foo in the middle\nhere before we execute foo in the A prototype."},"2417.67":{"start":"2417.67","dur":"7","text":"That is expensive on the implementation side.\nLet me try to show you what it cost in generator"},"2427.95":{"start":"2427.95","dur":"5.95","text":"code. So given the example we had on the previous\nslide, we now have a small benchmark. It&#39;s"},"2433.90":{"start":"2433.9","dur":"6.65","text":"the micro benchmark. We don&#39;t like them, yes,\nbut I&#39;m trying to make a point here. It&#39;s"},"2440.55":{"start":"2440.55","dur":"7","text":"a loop that just called B.foo repeatedly.\nAnd I warm up that program and I look at what"},"2449.01":{"start":"2449.01","dur":"5.609","text":"the various system generates. On the left\nside, you can see the result of what V8 generates."},"2454.62":{"start":"2454.619","dur":"7","text":"It generates nearly 300 bytes of common code\nand 239 bytes of stop code. The stop code"},"2463.53":{"start":"2463.53","dur":"6.49","text":"is the source. You need in order to optimization,\nif something goes wrong, for instance, you"},"2470.02":{"start":"2470.02","dur":"7","text":"add the extra code in the middle. On the Dart\nside, it&#39;s somewhat simpler. You can see the"},"2477.63":{"start":"2477.63","dur":"7","text":"optimized code here. It&#39;s much smaller. In\nfact, it&#39;s only a third of the V8 code being"},"2485.33":{"start":"2485.33","dur":"5.72","text":"generated. So the simple semantics in the\nprogramming language just makes sense, right?"},"2491.05":{"start":"2491.05","dur":"7","text":"It&#39;s much easier to make fast. Optimizing\na little bit of code is much easier than optimizing"},"2499.28":{"start":"2499.28","dur":"5.78","text":"a big piece of code. Generally, less code\nis great. Better memory performance. You also"},"2505.06":{"start":"2505.06","dur":"7","text":"get predictable performance because you cannot\nchange the code after you start it up. So"},"2512.81":{"start":"2512.81","dur":"5.84","text":"keep it simple. It&#39;s good for us, V8.\n&gt;&gt;Kasper Lund: Hopefully it&#39;s very good for"},"2518.65":{"start":"2518.65","dur":"5.55","text":"application developers that get more predictable\nperformance and just generally better performance."},"2524.20":{"start":"2524.2","dur":"7","text":"So let&#39;s benchmark this thing with a non-micro\nbrashing benchmark suite. To benchmark the"},"2532.44":{"start":"2532.44","dur":"7","text":"Dart VM. We have used multiple. A couple that\nare interesting are Richards and DeltaBlue."},"2545.35":{"start":"2545.349","dur":"5.941","text":"That means that if we make Richards and DeltaBlue\nfaster, it will have an impact on a real web"},"2551.29":{"start":"2551.29","dur":"7","text":"application. So using benchmark that you -- that\nhave proven valuable in the context of other"},"2558.33":{"start":"2558.33","dur":"6.37","text":"languages makes a lot of sense, especially\nif you want to try to bring a new programming"},"2564.70":{"start":"2564.7","dur":"4.08","text":"language implementation to the web and make\nsure it has nice performance properties that"},"2568.78":{"start":"2568.78","dur":"6.81","text":"match existing real languages. So we&#39;ve used\nin the past for self, Strongtalk, V8, and"},"2575.59":{"start":"2575.59","dur":"6.85","text":"now we&#39;re using these two benchmarks for tuning\nDart. It&#39;s important to stress that these"},"2582.44":{"start":"2582.44","dur":"4.679","text":"benchmarks really measure the performance\nof calling methods, memory allocation, and"},"2587.12":{"start":"2587.119","dur":"5.381","text":"all the things applications tend to spend\na lot of time in. So Richards is an interesting"},"2592.50":{"start":"2592.5","dur":"4.16","text":"benchmark. It&#39;s a kernel simulating benchmark\nthat spends a lot of time in calling small"},"2596.66":{"start":"2596.66","dur":"5.63","text":"methods and dispatching between different\nobjects in here. What you see on the graph"},"2602.29":{"start":"2602.29","dur":"7","text":"here is the Dart VM is on the graph. V8 is\nthere and DART to JS, which is the generated"},"2609.84":{"start":"2609.84","dur":"7","text":"code we get from compiling the Richards version\nin Dart to JavaScript with our own Compiler"},"2616.93":{"start":"2616.93","dur":"4.62","text":"and running that on V8. So you have three\ndifferent runtime systems here in play that"},"2621.55":{"start":"2621.55","dur":"5.37","text":"execute the same benchmark. So the Dart VM\nis the fastest, which is a nice thing. You"},"2626.92":{"start":"2626.92","dur":"5.33","text":"can see the V8 performance is getting better\nbut not at the same pace as the Dart VM. Bigger"},"2632.25":{"start":"2632.25","dur":"5.05","text":"is better here. V8 has tuned for this benchmark\nsince its inception. We started out with a"},"2637.30":{"start":"2637.3","dur":"4.59","text":"Richards benchmark and we have achieved a\nlot of really cool speedups on these benchmarks"},"2641.89":{"start":"2641.89","dur":"7","text":"over the years. It means that V8 is fairly\ngood at optimizing for this kind of application"},"2649.38":{"start":"2649.38","dur":"7","text":"code and benchmark. The Dart VM is already\n1.7 times faster than V8 generates way less"},"2657.77":{"start":"2657.77","dur":"5.16","text":"code when running the benchmark and much better\nat executing that kind of code. The Dart to"},"2662.93":{"start":"2662.93","dur":"5.189","text":"JS code is a little bit behind. The handwritten\nversion of JavaScript that we use to tune"},"2668.12":{"start":"2668.119","dur":"5.111","text":"V8 and there&#39;s some extra checks going on\nin there. Something we&#39;re improving over time"},"2673.23":{"start":"2673.23","dur":"5.44","text":"as you can see by the graph. But it&#39;s really\nnice to see that over the last year, we have"},"2678.67":{"start":"2678.67","dur":"5","text":"been able to take the Dart VM from being a\nfairly simple implementation of a fairly simple"},"2683.67":{"start":"2683.67","dur":"6.939","text":"language to being a really efficient implementation\nof a fairly simple language. This also shows"},"2690.61":{"start":"2690.609","dur":"3.75","text":"on the DeltaBlue benchmark numbers. Here the\ndifference is even bigger. It&#39;s a factor of"},"2694.36":{"start":"2694.359","dur":"6.49","text":"2. DeltaBlue is a one-way constraint solver.\nIt spends time in allocating objects, constraints"},"2700.85":{"start":"2700.849","dur":"5.661","text":"and dispatcher on them. Again, it&#39;s a benchmark\nthat has been used for many different languages"},"2706.51":{"start":"2706.51","dur":"5.609","text":"and proven valuable in those context as well.\nIt&#39;s great to see that here the same story"},"2712.12":{"start":"2712.119","dur":"5.121","text":"repeats itself. The Dart VM is just a lot\nfaster than V8. Of course, it&#39;s also faster"},"2717.24":{"start":"2717.24","dur":"5.33","text":"than a version we compiled to JavaScript.\nIt&#39;s interesting to see that the Dart to JS"},"2722.57":{"start":"2722.57","dur":"3.63","text":"numbers here are actually faster than the\nhandwritten JavaScript. So the comparison"},"2726.20":{"start":"2726.2","dur":"7","text":"here is between handwritten JavaScript that\nV8 executes, where we have tried to implement"},"2733.36":{"start":"2733.359","dur":"6.531","text":"DeltaBlue in a reasonable way in JavaScript.\nAnd then the generated code, this is also"},"2739.89":{"start":"2739.89","dur":"4.58","text":"JavaScript, that we compiled from Dart code\nand the reason why it&#39;s a little bit faster"},"2744.47":{"start":"2744.47","dur":"4.879","text":"here is because we can do some analysis while\ncompiling. We can do some inlining to help"},"2749.35":{"start":"2749.349","dur":"6.641","text":"V8 execute this a little bit more quickly.\nWe do expect this to be able to improve the"},"2755.99":{"start":"2755.99","dur":"5.89","text":"quality of the Dart to JS Compiler over time.\nWe&#39;re aiming for trying to be as fast as the"},"2761.88":{"start":"2761.88","dur":"4.89","text":"code you would have written by hand in JavaScript.\nSo but clearly, the Dart VM is faster in this"},"2766.77":{"start":"2766.77","dur":"5.05","text":"kind of thing.\nIt&#39;s important to stress that performance"},"2771.82":{"start":"2771.82","dur":"4.39","text":"is super important to us. It really, really\nmatters that you get a really scalable application"},"2776.21":{"start":"2776.21","dur":"7","text":"platform out of using Dart. Having said that,\nI think it&#39;s important to point to the fact"},"2783.36":{"start":"2783.359","dur":"4","text":"that users of Dart are really finding that\nin addition to getting good performance, they"},"2787.36":{"start":"2787.359","dur":"7","text":"also feel that their productivity increased.\nAli has written a really large font atlas"},"2795.04":{"start":"2795.04","dur":"7","text":"generation tool, Glyph3D. We get this feedback\nfairly consistently, that people that use"},"2802.71":{"start":"2802.71","dur":"4.08","text":"Dart for building bigger things are very,\nvery happy with it."},"2806.79":{"start":"2806.79","dur":"7","text":"&gt;&gt;Lars Bak: Thank you. Just to follow up on\nwhat Kasper said, performance is fantastic"},"2817.93":{"start":"2817.93","dur":"5.35","text":"in Dart right now and it&#39;s getting better\nover time. We have seen on the web the last"},"2823.28":{"start":"2823.28","dur":"5.86","text":"few weeks some examples where Dart is out\nperforming Java. We are super excited about"},"2829.14":{"start":"2829.14","dur":"7","text":"that. We hope to get up to that level for\nalmost all applications basically."},"2836.15":{"start":"2836.15","dur":"7","text":"So the ultimate goal is to get the Dart VM\ninto Chrome. I hope you all agree. Exactly."},"2848.41":{"start":"2848.41","dur":"1.47","text":"At least one.\n[ Laughter ]"},"2849.88":{"start":"2849.88","dur":"6.43","text":"But we have a little bit of a problem here.\nI sort of mentioned that the garbage collection"},"2856.31":{"start":"2856.31","dur":"4.69","text":"is story where the DOM was a little bit complicated\nwith these reference counts and stuff like"},"2861.00":{"start":"2861","dur":"7","text":"that. And putting Dart VM into the pit doesn&#39;t\nmake it easier. And we cannot convince ourselves"},"2869.98":{"start":"2869.98","dur":"7","text":"with reference counting that we can reclaim\nall unused cycles or memory data structures"},"2877.96":{"start":"2877.96","dur":"7","text":"in the browser. That means memory leaks. We\nreally do not want that. So that&#39;s a problem."},"2885.03":{"start":"2885.03","dur":"5.18","text":"But we like to do something about it. The\nohm way we can make sure that we do something"},"2890.21":{"start":"2890.21","dur":"6.8","text":"about it is to actually change the reference\ncounted nature of the DOM. And we create a"},"2897.01":{"start":"2897.01","dur":"7","text":"new project, started last month. It&#39;s called\nOilpan. It makes sure that it handles garbage"},"2904.72":{"start":"2904.72","dur":"5.53","text":"collection between the difference segments\ninside Chrome and Blink. Which is JavaScript,"},"2910.25":{"start":"2910.25","dur":"7","text":"DOM, eventually Dart. We want to convert the\nreference count in DOM into being traced so"},"2920.03":{"start":"2920.03","dur":"5.35","text":"we can trace through JavaScript ons, through\nDOM nodes and through Dart nodes and make"},"2925.38":{"start":"2925.38","dur":"6.5","text":"sure we know what we have. The cool thing\nabout tracing is you can find all pointers"},"2931.88":{"start":"2931.88","dur":"5.37","text":"that point to an object. That means you can\nmove the object if you choose to do so. You"},"2937.25":{"start":"2937.25","dur":"7","text":"can even do [indiscernible] and start from\nthat point on. And if you are really brave,"},"2950.64":{"start":"2950.64","dur":"6.36","text":"we can start doing concurrent manipulation\nof the DOM. So we hope this is all appealing"},"2957.00":{"start":"2957","dur":"5","text":"for us guys because it basically means we\nget a much faster browser out of it and a"},"2962.00":{"start":"2962","dur":"7","text":"browser use less memory. One thing about the\ncon currency when you have reference counting"},"2969.82":{"start":"2969.82","dur":"5.43","text":"in the objects, you actually have to put in\na lock around it if you do concurrent access."},"2975.25":{"start":"2975.25","dur":"5.99","text":"That&#39;s expensive. When you get a pointer to\nan object, you have to lock, increment the"},"2981.24":{"start":"2981.24","dur":"3.93","text":"pointer, unlock again. That&#39;s not practical\nwhen using reference counting. We can do all"},"2985.17":{"start":"2985.17","dur":"7","text":"this if unify the memory manager for playing.\nWe are excited about this project."},"2992.50":{"start":"2992.5","dur":"6.72","text":"&gt;&gt;Kasper Lund: We feel like no presentation\nis really done without a demo of some sort."},"2999.22":{"start":"2999.22","dur":"6.66","text":"So lately we have been working on making Dart\neven faster. No surprise there. A lot of modern"},"3005.88":{"start":"3005.88","dur":"4.78","text":"CPUs today support what is known as SIMD,\nsingle instruction multi-data instructions,"},"3010.66":{"start":"3010.66","dur":"6.32","text":"where you have instructions on the CPU that\ncan operate on four floating point values"},"3016.98":{"start":"3016.98","dur":"4.82","text":"in parallel making it much, much faster. So\nthe Dart VM has been enhanced for support"},"3021.80":{"start":"3021.8","dur":"5.299","text":"for using those instructions and no other\nweb language has the support yet. It&#39;s very"},"3027.10":{"start":"3027.099","dur":"5.581","text":"nice to see this in action in a browser, just\nmaking things faster. It&#39;s really useful for"},"3032.68":{"start":"3032.68","dur":"6.34","text":"3D calculations, image processing, audio processing.\nWe would like to show you a little demo of"},"3039.02":{"start":"3039.02","dur":"6.819","text":"Google Chrome with the Dart VM put in there\nrunning a 3D animation thing with and without"},"3045.84":{"start":"3045.839","dur":"5.041","text":"the SIMD support to show you the significance\nof this kind of work. So let&#39;s switch to the"},"3050.88":{"start":"3050.88","dur":"7","text":"other.\n&gt;&gt;Lars Bak: So here we are running Dart VM"},"3061.96":{"start":"3061.96","dur":"7","text":"with a Blink with Dart VM. We have a bunch\nof monsters. They all handle inside Dart."},"3069.55":{"start":"3069.55","dur":"5.61","text":"So that means that the animation, the skeleton\npositions and all that is happening inside"},"3075.16":{"start":"3075.16","dur":"7","text":"Dart. It&#39;s not on the GPU. And this is the\n-- somebody is beeping. This benchmark has"},"3085.50":{"start":"3085.5","dur":"6.17","text":"been created so it is trying to always have\n60 frames per second. If it runs too fast,"},"3091.67":{"start":"3091.67","dur":"7","text":"it will throw in more monsters. We have 34.\nWe can turn it on with using a flag down here."},"3105.88":{"start":"3105.88","dur":"7","text":"Let&#39;s try it. SIMD. So this is using SIMD\nin animation in Dart."},"3120.97":{"start":"3120.97","dur":"4.42","text":"[ Applause ]\nSo a factor of three and a half is not too"},"3125.39":{"start":"3125.39","dur":"7","text":"bad, I guess. I&#39;m really excited about this\nand it actually gives you a lot more power"},"3132.43":{"start":"3132.43","dur":"7","text":"to do computation inside JavaScript. So this\nis coming to you and I&#39;m excited."},"3140.04":{"start":"3140.04","dur":"7","text":"&gt;&gt;Kasper Lund: So let&#39;s conclude this presentation\nso we have time for some questions. So we"},"3153.33":{"start":"3153.33","dur":"6.34","text":"are VM guys. We want to have a job moving\nforward. We think performance is always interesting."},"3159.67":{"start":"3159.67","dur":"6.54","text":"I hope you like that, too. And we hope we\nhave convinced you that if you really want"},"3166.21":{"start":"3166.21","dur":"7","text":"to spark more performance into the browser,\nwe need probably a different option than JavaScript."},"3173.28":{"start":"3173.28","dur":"7","text":"I think Dart is one contender for that. The\nDart VM is already faster than JavaScript"},"3181.88":{"start":"3181.88","dur":"6.62","text":"and is approaching other programming languages\nout there. Again, just to point it out again"},"3188.50":{"start":"3188.5","dur":"5.04","text":"that higher performance is great for application\ndevelopers. That&#39;s where you actually can"},"3193.54":{"start":"3193.54","dur":"7","text":"get head room to do more interesting stuff.\nRight now, the core Dart platform is stable."},"3201.26":{"start":"3201.26","dur":"7","text":"We will start using the SDK. That doesn&#39;t\nmean it&#39;s inside Chrome. After we send out"},"3209.48":{"start":"3209.48","dur":"7","text":"1.0, that will be our main focus. Right now\nyou can see people on the web using Dart."},"3216.76":{"start":"3216.76","dur":"6.66","text":"Some have written fairly large bodies of code\nand they are happy with it. And inside Google"},"3223.42":{"start":"3223.42","dur":"6.15","text":"people have started using it. There&#39;s critical\nprojects start using Dart, hopefully we will"},"3229.57":{"start":"3229.57","dur":"6.46","text":"see some of these applications coming to you\nsoon. This will conclude our presentation."},"3236.03":{"start":"3236.03","dur":"5.69","text":"We should go to questions.\n[ Applause ]"},"3241.72":{"start":"3241.72","dur":"7","text":"&gt;&gt;Kasper Lund: If we are unable to answer\nyour questions here. We have other Dart questions"},"3253.92":{"start":"3253.92","dur":"5.04","text":"at Google I\/O today. So if you have found\nthis inspiring and you want to see more on"},"3258.96":{"start":"3258.96","dur":"5.52","text":"more specific details, here&#39;s a list of things\nin room -- mostly in room 6, I guess, where"},"3264.48":{"start":"3264.48","dur":"3.58","text":"you can see other Dart presentations here.\nYes?"},"3268.06":{"start":"3268.06","dur":"5.87","text":"&gt;&gt;Lars Bak: Let&#39;s get the first question.\n&gt;&gt;&gt; My question is slightly related to that"},"3273.93":{"start":"3273.93","dur":"5.63","text":"first one, coming from a GWT development background,\nwondering if you have done any benchmarks"},"3279.56":{"start":"3279.56","dur":"6.61","text":"in comparison from the Dart to JavaScript\nCompiler to the Java to JavaScript Compiler."},"3286.17":{"start":"3286.17","dur":"7","text":"&gt;&gt;Lars Bak: I don&#39;t have any numbers for you.\nIt is easy to try out. DeltaBlue, it is free"},"3294.77":{"start":"3294.77","dur":"7","text":"to try out for yourself. One thing I would\nlike to see is that we are trying to go beyond"},"3308.12":{"start":"3308.119","dur":"7","text":"grit in that we are doing a native Dart VM\nthat can boost performance and reduce startup"},"3315.50":{"start":"3315.5","dur":"5.27","text":"time. This is really what we want to get at.\nEspecially for mobile platforms where loading"},"3320.77":{"start":"3320.77","dur":"5.7","text":"an application can be a dog and take many\nresources. Faster VM, faster startup means"},"3326.47":{"start":"3326.47","dur":"6.67","text":"less battery. Next question, please.\n&gt;&gt;&gt; Hi. Have there been discussions of including"},"3333.14":{"start":"3333.14","dur":"6.229","text":"Dart in other browsers and if not, would it\nbe possible to add it through plug-ins?"},"3339.37":{"start":"3339.369","dur":"7","text":"&gt;&gt;Lars Bak: It will be fantastic to have all\nbrowsers using Dart. Clearly people have strong"},"3351.51":{"start":"3351.51","dur":"3.92","text":"opinions when it comes to programming languages.\nI don&#39;t really understand why but that&#39;s how"},"3355.43":{"start":"3355.43","dur":"2.57","text":"it is.\n[ Laughter ]"},"3358.00":{"start":"3358","dur":"5.349","text":"I just want to make sure that people the right\ntools to build the applications with. Our"},"3363.35":{"start":"3363.349","dur":"5.051","text":"system is completely open source. It has a\nwell-defined API. So when other browsers think"},"3368.40":{"start":"3368.4","dur":"4.56","text":"that this extra boost of performance will\nbe good for them, they can take it up and"},"3372.96":{"start":"3372.96","dur":"4.61","text":"we will be happy to help them out, basically.\nSo we are open for collaboration."},"3377.57":{"start":"3377.57","dur":"6.21","text":"&gt;&gt;Kasper Lund: We have a few questions from\nour online audience and maybe just try to"},"3383.78":{"start":"3383.78","dur":"4.52","text":"answer a few of them as well. I can cover\nthe second one. I think you covered the grit"},"3388.30":{"start":"3388.3","dur":"5.92","text":"question already. This question is about Android\nstudio. And if we are planning on releasing"},"3394.22":{"start":"3394.22","dur":"5.399","text":"something similar for Dart. In a sense we\nalready are releasing something similar for"},"3399.62":{"start":"3399.619","dur":"6.131","text":"Dart. We have a fully-featured Dart editor.\nBut in addition to that, and maybe this is"},"3405.75":{"start":"3405.75","dur":"3.829","text":"what the question is really about, we do have\nsupport for using and working with Dart from"},"3409.58":{"start":"3409.579","dur":"6.921","text":"IntelliJ. It is here. If you are interested\nin this kind of thing, definitely come talk"},"3416.50":{"start":"3416.5","dur":"5.119","text":"to them at the booth. So the short answer\nis really that we are looking into releasing"},"3421.62":{"start":"3421.619","dur":"4.48","text":"all sorts of nice tools for Dart being based\nboth on Eclipse and IntelliJ. Definitely."},"3426.10":{"start":"3426.099","dur":"3.351","text":"&gt;&gt;Lars Bak: Let&#39;s take the next question from\nthe audience."},"3429.45":{"start":"3429.45","dur":"6.379","text":"&gt;&gt;&gt; Hi. I have a bit of long -- seemingly\nlongstanding wisdom I got a few years ago"},"3435.83":{"start":"3435.829","dur":"5.25","text":"that occurs to me might be out of date which\nis the idea -- this is about V8, that JavaScript"},"3441.08":{"start":"3441.079","dur":"5.331","text":"objects are going to be more performant if\nyou define prototype rather than defining"},"3446.41":{"start":"3446.41","dur":"5.949","text":"methods dynamically in a constructor. It occurs\nto me with hidden, you have optimized it so"},"3452.36":{"start":"3452.359","dur":"6.951","text":"it wouldn&#39;t make a difference.\n&gt;&gt;Lars Bak: We certainly try to. We tried"},"3459.31":{"start":"3459.31","dur":"6.92","text":"very hard to optimize in V8. But it&#39;s still\nthe case that you have to create a new class"},"3466.23":{"start":"3466.23","dur":"6.69","text":"whenever you add a property in a way you haven&#39;t\nseen before. So you get a forest of classes"},"3472.92":{"start":"3472.92","dur":"6.96","text":"even for the same constructor. And in Dart,\nyou only have one format for one class whereas"},"3479.88":{"start":"3479.88","dur":"6.28","text":"in V8, right, depending on how you add properties\nto an object from a given constructor, you"},"3486.16":{"start":"3486.16","dur":"4.76","text":"can get a sea of them. We have to cut off\nat some point. We have limits inside V8. When"},"3490.92":{"start":"3490.92","dur":"5.629","text":"you reach a certain number of hidden classes\nfor constructer. We say, we actually just"},"3496.55":{"start":"3496.549","dur":"7","text":"-- we de-optimize now and we make sure that\nobjects will only be treated as maps and get"},"3504.37":{"start":"3504.369","dur":"2.641","text":"slow.\n&gt;&gt;&gt; So is it true that, then, prototype would"},"3507.01":{"start":"3507.01","dur":"5.93","text":"be more performant in V8 than using construct-defining\nproperties, even if you define them the same"},"3512.94":{"start":"3512.94","dur":"4.03","text":"way every time in constructor.\n&gt;&gt;Lars Bak: I think it depends on exactly"},"3516.97":{"start":"3516.97","dur":"4.59","text":"the setup. You can make it so they perform\nexactly the same. It really depends on how"},"3521.56":{"start":"3521.56","dur":"4.82","text":"the application adds properties to your object\non the fly."},"3526.38":{"start":"3526.38","dur":"6.209","text":"&gt;&gt;Kasper Lund: Little bit of explanation.\nV8 does try to move functions to the class"},"3532.59":{"start":"3532.589","dur":"4.431","text":"side so to share them behind the scenes anyway.\nSo you can say adding on the objects is sort"},"3537.02":{"start":"3537.02","dur":"5.05","text":"of optimize too, but it really depends on\nthe application if it makes a difference."},"3542.07":{"start":"3542.07","dur":"4.549","text":"&gt;&gt;Lars Bak: Next question.\n&gt;&gt;&gt; One of the arguments for no JS is that"},"3546.62":{"start":"3546.619","dur":"4.591","text":"you have JavaScript everywhere, service side\neven. Are you looking at Dart service side"},"3551.21":{"start":"3551.21","dur":"5.35","text":"or is there more momentum behind go.\n&gt;&gt;Lars Bak: That&#39;s a great question. Of course,"},"3556.56":{"start":"3556.56","dur":"7","text":"we have that. So we have a service side library\nyou can use. You can use the Dart VM stand"},"3565.64":{"start":"3565.64","dur":"5.28","text":"alone if you want to. You can use the same\nkind of ace synchronize size style as you"},"3570.92":{"start":"3570.92","dur":"7","text":"do in no JS. You saw the performance numbers\non the slide. This is a performance measurement"},"3578.80":{"start":"3578.8","dur":"6.5","text":"system we are using internally, all written\nin Dart. It controls a lot of machines at"},"3585.30":{"start":"3585.3","dur":"7","text":"the same time we use exactly that server side\nsystem. So, yes, we have a libraries for supporting"},"3594.45":{"start":"3594.45","dur":"5.74","text":"service side Dart execution but our main focus\nright now is the client side and getting it"},"3600.19":{"start":"3600.19","dur":"2.34","text":"to Chrome.\n&gt;&gt;Kasper Lund: I think we have time for one"},"3602.53":{"start":"3602.53","dur":"5.809","text":"more question. If you have more questions,\nthe large line, it will be at the office hours"},"3608.34":{"start":"3608.339","dur":"5.831","text":"booth so come to us and ask those questions\nthere. But let&#39;s take the final question."},"3614.17":{"start":"3614.17","dur":"5.12","text":"&gt;&gt;&gt; My question is there&#39;s a lot of JavaScript\ncode already there. Is there a tool, or even"},"3619.29":{"start":"3619.29","dur":"3.079","text":"if it is possible, to convert JavaScript into\nDart."},"3622.37":{"start":"3622.369","dur":"5.571","text":"&gt;&gt;Kasper Lund: Generally we find that people\nthat try to rewrite existing code basis from"},"3627.94":{"start":"3627.94","dur":"4.32","text":"JavaScript or from other languages to Dart\nare generally fairly successful. It&#39;s also"},"3632.26":{"start":"3632.26","dur":"4.68","text":"possible to use the JavaScript code from Dart\nby wrapping it a little bit and using what"},"3636.94":{"start":"3636.94","dur":"6.32","text":"we called JavaScript interrupt. But generally\ntranslating from JavaScript, unless you use"},"3643.26":{"start":"3643.26","dur":"5.55","text":"very, very dynamic features of JavaScript\na lot, it&#39;s actually recently easy. A lot"},"3648.81":{"start":"3648.81","dur":"3.15","text":"of people have good success with that.\n&gt;&gt;&gt; You guys have a tool."},"3651.96":{"start":"3651.96","dur":"5.899","text":"&gt;&gt;Kasper Lund: There is no tool, no.\n&gt;&gt;Lars Bak: Thank you very much."},"3657.86":{"start":"3657.859","dur":"0.271","text":"[ Applause ]"}}