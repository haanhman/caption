{"0":{"dur":6,"text":">>Let's continue our study as classes as a\ncontract by looking at the game Frogger. Here's"},"6":{"dur":5,"text":"our problem statement: let's consider the\ndesign of some classes we could use to implement"},"11":{"dur":5,"text":"the arcade game Frogger. Here's a free version\nof Frogger to play if you're not familiar"},"16":{"dur":7,"text":"with the game. Wikipedia also has a good description\nof the Frogger game online. Now our Frogger"},"24":{"dur":6,"text":"is going to have to be simple. We'll have\none frog, one truck for each line for a total"},"31":{"dur":5,"text":"of five trucks, and a grid that we're going\nto use to display Frogger and the trucks on"},"36":{"dur":5,"text":"the console. When we go to assemble these\nthings we need to think about what classes"},"41":{"dur":5,"text":"we're going to need and what a class really\nmeans. So classes describe the state and the"},"47":{"dur":6,"text":"behavior of objects. Data are used to describe\nthe state, methods are used to describe the"},"54":{"dur":5,"text":"behavior. And you can think about the behavior\nas being which changes in state are permitted."},"60":{"dur":5,"text":"So for example, illegal change of state for\nthe frog would be making it jump to the left"},"65":{"dur":5,"text":"or making it jump up or down. The frog isn't\nallowed to jump on the diagonal, that's a"},"70":{"dur":6,"text":"change in state that isn't allowed. It's really\nimportant to have a personal prototype for"},"77":{"dur":7,"text":"subtle concepts like classes. Now this could\nbe the ArrayList, the String, or the StringBuilder,"},"84":{"dur":4,"text":"but maybe one of the classes that we described\ntoday will become your favorite prototype."},"89":{"dur":4,"text":"Whichever one you choose isn't so important\nbut it is important that you have a model"},"93":{"dur":4,"text":"to use for other classes that we're going\nto develop as we go along. Classes will eventually"},"98":{"dur":5,"text":"make a lot of sense, but at first a lot of\npeople find them confusing. So let's talk"},"103":{"dur":6,"text":"about the frog class a little bit. Each frog\nneeds to know where it is that is its position"},"110":{"dur":6,"text":"on the board and it needs to have a symbol\nto use to represent it, and that's really"},"116":{"dur":6,"text":"all there is to the state of the frog in this\ngame. Now we need to have a way of expressing"},"122":{"dur":5,"text":"our designs so that we can look at them without\nhaving to read a bunch code. And something"},"128":{"dur":6,"text":"called UML is what we use for it. UML stands\nfor the Unified Modeling Language. There are"},"134":{"dur":4,"text":"actually 12 different types of diagrams that\nare available. We're only going to use one"},"139":{"dur":5,"text":"type for this semester. As you advance in\nobject-oriented programming you will learn"},"144":{"dur":6,"text":"these other types-- at least some of them.\nSo what class diagrams do is they describe"},"150":{"dur":5,"text":"classes before implementation. Now it's really\nimportant to describe them before you implement"},"156":{"dur":5,"text":"them, because that's when you can have the\nreally deep discussions about how the classes"},"161":{"dur":4,"text":"should be designed. If you wait until after\nthings are implemented, everybody gets very"},"165":{"dur":4,"text":"attached to their implementation and nobody\nwants to go back and rework things even if"},"170":{"dur":4,"text":"it isn't a very good design. Now it does take\na lot of discipline to design things before"},"175":{"dur":4,"text":"you implement them but it's a very important\ndiscipline to develop, because that's what"},"179":{"dur":6,"text":"a professional Software Engineer will need.\nThere are three sections in a class diagram:"},"186":{"dur":5,"text":"the top section is the class name, the middle\nsection is the data, and that's what describes"},"191":{"dur":5,"text":"the state of the objects, and the bottom section\ndescribes the methods, that is the behavior"},"196":{"dur":6,"text":"of the objects. UML allows a lot of flexibility,\nso it's legal in UML to have a class diagram"},"203":{"dur":5,"text":"that only has the class name in it or has\njust the class name and the data. You're allowed"},"208":{"dur":6,"text":"to fit it to the circumstances that you need\nin the design. So we'll do a lot of that."},"214":{"dur":5,"text":"So here are the rules for UML. It's designed\nto be a single modeling tool for all object-oriented"},"220":{"dur":6,"text":"languages. In other words this isn't something\nthat's specific to Java. So it avoids any"},"227":{"dur":7,"text":"Java specific syntax. Now that can be kind\nof annoying. Here's the syntax it uses: for"},"234":{"dur":5,"text":"data it puts the name first and then a colon\nand then the type, and for methods it puts"},"240":{"dur":5,"text":"the name of the method and then it puts the\nparameters in parentheses, again, the name"},"245":{"dur":7,"text":"first and then a colon and then a type separated\nby commas then after the parameters you close"},"252":{"dur":4,"text":"the parentheses, put a colon and the return\ntype. Now to tell you the truth, although"},"256":{"dur":5,"text":"this is correct UML, I don't really care so\nmuch that you do it this way. I care very"},"262":{"dur":5,"text":"deeply that you do design because that's something\nthat's a critical skill. These little nuances"},"267":{"dur":7,"text":"in UML, these aren't so important. Now formally\nUML doesn't show constructors, but I usually"},"275":{"dur":4,"text":"do. And the reason is that I've found that\nif I don't show constructors my students forget"},"279":{"dur":4,"text":"to write them. That's a problem because classes\nwithout constructors usually don't work the"},"284":{"dur":7,"text":"way they should. Here's our first UML for\nthe frog class. So I have frog which is the"},"291":{"dur":5,"text":"name of the class on the top and then I have\nthe state, which is the row and the column"},"296":{"dur":4,"text":"where the frog is going to be located and\nthe symbol that's going to be used to describe"},"301":{"dur":7,"text":"the frog on the game board. Now we might do\na little more thinking about our design here."},"308":{"dur":6,"text":"There are some things that are shared amongst\nall the frog objects. For example, the symbol."},"315":{"dur":3,"text":"If we're going to use an asterix to represent\nour frogs we're going to use it for all of"},"318":{"dur":7,"text":"the frogs and so it doesn't make sense to\nsave a separate copy to every single instance."},"326":{"dur":5,"text":"Remember that constants are almost always\nclass data. Think back to things like math.pi"},"331":{"dur":7,"text":"or math.e. Now in UML class data is underlined,\nbut there's no UML symbol for a constant."},"341":{"dur":5,"text":"So what I use for that is all caps. Now again\nthis isn't formal UML. This is a trick that"},"346":{"dur":5,"text":"I use using one of the Java code conventions\nto communicate something that isn't usually"},"351":{"dur":7,"text":"communicated by UML. So this is what our class\ndesign looks like now. Again, it's the frog"},"359":{"dur":6,"text":"class. The row and the column those are instance\ndata. Every object will have its own row and"},"365":{"dur":6,"text":"it's own column, but symbol, that should be\nthe same for all of the objects in the class."},"371":{"dur":7,"text":"That's class data and that's why it's underlined.\nNow our frog class behavior is pretty simple."},"380":{"dur":5,"text":"It can jump to the same column in the next\nto the previous row, so that would be a method"},"385":{"dur":7,"text":"move up and move down, or it can jump to the\nright or left within a row. That is move left"},"393":{"dur":7,"text":"or move right. Now that we have this method,\nwe can see the complete UML for our frog class."},"401":{"dur":5,"text":"The data is the row and the column, both of\nthose are integers and the class data is the"},"406":{"dur":5,"text":"symbol that's shared amongst all the frogs.\nThen we have our constructor that constructs"},"411":{"dur":6,"text":"the frog in a given row and column and we\ncan move up, move down, move left, move right."},"418":{"dur":4,"text":"Now none of those methods have any parameters,\nbecause they're relative to the current position"},"422":{"dur":6,"text":"of the frog. Remember you can't have the frog\njust jump randomly across the board. He has"},"429":{"dur":7,"text":"to move logically from one position to another.\nNow it's time to implement the frog class."},"436":{"dur":5,"text":"So we're going to create a new class in Eclipse.\nNow the data goes inside the class but outside"},"441":{"dur":7,"text":"of all of the methods. The class data will\nbe static and the instance data is not. So"},"448":{"dur":7,"text":"here's Eclipse. I'm going to create a new\nclass which is called frog. I'm not actually"},"466":{"dur":4,"text":"going to put Javadoc in the class while you\nwatch because it's a little too time consuming,"},"471":{"dur":4,"text":"but that is something you would normally do.\nNow there's a lot of discussion in programming"},"475":{"dur":3,"text":"circles about whether instance data should\ngo at the top of the class or the bottom of"},"479":{"dur":4,"text":"the class. It's not so important which way\nyou choose to do it, but it's very important"},"484":{"dur":4,"text":"that you're consistent in how you do it. So\nI'm going to put the instance data and the"},"489":{"dur":4,"text":"class data up at the top. If you want to put\nit at the bottom that's fine, as long as you"},"493":{"dur":7,"text":"always do it that way. So our instance data\nfor the frog is an integer for the row and"},"501":{"dur":7,"text":"an integer for the column. Our class data\non the other hand, which remember is static"},"513":{"dur":7,"text":"and it's not an int, it's a char. Notice that\nI have our asterisk in single quotes. Remember"},"527":{"dur":5,"text":"this isn't a string, this is just a single\ncharacter. The first thing we should do is"},"533":{"dur":4,"text":"create our constructor. It's a good idea to\ndo the constructor first and to put it at"},"537":{"dur":4,"text":"the top of the class. That's a preference\nof mine, once again you don't have to do things"},"542":{"dur":6,"text":"the way I do them just as long as you keep\nthings organized. So all constructors have"},"548":{"dur":7,"text":"the same name that the class has. Now I used\nr and c for the parameters because row and"},"556":{"dur":7,"text":"column have been used for the instance data,\nand so that will create confusion. So row"},"564":{"dur":6,"text":"will be initialized to r and column will be\ninitialized to c. So what we're doing now"},"571":{"dur":7,"text":"is we're setting the values for all the instance\ndata in the Frogger class. We had only four"},"579":{"dur":7,"text":"methods. We had move left, you'll recall the\nreturn type on that was void. We had move"},"595":{"dur":7,"text":"right, move up, and move down. Now in order\nto know how to change row and column we need"},"613":{"dur":5,"text":"to have a sense of where our coordinate system\nis. So I'm going to assume that row 0 is at"},"618":{"dur":6,"text":"the top of the screen and that row 7, 5 rows\nfor the trucks and a starting and ending row,"},"625":{"dur":5,"text":"are going to be at the bottom. You could make\nother decisions than this. I'm going to assume"},"630":{"dur":6,"text":"that column 0 is on the left and the largest\ncolumn is on the right. So when we move left,"},"636":{"dur":7,"text":"we'll go to column equals column -1. Whereas\nmoving right will be column equals column"},"645":{"dur":7,"text":"+1. When we move up, the row will be row -1\nand when we move down, the row will be row"},"657":{"dur":7,"text":"equals row +1. And that's really all there\nis to the frog class, at least for now. We'll"},"665":{"dur":5,"text":"see some more nuances a little bit later on.\nNow we've got a problem here, because although"},"670":{"dur":6,"text":"we have a class we haven't tested it. And\nthat's always dangerous we know, so one of"},"676":{"dur":5,"text":"the ways we can test it is to put a main program\nin this class, even though this isn't our"},"682":{"dur":7,"text":"main game class. So let's do that. Public\nstatic void main string square brackets args."},"692":{"dur":7,"text":"So we need to create a frog object and construct\nit. So let's put it at position 10, 10. Now"},"703":{"dur":4,"text":"the next thing we need to do is exercise these\nmethods so we can see if the data is being"},"708":{"dur":7,"text":"recorded correctly. So for example, we could\nhave while let's test it 10 times. So we'll"},"719":{"dur":7,"text":"start count of 0, count less than 10. And\nwe could pick a random number, for example"},"730":{"dur":7,"text":"[typing] from math.random. If randis less\nthan .25, let's move right. When we move right"},"752":{"dur":7,"text":"we have to tell it what to move right. So\nour frog is going to have to move right. Now"},"760":{"dur":5,"text":"remember our purpose of doing this is testing.\nSo we need to tell the user where the frog"},"765":{"dur":7,"text":"is and that it's moving right. And so we'll\ntake frog.row and then a space, frog.column."},"790":{"dur":7,"text":"So let's print out where the frog started"},"806":{"dur":7,"text":"and to be consistent maybe we should put a\ncomma in there. Now else if rand is less than"},"819":{"dur":7,"text":".50, we're going to do something similar only\nmaybe we'll move left. The bottom line is"},"829":{"dur":7,"text":"we just want to make sure we try all the different\npossibilities here \nand make sure that our frog is moving around"},"841":{"dur":7,"text":"correctly. Else if rand is less than .75 frog.move\nup \nand system out print line [typing] and I notice"},"876":{"dur":4,"text":"here that I forgot to change this to left.\nThat's going to make it a lot harder to debug"},"881":{"dur":7,"text":"our program if we make mistakes like this.\nAnd our last possibility will be frog.move"},"888":{"dur":7,"text":"down and then system out print line down frog.row\nfrog.col. So you know this isn't a very profound"},"908":{"dur":5,"text":"program, but it is enough for us to see if\nour frog is behaving reasonably. So let's"},"913":{"dur":7,"text":"run it and see if our frog is happy. Okay,\nso our program is going crazy and I'm sure"},"925":{"dur":7,"text":"you've already spotted the reason. I forgot\nto increment count. Okay, so let's try this"},"934":{"dur":7,"text":"again. Okay so it started at 10,10 then it\nwent to the right and notice the row numbers"},"945":{"dur":5,"text":"stayed the same and the column went up by\none. That's correct. It went to the right"},"950":{"dur":6,"text":"again, again the rows stayed the same, the\ncolumn went up by one. When it went down the"},"956":{"dur":5,"text":"row number went up and the column stayed the\nsame. It went down again, the row number stayed"},"962":{"dur":5,"text":"the same and if you follow through this you'll\nsee that our frog is actually working correctly."},"967":{"dur":4,"text":"There's always the temptation to remove this\ndata, to remove this main program from this"},"972":{"dur":4,"text":"class, but it's kind of nice to have these\nthings around. We'll probably going to have"},"976":{"dur":5,"text":"to modify this class later and we might like\nto make sure that it's still working after"},"982":{"dur":5,"text":"we do modifications. So if we find it's getting\nin our way, there are a couple things we can"},"987":{"dur":7,"text":"do. One is called folding where we just take\nit and compress it so that it's not taking"},"995":{"dur":4,"text":"up the whole screen anymore. Another possibility\nif it really starts to cause trouble is to"},"999":{"dur":5,"text":"comment it out, but I usually don't take things\nlike that out because testing code always"},"1005":{"dur":7,"text":"comes back and is useful again later on. So\nwe tested the frog class by putting a main"},"1012":{"dur":4,"text":"program in there. It's not going to be our\ngame, it's only for testing. It's not permanent"},"1017":{"dur":5,"text":"code really and we moved the frog around and\nshowed the location. Now the next thing we"},"1023":{"dur":5,"text":"need to do is design our truck class. Our\ntruck is little bit different. Its state is"},"1028":{"dur":4,"text":"the position on the board which will be the\nrow and column again and whether it moves"},"1033":{"dur":4,"text":"right or left. Remember that in Frogger once\na truck starts moving in one direction it"},"1038":{"dur":4,"text":"keeps moving in that direction. As far as\nour behavior, the behavior's actually really"},"1043":{"dur":5,"text":"simple. It just needs to move. Now eventually\nwhen we get to the game we may want to do"},"1048":{"dur":4,"text":"something like wraparound, so that when the\ntruck goes off one edge it comes onto the"},"1052":{"dur":5,"text":"other edge, but for right now we really don't\nneed to do that. All we need to do is keep"},"1058":{"dur":6,"text":"track of the position on the board, whether\nit's moving right or left. Here's the UML."},"1065":{"dur":5,"text":"Notice we've got a row. Now I've used 2 columns\nhere. When I was looking at the art on the"},"1070":{"dur":4,"text":"game, the trucks looked better if they were\na little bit bigger than the frog and so I"},"1075":{"dur":4,"text":"made them sit on two consecutive columns,\nthe right column and the left column in a"},"1080":{"dur":6,"text":"given row. That's an artistic choice you might\nwant to do that differently. I also needed"},"1086":{"dur":4,"text":"to keep track of whether they were going to\nthe right or going to the left. So that's"},"1090":{"dur":5,"text":"what is right does. Now symbol is different\nin the truck class than it was in the Frogger"},"1095":{"dur":5,"text":"class. All the frogs are going to use the\nsame symbol, but the truck isn't. If the truck"},"1101":{"dur":4,"text":"is going to the right, I'm going to use a\ngreater than sign and if the truck is going"},"1105":{"dur":4,"text":"to the left I'm going to use a less than.\nThis looks kind of cool in the game, so that's"},"1110":{"dur":5,"text":"why I picked those. When we construct a truck\nwe're going to give it a row and a column"},"1115":{"dur":4,"text":"and of course, whether it's moving to the\nright or to the left. Then the only thing"},"1120":{"dur":5,"text":"we have to do is move. Because trucks stay\nin one row only, their column changes when"},"1126":{"dur":5,"text":"they move so this isn't going to be a very\ndifficult class to implement. So we'll create"},"1132":{"dur":7,"text":"a new class which we'll call truck. We put\nour instance data at the top, so we have a"},"1149":{"dur":7,"text":"row and a left column and a right column.\nRemember we had a symbol and we had a Boolean"},"1161":{"dur":3,"text":"for whether it was going to the right or to\nthe left. So we have a little bit more instance"},"1165":{"dur":5,"text":"data here. Now in this case we don't have\nany class data. We don't have to put a comment"},"1171":{"dur":5,"text":"in here showing that it's empty, the user\ncan see that or the programmer can see it."},"1176":{"dur":7,"text":"Next we need to create a constructor. Now\nwe need to give it a row, a column, and a"},"1191":{"dur":6,"text":"Boolean. Now I've done something here that's\nnot always a great idea. I'd used the same"},"1197":{"dur":4,"text":"name for the parameters that I've used for\nthe instance data. Now I will show you how"},"1202":{"dur":5,"text":"to work around it because some people like\nto do it this way, but probably changing the"},"1207":{"dur":7,"text":"names of the parameters would be a good choice.\nHere's how you work around it. When you have"},"1215":{"dur":5,"text":"instance data, there's always an instance\nobject. This is similar to the implicit argument"},"1221":{"dur":5,"text":"that shows up when we're using classes and\nby putting this in front what we're telling"},"1226":{"dur":7,"text":"Java is \"Hey look, use the instance data row\nnot the parameter.\" So leftCol will equal"},"1237":{"dur":7,"text":"Col and rightCol will equal Col +1. Now our\nsymbol on the other hand is going to be set"},"1245":{"dur":7,"text":"based on is right. So let's set is right first.\nYou're welcome to change those parameter names"},"1255":{"dur":5,"text":"when you get your hand on the code if this\nthis thing is bothering you and now we need"},"1260":{"dur":6,"text":"a conditional statement. If is right now because\nI didn't put this in front of it, that means"},"1267":{"dur":7,"text":"I'm using the parameter is right not the instance\ndata. Well if the truck is going to the right"},"1275":{"dur":7,"text":"the symbol we're going to use is a greater\nthan sign. Otherwise the symbol we use is"},"1285":{"dur":5,"text":"a less than sign. Now one of the things you\nwant to do when you finish a constructor is"},"1291":{"dur":5,"text":"make sure that every single piece of instance\ndata has been initialized. So we had five"},"1296":{"dur":7,"text":"pieces of instance data here and all five\nare going to be initialized. That's good programming."},"1304":{"dur":5,"text":"The next thing we have is our move method.\nSo this is our behavior. Now move will mean"},"1309":{"dur":7,"text":"different things if we're going right or left\nso if is right. Now notice I didn't have to"},"1316":{"dur":5,"text":"put this in front of it this time, because\nI don't have a parameter called is right there's"},"1322":{"dur":4,"text":"really no confusion here. You can put this\nin front of it if you wish to but it's not"},"1326":{"dur":7,"text":"necessary. So if we're going to go to the\nright then left column is left column +1 and"},"1340":{"dur":7,"text":"right column equals right column +1. Now we\nwant both of those things done, so remember"},"1347":{"dur":6,"text":"we need to put curly braces around it. Otherwise,\nwell if we're not going right, we're going"},"1354":{"dur":7,"text":"left. So then left column is left column -1\nand right column equals right column -1. We"},"1366":{"dur":3,"text":"don't change the row, we don't change the\nsymbol, and we don't change the direction"},"1370":{"dur":5,"text":"of the trucks. So that's all that has to be\ndone in the move method other than maybe some"},"1375":{"dur":7,"text":"Javadoc. So we've implemented our truck class.\nWe implemented the instance data, the constructors"},"1383":{"dur":5,"text":"and the method, and we could go and write\nanother main program to test the truck class."},"1388":{"dur":4,"text":"Because it's so similar to the frog class\nI'm not going to do that here just to save"},"1392":{"dur":4,"text":"us a little bit of time, but it's always a\ngood idea to test your classes as you're writing"},"1397":{"dur":6,"text":"them. It will really save you a lot of time\nin the long run. So if we were going to test"},"1404":{"dur":5,"text":"the truck class, we'd create a main program,\nwe'd construct a truck, move it repeatedly"},"1409":{"dur":4,"text":"and show the location. In other words we'd\ndo the same things we did in the frog class."},"1414":{"dur":5,"text":"Oh yes! And we would show the symbol too to\nmake sure we've got it going in the right"},"1419":{"dur":6,"text":"direction. Now the last piece that we need\nis our Frogger board. We're only going to"},"1425":{"dur":5,"text":"implement the frog and the vehicles on a very\nsmall board. It's going to be 30 characters"},"1431":{"dur":6,"text":"wide and just 7 rows tall. Now the way I picked\n7 rows is you have 5 truck lanes and then"},"1437":{"dur":5,"text":"a safety zone at the top and the bottom. The\nway I picked 30 characters was just looking"},"1443":{"dur":4,"text":"at sort of the general dimensions to make\nsure it was proportional. You don't want it"},"1447":{"dur":5,"text":"to get too long or to be too short, so those\nlooked okay to me. Now I'm no artist and it's"},"1452":{"dur":4,"text":"a good idea to get people who are artists\ninvolved in these designs because sometimes"},"1456":{"dur":5,"text":"when programmers do art it's not so pretty.\nOne thing we need to think about is why do"},"1462":{"dur":5,"text":"we need a grid at all? Well, we've got a huge\nproblem when we're doing console output, and"},"1467":{"dur":6,"text":"that's we can't backup. So for example if\nwe put the frog in first, we can't go backwards"},"1474":{"dur":4,"text":"to put the trucks over it. So assuming the\nfrog starts at the bottom of the board as"},"1478":{"dur":6,"text":"is typical in Frogger games, we've got a problem.\nSo what we need to do is create a grid that"},"1485":{"dur":6,"text":"stores a map of where everything is located.\nThen we can display the grid. In order to"},"1492":{"dur":5,"text":"display the grid, we need to know how to create\na rectangular group of characters. This is"},"1497":{"dur":4,"text":"something called a two-dimensional array and\nwe haven't done it previously so we need to"},"1501":{"dur":5,"text":"talk about it a little bit. So for each step\nof time what we're going to do is clear the"},"1506":{"dur":5,"text":"grid, then put all the objects in the grid,\nand then display the grid to the user, and"},"1512":{"dur":4,"text":"that we will repeat every single step through\nthe game. Now if you think you know that wouldn't"},"1517":{"dur":4,"text":"it be faster rather than clearing the whole\ngrid to just like erase the current position"},"1522":{"dur":5,"text":"of the frog and draw the frog in a new position?\nYes it would, but the truth is that compared"},"1528":{"dur":4,"text":"to the user input being slow this game is\ngoing to be so fast we're actually going to"},"1533":{"dur":5,"text":"have to end up slowing it down a little bit\njust to make it playable. So there's no reason"},"1538":{"dur":5,"text":"to try to be really efficient, keep it simple.\nKeeping it simple is almost always a good"},"1543":{"dur":7,"text":"programming strategy. If it turns out to be\ntoo inefficient later you can always fix it."},"1550":{"dur":5,"text":"So let's talk a little bit about two-dimensional\narrays. When you construct a two-dimensional"},"1555":{"dur":4,"text":"array, here's the code. Now these are going\nto be two-dimensional arrays of characters"},"1560":{"dur":4,"text":"because that's how we're displaying our game.\nSo you have character square brackets square"},"1565":{"dur":5,"text":"brackets so there's four square brackets there\nand then the name of the array equals new"},"1570":{"dur":5,"text":"character and then you give the number of\nrows first and then the number of columns"},"1576":{"dur":6,"text":"and a semicolon. What that does is create\nsomething that looks like this. Now the light"},"1582":{"dur":5,"text":"gray versus the white, that's just a PowerPoint\nthing. All the cells in the array are the"},"1588":{"dur":7,"text":"same size just like they were in a one-dimensional\narray. The rows are horizontal. So for example"},"1595":{"dur":7,"text":"row 0 goes alllllll the way across. Here's\nrow 1 it's one of the darker gray rows, row"},"1603":{"dur":6,"text":"2 is here. So notice we're zero indexing here.\nThe columns on the other hand are vertical."},"1609":{"dur":7,"text":"So this is column 0. Here is column 1, column\n2. In order to access individual elements"},"1618":{"dur":5,"text":"we used two indices: the left one for the\nrow and the right one for the column. So for"},"1624":{"dur":6,"text":"example the cell I just indicated? That's\nin row1 and column 2. This cell is in row"},"1631":{"dur":7,"text":"3 and column 4, and so that's how we use a\ntwo-dimensional array. Here's a design for"},"1639":{"dur":5,"text":"the grid class. The only instance data we\nneed is the character array, the two-dimensional"},"1645":{"dur":5,"text":"array, but we do need to know the number of\nrows and columns and those are going to be"},"1650":{"dur":5,"text":"constants. We need to construct the grid.\nNow in this case because we know the number"},"1655":{"dur":5,"text":"of rows and columns are constants, we don't\nneed to pass them in as parameters. We need"},"1660":{"dur":4,"text":"to be able to clear the grid. We need to be\nable to show the grid, and we need to be able"},"1665":{"dur":4,"text":"to set it one cell at a time. And those are\nreally the only things that the grid class"},"1670":{"dur":6,"text":"needs to do for now. So let's go write the\ngrid class. Now this is our third class in"},"1676":{"dur":7,"text":"the same project. So we started with our instance\ndata first. Here's our class data: final int"},"1704":{"dur":7,"text":"rows equals 7 and final int cols equals 30.\nAnd remember, class data should always be"},"1716":{"dur":6,"text":"static. So that means no matter how many grids\nwe create, there's only going to be one copy"},"1723":{"dur":3,"text":"of rows and columns. Now in this case it's\nnot going to matter because we're only going"},"1727":{"dur":5,"text":"to create one grid, but it's still good to\ncreate these things this way. Later on maybe"},"1732":{"dur":4,"text":"we'll have a multiplayer version or something\nlike that where we want to have multiple grids"},"1737":{"dur":5,"text":"hanging around, and if we do the instance\ndata versus class data correctly at the start"},"1742":{"dur":6,"text":"we won't have to worry about it later. So\nwe need a grid constructor. Remember it had"},"1748":{"dur":5,"text":"no parameters. We have only one piece of instance\ndata and so there's only one thing that needs"},"1754":{"dur":7,"text":"to be allocated - a character array, rows\nand columns. Now remember this is a primitive"},"1772":{"dur":5,"text":"data type not an object, so there's no two\nlayer construction involved in this at all."},"1777":{"dur":7,"text":"In fact that's all there is to the constructor.\nTo clear the grid all we have to do is step"},"1789":{"dur":6,"text":"through the grid one position at a time and\nenter in something that can't be seen. A space"},"1796":{"dur":6,"text":"is a good choice. Now in this particular case\nwe're going to need to use to for loops: one"},"1802":{"dur":6,"text":"for loop will go through the rows and the\nother will go through the columns. So for"},"1809":{"dur":7,"text":"int r is 0 r less than rows ++r, and then\nwe go through the columns inside that loop."},"1825":{"dur":5,"text":"Now this is one of our first nested for loops\nthat we've done. So don't worry too much if"},"1830":{"dur":4,"text":"this doesn't make a lot of sense to you, we'll\ndo lots more nested for loops a little bit"},"1835":{"dur":7,"text":"later. So grid of r c equals the space character\nand that's all there is to clearing the grid."},"1854":{"dur":7,"text":"To display the grid what we're going to do\nis just print it to the screen so once again"},"1861":{"dur":3,"text":"we need a nested loop. And you know it occurs\nto me that by this time in the semester we"},"1865":{"dur":7,"text":"actually have seen nested loops, so these\nshouldn't be completely foreign to you. So"},"1881":{"dur":7,"text":"here are our nested loops going through the\ncolumns one at a time inside the rows. So"},"1892":{"dur":7,"text":"what we're going to do here is system out\nprint grid of r c. Now we don't want to put"},"1905":{"dur":4,"text":"any spaces in here because we're just trying\nto print out the rows of the array, but we"},"1910":{"dur":7,"text":"do need to print a new line every time we\nfinish going through the columns. So that"},"1920":{"dur":7,"text":"will be system out print line with nothing\nafter it. So all of the columns will be printed"},"1928":{"dur":7,"text":"out and then afterwards we'll have a new line,\nand that will take us to the new rows. The"},"1935":{"dur":5,"text":"curly braces here are required. It might not\nbe a bad idea to put another set of curly"},"1941":{"dur":5,"text":"braces in, just to make sure that we support\nthe way this indentation is done. We're going"},"1947":{"dur":4,"text":"to print out the rows one column at a time,\nthen do a print line and that will take us"},"1952":{"dur":5,"text":"to the start of the next row. So there's our\ndisplay method. The only other thing we needed"},"1958":{"dur":5,"text":"to do was to be able to set a value in the\ngrid. So again that's a void return type,"},"1963":{"dur":7,"text":"we called it set grid and we needed to know\nwhich row, which column, and what symbol."},"1977":{"dur":7,"text":"The code here is pretty simple. Grid of row\nr, sort of bugs me that I made one of those"},"1987":{"dur":7,"text":"a single letter variable and the other one\nmultiple letters, so I'm going to change that."},"1996":{"dur":4,"text":"Let's think about this method a little bit.\nIt would be possible that somebody would ask"},"2000":{"dur":5,"text":"us to set a row and column location that isn't\nlegal. And we really don't want to do that"},"2005":{"dur":7,"text":"because if we do it our code will break. What\nwe should do is check and see if 0 is less"},"2016":{"dur":7,"text":"than or equal to r and r is less than rows,\nbecause those are the valid indices for a"},"2026":{"dur":7,"text":"row. Now the other thing we need to check\nis whether columns is legal. So 0 less than"},"2037":{"dur":7,"text":"or equal to c and c is less than columns.\nNow you could check those separately if you"},"2044":{"dur":7,"text":"wanted to. If those two are legal, that's\nwhen we're going to set the grid. Now we have"},"2052":{"dur":4,"text":"to decide what we're going to do if somebody\nmakes an illegal choice. People tend to like"},"2056":{"dur":5,"text":"to do things like system out print line here\nand that's really kind of awkward, although"},"2062":{"dur":5,"text":"for debugging purposes it can be useful because\nwe would not want to set an illegal position"},"2067":{"dur":6,"text":"on the grid. So for now let's put that in\nhere, but we may want to remove it later on."},"2073":{"dur":7,"text":"There are some more elegant solutions to this\nthat you'll learn as you advance in programming."},"2087":{"dur":3,"text":"Usually when you start to debug a program,\nparticularly one that might be a little bit"},"2090":{"dur":6,"text":"bigger like this one might be at the end,\nany help you can get, any way you can make"},"2096":{"dur":7,"text":"your job easier is worth it. So there we have\nour set grid method. Of course all of these"},"2105":{"dur":7,"text":"classes should be Javadoc'd. So when we cleared\nthe array we used a nested for loop. Now let's"},"2114":{"dur":4,"text":"make some observations about what we've done\nso far. We've created three different classes"},"2119":{"dur":4,"text":"that are going to be an integral part of a\nFrogger game. Having more classes actually"},"2124":{"dur":4,"text":"makes programming easier. You've probably\nnoticed that the logic in those three classes"},"2129":{"dur":6,"text":"was not very complicated. It was really simple\nstuff. Well, guess what? That's what having"},"2135":{"dur":5,"text":"more classes can do for you. The hard part\nis the design, is figuring out which class"},"2141":{"dur":6,"text":"should do what. Selecting the classes, keeping\nthe classes as a separate as possible, those"},"2147":{"dur":5,"text":"are the things that then become the challenge.\nWhen the design is good, the implementation"},"2152":{"dur":6,"text":"can be really simple. So learning good design\nis a very important goal for a programmer."},"2158":{"dur":5,"text":"One way to learn a great deal about design\nis by looking at the Java API. Remember those"},"2163":{"dur":4,"text":"classes have been discussed by hundreds and\nhundreds of programmers. I'm not saying the"},"2168":{"dur":4,"text":"designs are perfect, in fact, I've pointed\nout some places where the designs aren't,"},"2172":{"dur":5,"text":"but really in general they're very, very good\ndesigns. So keep programming!"}}