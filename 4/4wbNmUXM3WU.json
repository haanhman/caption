{"0.59":{"start":"0.59","dur":"6.15","text":"&gt;&gt;Let&#39;s continue our study as classes as a\ncontract by looking at the game Frogger. Here&#39;s"},"6.74":{"start":"6.74","dur":"5.12","text":"our problem statement: let&#39;s consider the\ndesign of some classes we could use to implement"},"11.86":{"start":"11.86","dur":"5.07","text":"the arcade game Frogger. Here&#39;s a free version\nof Frogger to play if you&#39;re not familiar"},"16.93":{"start":"16.93","dur":"7","text":"with the game. Wikipedia also has a good description\nof the Frogger game online. Now our Frogger"},"24.98":{"start":"24.98","dur":"6.11","text":"is going to have to be simple. We&#39;ll have\none frog, one truck for each line for a total"},"31.09":{"start":"31.09","dur":"5.02","text":"of five trucks, and a grid that we&#39;re going\nto use to display Frogger and the trucks on"},"36.11":{"start":"36.11","dur":"5.4","text":"the console. When we go to assemble these\nthings we need to think about what classes"},"41.51":{"start":"41.51","dur":"5.85","text":"we&#39;re going to need and what a class really\nmeans. So classes describe the state and the"},"47.36":{"start":"47.36","dur":"6.92","text":"behavior of objects. Data are used to describe\nthe state, methods are used to describe the"},"54.28":{"start":"54.28","dur":"5.799","text":"behavior. And you can think about the behavior\nas being which changes in state are permitted."},"60.08":{"start":"60.079","dur":"5.56","text":"So for example, illegal change of state for\nthe frog would be making it jump to the left"},"65.64":{"start":"65.639","dur":"5.36","text":"or making it jump up or down. The frog isn&#39;t\nallowed to jump on the diagonal, that&#39;s a"},"71.00":{"start":"70.999","dur":"6.21","text":"change in state that isn&#39;t allowed. It&#39;s really\nimportant to have a personal prototype for"},"77.21":{"start":"77.209","dur":"7","text":"subtle concepts like classes. Now this could\nbe the ArrayList, the String, or the StringBuilder,"},"84.33":{"start":"84.329","dur":"4.78","text":"but maybe one of the classes that we described\ntoday will become your favorite prototype."},"89.11":{"start":"89.109","dur":"4.26","text":"Whichever one you choose isn&#39;t so important\nbut it is important that you have a model"},"93.37":{"start":"93.369","dur":"4.91","text":"to use for other classes that we&#39;re going\nto develop as we go along. Classes will eventually"},"98.28":{"start":"98.279","dur":"5.58","text":"make a lot of sense, but at first a lot of\npeople find them confusing. So let&#39;s talk"},"103.86":{"start":"103.859","dur":"6.54","text":"about the frog class a little bit. Each frog\nneeds to know where it is that is its position"},"110.40":{"start":"110.399","dur":"6.06","text":"on the board and it needs to have a symbol\nto use to represent it, and that&#39;s really"},"116.46":{"start":"116.459","dur":"6.26","text":"all there is to the state of the frog in this\ngame. Now we need to have a way of expressing"},"122.72":{"start":"122.719","dur":"5.691","text":"our designs so that we can look at them without\nhaving to read a bunch code. And something"},"128.41":{"start":"128.41","dur":"6.389","text":"called UML is what we use for it. UML stands\nfor the Unified Modeling Language. There are"},"134.80":{"start":"134.799","dur":"4.36","text":"actually 12 different types of diagrams that\nare available. We&#39;re only going to use one"},"139.16":{"start":"139.159","dur":"5","text":"type for this semester. As you advance in\nobject-oriented programming you will learn"},"144.16":{"start":"144.159","dur":"6.261","text":"these other types-- at least some of them.\nSo what class diagrams do is they describe"},"150.42":{"start":"150.42","dur":"5.879","text":"classes before implementation. Now it&#39;s really\nimportant to describe them before you implement"},"156.30":{"start":"156.299","dur":"5.131","text":"them, because that&#39;s when you can have the\nreally deep discussions about how the classes"},"161.43":{"start":"161.43","dur":"4.509","text":"should be designed. If you wait until after\nthings are implemented, everybody gets very"},"165.94":{"start":"165.939","dur":"4.851","text":"attached to their implementation and nobody\nwants to go back and rework things even if"},"170.79":{"start":"170.79","dur":"4.88","text":"it isn&#39;t a very good design. Now it does take\na lot of discipline to design things before"},"175.67":{"start":"175.67","dur":"4.329","text":"you implement them but it&#39;s a very important\ndiscipline to develop, because that&#39;s what"},"180.00":{"start":"179.999","dur":"6.181","text":"a professional Software Engineer will need.\nThere are three sections in a class diagram:"},"186.18":{"start":"186.18","dur":"5.089","text":"the top section is the class name, the middle\nsection is the data, and that&#39;s what describes"},"191.27":{"start":"191.269","dur":"5.2","text":"the state of the objects, and the bottom section\ndescribes the methods, that is the behavior"},"196.47":{"start":"196.469","dur":"6.83","text":"of the objects. UML allows a lot of flexibility,\nso it&#39;s legal in UML to have a class diagram"},"203.30":{"start":"203.299","dur":"5.381","text":"that only has the class name in it or has\njust the class name and the data. You&#39;re allowed"},"208.68":{"start":"208.68","dur":"6.289","text":"to fit it to the circumstances that you need\nin the design. So we&#39;ll do a lot of that."},"214.97":{"start":"214.969","dur":"5.901","text":"So here are the rules for UML. It&#39;s designed\nto be a single modeling tool for all object-oriented"},"220.87":{"start":"220.87","dur":"6.39","text":"languages. In other words this isn&#39;t something\nthat&#39;s specific to Java. So it avoids any"},"227.26":{"start":"227.26","dur":"7","text":"Java specific syntax. Now that can be kind\nof annoying. Here&#39;s the syntax it uses: for"},"234.58":{"start":"234.579","dur":"5.621","text":"data it puts the name first and then a colon\nand then the type, and for methods it puts"},"240.20":{"start":"240.2","dur":"5.069","text":"the name of the method and then it puts the\nparameters in parentheses, again, the name"},"245.27":{"start":"245.269","dur":"7","text":"first and then a colon and then a type separated\nby commas then after the parameters you close"},"252.29":{"start":"252.29","dur":"4.52","text":"the parentheses, put a colon and the return\ntype. Now to tell you the truth, although"},"256.81":{"start":"256.81","dur":"5.44","text":"this is correct UML, I don&#39;t really care so\nmuch that you do it this way. I care very"},"262.25":{"start":"262.25","dur":"5.11","text":"deeply that you do design because that&#39;s something\nthat&#39;s a critical skill. These little nuances"},"267.36":{"start":"267.36","dur":"7","text":"in UML, these aren&#39;t so important. Now formally\nUML doesn&#39;t show constructors, but I usually"},"275.03":{"start":"275.03","dur":"4.19","text":"do. And the reason is that I&#39;ve found that\nif I don&#39;t show constructors my students forget"},"279.22":{"start":"279.22","dur":"4.91","text":"to write them. That&#39;s a problem because classes\nwithout constructors usually don&#39;t work the"},"284.13":{"start":"284.13","dur":"7","text":"way they should. Here&#39;s our first UML for\nthe frog class. So I have frog which is the"},"291.46":{"start":"291.46","dur":"5.5","text":"name of the class on the top and then I have\nthe state, which is the row and the column"},"296.96":{"start":"296.96","dur":"4.29","text":"where the frog is going to be located and\nthe symbol that&#39;s going to be used to describe"},"301.25":{"start":"301.25","dur":"7","text":"the frog on the game board. Now we might do\na little more thinking about our design here."},"308.86":{"start":"308.86","dur":"6.369","text":"There are some things that are shared amongst\nall the frog objects. For example, the symbol."},"315.23":{"start":"315.229","dur":"3.75","text":"If we&#39;re going to use an asterix to represent\nour frogs we&#39;re going to use it for all of"},"318.98":{"start":"318.979","dur":"7","text":"the frogs and so it doesn&#39;t make sense to\nsave a separate copy to every single instance."},"326.63":{"start":"326.629","dur":"5.271","text":"Remember that constants are almost always\nclass data. Think back to things like math.pi"},"331.90":{"start":"331.9","dur":"7","text":"or math.e. Now in UML class data is underlined,\nbut there&#39;s no UML symbol for a constant."},"341.11":{"start":"341.11","dur":"5.55","text":"So what I use for that is all caps. Now again\nthis isn&#39;t formal UML. This is a trick that"},"346.66":{"start":"346.66","dur":"5.14","text":"I use using one of the Java code conventions\nto communicate something that isn&#39;t usually"},"351.80":{"start":"351.8","dur":"7","text":"communicated by UML. So this is what our class\ndesign looks like now. Again, it&#39;s the frog"},"359.17":{"start":"359.169","dur":"6.111","text":"class. The row and the column those are instance\ndata. Every object will have its own row and"},"365.28":{"start":"365.28","dur":"6.4","text":"it&#39;s own column, but symbol, that should be\nthe same for all of the objects in the class."},"371.68":{"start":"371.68","dur":"7","text":"That&#39;s class data and that&#39;s why it&#39;s underlined.\nNow our frog class behavior is pretty simple."},"380.71":{"start":"380.71","dur":"5.09","text":"It can jump to the same column in the next\nto the previous row, so that would be a method"},"385.80":{"start":"385.8","dur":"7","text":"move up and move down, or it can jump to the\nright or left within a row. That is move left"},"393.92":{"start":"393.919","dur":"7","text":"or move right. Now that we have this method,\nwe can see the complete UML for our frog class."},"401.17":{"start":"401.169","dur":"5.111","text":"The data is the row and the column, both of\nthose are integers and the class data is the"},"406.28":{"start":"406.28","dur":"5.43","text":"symbol that&#39;s shared amongst all the frogs.\nThen we have our constructor that constructs"},"411.71":{"start":"411.71","dur":"6.56","text":"the frog in a given row and column and we\ncan move up, move down, move left, move right."},"418.27":{"start":"418.27","dur":"4.299","text":"Now none of those methods have any parameters,\nbecause they&#39;re relative to the current position"},"422.57":{"start":"422.569","dur":"6.761","text":"of the frog. Remember you can&#39;t have the frog\njust jump randomly across the board. He has"},"429.33":{"start":"429.33","dur":"7","text":"to move logically from one position to another.\nNow it&#39;s time to implement the frog class."},"436.38":{"start":"436.379","dur":"5.22","text":"So we&#39;re going to create a new class in Eclipse.\nNow the data goes inside the class but outside"},"441.60":{"start":"441.599","dur":"7","text":"of all of the methods. The class data will\nbe static and the instance data is not. So"},"448.86":{"start":"448.86","dur":"7","text":"here&#39;s Eclipse. I&#39;m going to create a new\nclass which is called frog. I&#39;m not actually"},"466.59":{"start":"466.59","dur":"4.44","text":"going to put Javadoc in the class while you\nwatch because it&#39;s a little too time consuming,"},"471.03":{"start":"471.03","dur":"4.939","text":"but that is something you would normally do.\nNow there&#39;s a lot of discussion in programming"},"475.97":{"start":"475.969","dur":"3.94","text":"circles about whether instance data should\ngo at the top of the class or the bottom of"},"479.91":{"start":"479.909","dur":"4.951","text":"the class. It&#39;s not so important which way\nyou choose to do it, but it&#39;s very important"},"484.86":{"start":"484.86","dur":"4.44","text":"that you&#39;re consistent in how you do it. So\nI&#39;m going to put the instance data and the"},"489.30":{"start":"489.3","dur":"4.26","text":"class data up at the top. If you want to put\nit at the bottom that&#39;s fine, as long as you"},"493.56":{"start":"493.56","dur":"7","text":"always do it that way. So our instance data\nfor the frog is an integer for the row and"},"501.69":{"start":"501.689","dur":"7","text":"an integer for the column. Our class data\non the other hand, which remember is static"},"513.70":{"start":"513.7","dur":"7","text":"and it&#39;s not an int, it&#39;s a char. Notice that\nI have our asterisk in single quotes. Remember"},"527.58":{"start":"527.58","dur":"5.5","text":"this isn&#39;t a string, this is just a single\ncharacter. The first thing we should do is"},"533.08":{"start":"533.08","dur":"4.52","text":"create our constructor. It&#39;s a good idea to\ndo the constructor first and to put it at"},"537.60":{"start":"537.6","dur":"4.49","text":"the top of the class. That&#39;s a preference\nof mine, once again you don&#39;t have to do things"},"542.09":{"start":"542.09","dur":"6.07","text":"the way I do them just as long as you keep\nthings organized. So all constructors have"},"548.16":{"start":"548.16","dur":"7","text":"the same name that the class has. Now I used\nr and c for the parameters because row and"},"556.98":{"start":"556.98","dur":"7","text":"column have been used for the instance data,\nand so that will create confusion. So row"},"564.29":{"start":"564.29","dur":"6.85","text":"will be initialized to r and column will be\ninitialized to c. So what we&#39;re doing now"},"571.14":{"start":"571.14","dur":"7","text":"is we&#39;re setting the values for all the instance\ndata in the Frogger class. We had only four"},"579.84":{"start":"579.84","dur":"7","text":"methods. We had move left, you&#39;ll recall the\nreturn type on that was void. We had move"},"595.78":{"start":"595.78","dur":"7","text":"right, move up, and move down. Now in order\nto know how to change row and column we need"},"613.71":{"start":"613.71","dur":"5.04","text":"to have a sense of where our coordinate system\nis. So I&#39;m going to assume that row 0 is at"},"618.75":{"start":"618.75","dur":"6.41","text":"the top of the screen and that row 7, 5 rows\nfor the trucks and a starting and ending row,"},"625.16":{"start":"625.16","dur":"5.41","text":"are going to be at the bottom. You could make\nother decisions than this. I&#39;m going to assume"},"630.57":{"start":"630.57","dur":"6.14","text":"that column 0 is on the left and the largest\ncolumn is on the right. So when we move left,"},"636.71":{"start":"636.71","dur":"7","text":"we&#39;ll go to column equals column -1. Whereas\nmoving right will be column equals column"},"645.95":{"start":"645.95","dur":"7","text":"+1. When we move up, the row will be row -1\nand when we move down, the row will be row"},"657.07":{"start":"657.07","dur":"7","text":"equals row +1. And that&#39;s really all there\nis to the frog class, at least for now. We&#39;ll"},"665.33":{"start":"665.33","dur":"5.09","text":"see some more nuances a little bit later on.\nNow we&#39;ve got a problem here, because although"},"670.42":{"start":"670.42","dur":"6.04","text":"we have a class we haven&#39;t tested it. And\nthat&#39;s always dangerous we know, so one of"},"676.46":{"start":"676.46","dur":"5.54","text":"the ways we can test it is to put a main program\nin this class, even though this isn&#39;t our"},"682.00":{"start":"682","dur":"7","text":"main game class. So let&#39;s do that. Public\nstatic void main string square brackets args."},"692.73":{"start":"692.73","dur":"7","text":"So we need to create a frog object and construct\nit. So let&#39;s put it at position 10, 10. Now"},"703.20":{"start":"703.2","dur":"4.98","text":"the next thing we need to do is exercise these\nmethods so we can see if the data is being"},"708.18":{"start":"708.18","dur":"7","text":"recorded correctly. So for example, we could\nhave while let&#39;s test it 10 times. So we&#39;ll"},"719.30":{"start":"719.3","dur":"7","text":"start count of 0, count less than 10. And\nwe could pick a random number, for example"},"730.15":{"start":"730.15","dur":"7","text":"[typing] from math.random. If randis less\nthan .25, let&#39;s move right. When we move right"},"752.05":{"start":"752.05","dur":"7","text":"we have to tell it what to move right. So\nour frog is going to have to move right. Now"},"760.52":{"start":"760.52","dur":"5.28","text":"remember our purpose of doing this is testing.\nSo we need to tell the user where the frog"},"765.80":{"start":"765.8","dur":"7","text":"is and that it&#39;s moving right. And so we&#39;ll\ntake frog.row and then a space, frog.column."},"790.64":{"start":"790.64","dur":"7","text":"So let&#39;s print out where the frog started"},"806.45":{"start":"806.45","dur":"7","text":"and to be consistent maybe we should put a\ncomma in there. Now else if rand is less than"},"819.11":{"start":"819.11","dur":"7","text":".50, we&#39;re going to do something similar only\nmaybe we&#39;ll move left. The bottom line is"},"829.23":{"start":"829.23","dur":"7","text":"we just want to make sure we try all the different\npossibilities here \nand make sure that our frog is moving around"},"841.57":{"start":"841.57","dur":"7","text":"correctly. Else if rand is less than .75 frog.move\nup \nand system out print line [typing] and I notice"},"876.83":{"start":"876.83","dur":"4.59","text":"here that I forgot to change this to left.\nThat&#39;s going to make it a lot harder to debug"},"881.42":{"start":"881.42","dur":"7","text":"our program if we make mistakes like this.\nAnd our last possibility will be frog.move"},"888.49":{"start":"888.49","dur":"7","text":"down and then system out print line down frog.row\nfrog.col. So you know this isn&#39;t a very profound"},"908.29":{"start":"908.29","dur":"5.01","text":"program, but it is enough for us to see if\nour frog is behaving reasonably. So let&#39;s"},"913.30":{"start":"913.3","dur":"7","text":"run it and see if our frog is happy. Okay,\nso our program is going crazy and I&#39;m sure"},"925.44":{"start":"925.44","dur":"7","text":"you&#39;ve already spotted the reason. I forgot\nto increment count. Okay, so let&#39;s try this"},"934.49":{"start":"934.49","dur":"7","text":"again. Okay so it started at 10,10 then it\nwent to the right and notice the row numbers"},"945.51":{"start":"945.51","dur":"5.22","text":"stayed the same and the column went up by\none. That&#39;s correct. It went to the right"},"950.73":{"start":"950.73","dur":"6.09","text":"again, again the rows stayed the same, the\ncolumn went up by one. When it went down the"},"956.82":{"start":"956.82","dur":"5.35","text":"row number went up and the column stayed the\nsame. It went down again, the row number stayed"},"962.17":{"start":"962.17","dur":"5.55","text":"the same and if you follow through this you&#39;ll\nsee that our frog is actually working correctly."},"967.72":{"start":"967.72","dur":"4.36","text":"There&#39;s always the temptation to remove this\ndata, to remove this main program from this"},"972.08":{"start":"972.08","dur":"4.91","text":"class, but it&#39;s kind of nice to have these\nthings around. We&#39;ll probably going to have"},"976.99":{"start":"976.99","dur":"5.03","text":"to modify this class later and we might like\nto make sure that it&#39;s still working after"},"982.02":{"start":"982.02","dur":"5.61","text":"we do modifications. So if we find it&#39;s getting\nin our way, there are a couple things we can"},"987.63":{"start":"987.63","dur":"7","text":"do. One is called folding where we just take\nit and compress it so that it&#39;s not taking"},"995.01":{"start":"995.01","dur":"4.98","text":"up the whole screen anymore. Another possibility\nif it really starts to cause trouble is to"},"999.99":{"start":"999.99","dur":"5.46","text":"comment it out, but I usually don&#39;t take things\nlike that out because testing code always"},"1005.45":{"start":"1005.45","dur":"7","text":"comes back and is useful again later on. So\nwe tested the frog class by putting a main"},"1012.67":{"start":"1012.67","dur":"4.83","text":"program in there. It&#39;s not going to be our\ngame, it&#39;s only for testing. It&#39;s not permanent"},"1017.50":{"start":"1017.5","dur":"5.73","text":"code really and we moved the frog around and\nshowed the location. Now the next thing we"},"1023.23":{"start":"1023.23","dur":"5.74","text":"need to do is design our truck class. Our\ntruck is little bit different. Its state is"},"1028.97":{"start":"1028.97","dur":"4.52","text":"the position on the board which will be the\nrow and column again and whether it moves"},"1033.49":{"start":"1033.49","dur":"4.75","text":"right or left. Remember that in Frogger once\na truck starts moving in one direction it"},"1038.24":{"start":"1038.24","dur":"4.98","text":"keeps moving in that direction. As far as\nour behavior, the behavior&#39;s actually really"},"1043.22":{"start":"1043.22","dur":"5.209","text":"simple. It just needs to move. Now eventually\nwhen we get to the game we may want to do"},"1048.43":{"start":"1048.429","dur":"4.541","text":"something like wraparound, so that when the\ntruck goes off one edge it comes onto the"},"1052.97":{"start":"1052.97","dur":"5.75","text":"other edge, but for right now we really don&#39;t\nneed to do that. All we need to do is keep"},"1058.72":{"start":"1058.72","dur":"6.51","text":"track of the position on the board, whether\nit&#39;s moving right or left. Here&#39;s the UML."},"1065.23":{"start":"1065.23","dur":"5.26","text":"Notice we&#39;ve got a row. Now I&#39;ve used 2 columns\nhere. When I was looking at the art on the"},"1070.49":{"start":"1070.49","dur":"4.779","text":"game, the trucks looked better if they were\na little bit bigger than the frog and so I"},"1075.27":{"start":"1075.269","dur":"4.99","text":"made them sit on two consecutive columns,\nthe right column and the left column in a"},"1080.26":{"start":"1080.259","dur":"6.01","text":"given row. That&#39;s an artistic choice you might\nwant to do that differently. I also needed"},"1086.27":{"start":"1086.269","dur":"4.36","text":"to keep track of whether they were going to\nthe right or going to the left. So that&#39;s"},"1090.63":{"start":"1090.629","dur":"5.311","text":"what is right does. Now symbol is different\nin the truck class than it was in the Frogger"},"1095.94":{"start":"1095.94","dur":"5.38","text":"class. All the frogs are going to use the\nsame symbol, but the truck isn&#39;t. If the truck"},"1101.32":{"start":"1101.32","dur":"4.63","text":"is going to the right, I&#39;m going to use a\ngreater than sign and if the truck is going"},"1105.95":{"start":"1105.95","dur":"4.579","text":"to the left I&#39;m going to use a less than.\nThis looks kind of cool in the game, so that&#39;s"},"1110.53":{"start":"1110.529","dur":"5.36","text":"why I picked those. When we construct a truck\nwe&#39;re going to give it a row and a column"},"1115.89":{"start":"1115.889","dur":"4.571","text":"and of course, whether it&#39;s moving to the\nright or to the left. Then the only thing"},"1120.46":{"start":"1120.46","dur":"5.819","text":"we have to do is move. Because trucks stay\nin one row only, their column changes when"},"1126.28":{"start":"1126.279","dur":"5.85","text":"they move so this isn&#39;t going to be a very\ndifficult class to implement. So we&#39;ll create"},"1132.13":{"start":"1132.129","dur":"7","text":"a new class which we&#39;ll call truck. We put\nour instance data at the top, so we have a"},"1149.72":{"start":"1149.72","dur":"7","text":"row and a left column and a right column.\nRemember we had a symbol and we had a Boolean"},"1161.69":{"start":"1161.69","dur":"3.989","text":"for whether it was going to the right or to\nthe left. So we have a little bit more instance"},"1165.68":{"start":"1165.679","dur":"5.37","text":"data here. Now in this case we don&#39;t have\nany class data. We don&#39;t have to put a comment"},"1171.05":{"start":"1171.049","dur":"5.431","text":"in here showing that it&#39;s empty, the user\ncan see that or the programmer can see it."},"1176.48":{"start":"1176.48","dur":"7","text":"Next we need to create a constructor. Now\nwe need to give it a row, a column, and a"},"1191.60":{"start":"1191.6","dur":"6.25","text":"Boolean. Now I&#39;ve done something here that&#39;s\nnot always a great idea. I&#39;d used the same"},"1197.85":{"start":"1197.85","dur":"4.529","text":"name for the parameters that I&#39;ve used for\nthe instance data. Now I will show you how"},"1202.38":{"start":"1202.379","dur":"5.081","text":"to work around it because some people like\nto do it this way, but probably changing the"},"1207.46":{"start":"1207.46","dur":"7","text":"names of the parameters would be a good choice.\nHere&#39;s how you work around it. When you have"},"1215.98":{"start":"1215.98","dur":"5.14","text":"instance data, there&#39;s always an instance\nobject. This is similar to the implicit argument"},"1221.12":{"start":"1221.12","dur":"5.049","text":"that shows up when we&#39;re using classes and\nby putting this in front what we&#39;re telling"},"1226.17":{"start":"1226.169","dur":"7","text":"Java is &quot;Hey look, use the instance data row\nnot the parameter.&quot; So leftCol will equal"},"1237.06":{"start":"1237.059","dur":"7","text":"Col and rightCol will equal Col +1. Now our\nsymbol on the other hand is going to be set"},"1245.42":{"start":"1245.419","dur":"7","text":"based on is right. So let&#39;s set is right first.\nYou&#39;re welcome to change those parameter names"},"1255.46":{"start":"1255.46","dur":"5.13","text":"when you get your hand on the code if this\nthis thing is bothering you and now we need"},"1260.59":{"start":"1260.59","dur":"6.919","text":"a conditional statement. If is right now because\nI didn&#39;t put this in front of it, that means"},"1267.51":{"start":"1267.509","dur":"7","text":"I&#39;m using the parameter is right not the instance\ndata. Well if the truck is going to the right"},"1275.24":{"start":"1275.24","dur":"7","text":"the symbol we&#39;re going to use is a greater\nthan sign. Otherwise the symbol we use is"},"1285.86":{"start":"1285.86","dur":"5.75","text":"a less than sign. Now one of the things you\nwant to do when you finish a constructor is"},"1291.61":{"start":"1291.61","dur":"5.37","text":"make sure that every single piece of instance\ndata has been initialized. So we had five"},"1296.98":{"start":"1296.98","dur":"7","text":"pieces of instance data here and all five\nare going to be initialized. That&#39;s good programming."},"1304.16":{"start":"1304.159","dur":"5.1","text":"The next thing we have is our move method.\nSo this is our behavior. Now move will mean"},"1309.26":{"start":"1309.259","dur":"7","text":"different things if we&#39;re going right or left\nso if is right. Now notice I didn&#39;t have to"},"1316.74":{"start":"1316.74","dur":"5.429","text":"put this in front of it this time, because\nI don&#39;t have a parameter called is right there&#39;s"},"1322.17":{"start":"1322.169","dur":"4.661","text":"really no confusion here. You can put this\nin front of it if you wish to but it&#39;s not"},"1326.83":{"start":"1326.83","dur":"7","text":"necessary. So if we&#39;re going to go to the\nright then left column is left column +1 and"},"1340.91":{"start":"1340.909","dur":"7","text":"right column equals right column +1. Now we\nwant both of those things done, so remember"},"1347.91":{"start":"1347.909","dur":"6.63","text":"we need to put curly braces around it. Otherwise,\nwell if we&#39;re not going right, we&#39;re going"},"1354.54":{"start":"1354.539","dur":"7","text":"left. So then left column is left column -1\nand right column equals right column -1. We"},"1366.31":{"start":"1366.309","dur":"3.791","text":"don&#39;t change the row, we don&#39;t change the\nsymbol, and we don&#39;t change the direction"},"1370.10":{"start":"1370.1","dur":"5.029","text":"of the trucks. So that&#39;s all that has to be\ndone in the move method other than maybe some"},"1375.13":{"start":"1375.129","dur":"7","text":"Javadoc. So we&#39;ve implemented our truck class.\nWe implemented the instance data, the constructors"},"1383.21":{"start":"1383.21","dur":"5.419","text":"and the method, and we could go and write\nanother main program to test the truck class."},"1388.63":{"start":"1388.629","dur":"4.3","text":"Because it&#39;s so similar to the frog class\nI&#39;m not going to do that here just to save"},"1392.93":{"start":"1392.929","dur":"4.38","text":"us a little bit of time, but it&#39;s always a\ngood idea to test your classes as you&#39;re writing"},"1397.31":{"start":"1397.309","dur":"6.98","text":"them. It will really save you a lot of time\nin the long run. So if we were going to test"},"1404.29":{"start":"1404.289","dur":"5.441","text":"the truck class, we&#39;d create a main program,\nwe&#39;d construct a truck, move it repeatedly"},"1409.73":{"start":"1409.73","dur":"4.439","text":"and show the location. In other words we&#39;d\ndo the same things we did in the frog class."},"1414.17":{"start":"1414.169","dur":"5.401","text":"Oh yes! And we would show the symbol too to\nmake sure we&#39;ve got it going in the right"},"1419.57":{"start":"1419.57","dur":"6.359","text":"direction. Now the last piece that we need\nis our Frogger board. We&#39;re only going to"},"1425.93":{"start":"1425.929","dur":"5.11","text":"implement the frog and the vehicles on a very\nsmall board. It&#39;s going to be 30 characters"},"1431.04":{"start":"1431.039","dur":"6.901","text":"wide and just 7 rows tall. Now the way I picked\n7 rows is you have 5 truck lanes and then"},"1437.94":{"start":"1437.94","dur":"5.17","text":"a safety zone at the top and the bottom. The\nway I picked 30 characters was just looking"},"1443.11":{"start":"1443.11","dur":"4.36","text":"at sort of the general dimensions to make\nsure it was proportional. You don&#39;t want it"},"1447.47":{"start":"1447.47","dur":"5.189","text":"to get too long or to be too short, so those\nlooked okay to me. Now I&#39;m no artist and it&#39;s"},"1452.66":{"start":"1452.659","dur":"4.321","text":"a good idea to get people who are artists\ninvolved in these designs because sometimes"},"1456.98":{"start":"1456.98","dur":"5.23","text":"when programmers do art it&#39;s not so pretty.\nOne thing we need to think about is why do"},"1462.21":{"start":"1462.21","dur":"5.11","text":"we need a grid at all? Well, we&#39;ve got a huge\nproblem when we&#39;re doing console output, and"},"1467.32":{"start":"1467.32","dur":"6.9","text":"that&#39;s we can&#39;t backup. So for example if\nwe put the frog in first, we can&#39;t go backwards"},"1474.22":{"start":"1474.22","dur":"4.48","text":"to put the trucks over it. So assuming the\nfrog starts at the bottom of the board as"},"1478.70":{"start":"1478.7","dur":"6.75","text":"is typical in Frogger games, we&#39;ve got a problem.\nSo what we need to do is create a grid that"},"1485.45":{"start":"1485.45","dur":"6.579","text":"stores a map of where everything is located.\nThen we can display the grid. In order to"},"1492.03":{"start":"1492.029","dur":"5.09","text":"display the grid, we need to know how to create\na rectangular group of characters. This is"},"1497.12":{"start":"1497.119","dur":"4.081","text":"something called a two-dimensional array and\nwe haven&#39;t done it previously so we need to"},"1501.20":{"start":"1501.2","dur":"5.679","text":"talk about it a little bit. So for each step\nof time what we&#39;re going to do is clear the"},"1506.88":{"start":"1506.879","dur":"5.851","text":"grid, then put all the objects in the grid,\nand then display the grid to the user, and"},"1512.73":{"start":"1512.73","dur":"4.899","text":"that we will repeat every single step through\nthe game. Now if you think you know that wouldn&#39;t"},"1517.63":{"start":"1517.629","dur":"4.721","text":"it be faster rather than clearing the whole\ngrid to just like erase the current position"},"1522.35":{"start":"1522.35","dur":"5.899","text":"of the frog and draw the frog in a new position?\nYes it would, but the truth is that compared"},"1528.25":{"start":"1528.249","dur":"4.92","text":"to the user input being slow this game is\ngoing to be so fast we&#39;re actually going to"},"1533.17":{"start":"1533.169","dur":"5.021","text":"have to end up slowing it down a little bit\njust to make it playable. So there&#39;s no reason"},"1538.19":{"start":"1538.19","dur":"5.089","text":"to try to be really efficient, keep it simple.\nKeeping it simple is almost always a good"},"1543.28":{"start":"1543.279","dur":"7","text":"programming strategy. If it turns out to be\ntoo inefficient later you can always fix it."},"1550.35":{"start":"1550.35","dur":"5.6","text":"So let&#39;s talk a little bit about two-dimensional\narrays. When you construct a two-dimensional"},"1555.95":{"start":"1555.95","dur":"4.54","text":"array, here&#39;s the code. Now these are going\nto be two-dimensional arrays of characters"},"1560.49":{"start":"1560.49","dur":"4.639","text":"because that&#39;s how we&#39;re displaying our game.\nSo you have character square brackets square"},"1565.13":{"start":"1565.129","dur":"5.731","text":"brackets so there&#39;s four square brackets there\nand then the name of the array equals new"},"1570.86":{"start":"1570.86","dur":"5.429","text":"character and then you give the number of\nrows first and then the number of columns"},"1576.29":{"start":"1576.289","dur":"6.38","text":"and a semicolon. What that does is create\nsomething that looks like this. Now the light"},"1582.67":{"start":"1582.669","dur":"5.541","text":"gray versus the white, that&#39;s just a PowerPoint\nthing. All the cells in the array are the"},"1588.21":{"start":"1588.21","dur":"7","text":"same size just like they were in a one-dimensional\narray. The rows are horizontal. So for example"},"1595.31":{"start":"1595.309","dur":"7","text":"row 0 goes alllllll the way across. Here&#39;s\nrow 1 it&#39;s one of the darker gray rows, row"},"1603.04":{"start":"1603.039","dur":"6.691","text":"2 is here. So notice we&#39;re zero indexing here.\nThe columns on the other hand are vertical."},"1609.73":{"start":"1609.73","dur":"7","text":"So this is column 0. Here is column 1, column\n2. In order to access individual elements"},"1619.00":{"start":"1618.999","dur":"5.93","text":"we used two indices: the left one for the\nrow and the right one for the column. So for"},"1624.93":{"start":"1624.929","dur":"6.781","text":"example the cell I just indicated? That&#39;s\nin row1 and column 2. This cell is in row"},"1631.71":{"start":"1631.71","dur":"7","text":"3 and column 4, and so that&#39;s how we use a\ntwo-dimensional array. Here&#39;s a design for"},"1639.20":{"start":"1639.2","dur":"5.87","text":"the grid class. The only instance data we\nneed is the character array, the two-dimensional"},"1645.07":{"start":"1645.07","dur":"5.059","text":"array, but we do need to know the number of\nrows and columns and those are going to be"},"1650.13":{"start":"1650.129","dur":"5.3","text":"constants. We need to construct the grid.\nNow in this case because we know the number"},"1655.43":{"start":"1655.429","dur":"5.551","text":"of rows and columns are constants, we don&#39;t\nneed to pass them in as parameters. We need"},"1660.98":{"start":"1660.98","dur":"4.61","text":"to be able to clear the grid. We need to be\nable to show the grid, and we need to be able"},"1665.59":{"start":"1665.59","dur":"4.459","text":"to set it one cell at a time. And those are\nreally the only things that the grid class"},"1670.05":{"start":"1670.049","dur":"6.09","text":"needs to do for now. So let&#39;s go write the\ngrid class. Now this is our third class in"},"1676.14":{"start":"1676.139","dur":"7","text":"the same project. So we started with our instance\ndata first. Here&#39;s our class data: final int"},"1704.88":{"start":"1704.879","dur":"7","text":"rows equals 7 and final int cols equals 30.\nAnd remember, class data should always be"},"1716.89":{"start":"1716.889","dur":"6.53","text":"static. So that means no matter how many grids\nwe create, there&#39;s only going to be one copy"},"1723.42":{"start":"1723.419","dur":"3.86","text":"of rows and columns. Now in this case it&#39;s\nnot going to matter because we&#39;re only going"},"1727.28":{"start":"1727.279","dur":"5.39","text":"to create one grid, but it&#39;s still good to\ncreate these things this way. Later on maybe"},"1732.67":{"start":"1732.669","dur":"4.35","text":"we&#39;ll have a multiplayer version or something\nlike that where we want to have multiple grids"},"1737.02":{"start":"1737.019","dur":"5.26","text":"hanging around, and if we do the instance\ndata versus class data correctly at the start"},"1742.28":{"start":"1742.279","dur":"6.661","text":"we won&#39;t have to worry about it later. So\nwe need a grid constructor. Remember it had"},"1748.94":{"start":"1748.94","dur":"5.339","text":"no parameters. We have only one piece of instance\ndata and so there&#39;s only one thing that needs"},"1754.28":{"start":"1754.279","dur":"7","text":"to be allocated - a character array, rows\nand columns. Now remember this is a primitive"},"1772.32":{"start":"1772.32","dur":"5.29","text":"data type not an object, so there&#39;s no two\nlayer construction involved in this at all."},"1777.61":{"start":"1777.61","dur":"7","text":"In fact that&#39;s all there is to the constructor.\nTo clear the grid all we have to do is step"},"1789.67":{"start":"1789.669","dur":"6.47","text":"through the grid one position at a time and\nenter in something that can&#39;t be seen. A space"},"1796.14":{"start":"1796.139","dur":"6.26","text":"is a good choice. Now in this particular case\nwe&#39;re going to need to use to for loops: one"},"1802.40":{"start":"1802.399","dur":"6.941","text":"for loop will go through the rows and the\nother will go through the columns. So for"},"1809.34":{"start":"1809.34","dur":"7","text":"int r is 0 r less than rows ++r, and then\nwe go through the columns inside that loop."},"1825.28":{"start":"1825.279","dur":"5.37","text":"Now this is one of our first nested for loops\nthat we&#39;ve done. So don&#39;t worry too much if"},"1830.65":{"start":"1830.649","dur":"4.38","text":"this doesn&#39;t make a lot of sense to you, we&#39;ll\ndo lots more nested for loops a little bit"},"1835.03":{"start":"1835.029","dur":"7","text":"later. So grid of r c equals the space character\nand that&#39;s all there is to clearing the grid."},"1854.32":{"start":"1854.32","dur":"7","text":"To display the grid what we&#39;re going to do\nis just print it to the screen so once again"},"1862.00":{"start":"1861.999","dur":"3.87","text":"we need a nested loop. And you know it occurs\nto me that by this time in the semester we"},"1865.87":{"start":"1865.869","dur":"7","text":"actually have seen nested loops, so these\nshouldn&#39;t be completely foreign to you. So"},"1881.39":{"start":"1881.389","dur":"7","text":"here are our nested loops going through the\ncolumns one at a time inside the rows. So"},"1892.19":{"start":"1892.19","dur":"7","text":"what we&#39;re going to do here is system out\nprint grid of r c. Now we don&#39;t want to put"},"1905.16":{"start":"1905.159","dur":"4.87","text":"any spaces in here because we&#39;re just trying\nto print out the rows of the array, but we"},"1910.03":{"start":"1910.029","dur":"7","text":"do need to print a new line every time we\nfinish going through the columns. So that"},"1920.07":{"start":"1920.07","dur":"7","text":"will be system out print line with nothing\nafter it. So all of the columns will be printed"},"1928.20":{"start":"1928.2","dur":"7","text":"out and then afterwards we&#39;ll have a new line,\nand that will take us to the new rows. The"},"1936.00":{"start":"1935.999","dur":"5.75","text":"curly braces here are required. It might not\nbe a bad idea to put another set of curly"},"1941.75":{"start":"1941.749","dur":"5.9","text":"braces in, just to make sure that we support\nthe way this indentation is done. We&#39;re going"},"1947.65":{"start":"1947.649","dur":"4.9","text":"to print out the rows one column at a time,\nthen do a print line and that will take us"},"1952.55":{"start":"1952.549","dur":"5.6","text":"to the start of the next row. So there&#39;s our\ndisplay method. The only other thing we needed"},"1958.15":{"start":"1958.149","dur":"5.811","text":"to do was to be able to set a value in the\ngrid. So again that&#39;s a void return type,"},"1963.96":{"start":"1963.96","dur":"7","text":"we called it set grid and we needed to know\nwhich row, which column, and what symbol."},"1977.29":{"start":"1977.289","dur":"7","text":"The code here is pretty simple. Grid of row\nr, sort of bugs me that I made one of those"},"1987.07":{"start":"1987.07","dur":"7","text":"a single letter variable and the other one\nmultiple letters, so I&#39;m going to change that."},"1996.46":{"start":"1996.46","dur":"4.169","text":"Let&#39;s think about this method a little bit.\nIt would be possible that somebody would ask"},"2000.63":{"start":"2000.629","dur":"5.3","text":"us to set a row and column location that isn&#39;t\nlegal. And we really don&#39;t want to do that"},"2005.93":{"start":"2005.929","dur":"7","text":"because if we do it our code will break. What\nwe should do is check and see if 0 is less"},"2016.41":{"start":"2016.409","dur":"7","text":"than or equal to r and r is less than rows,\nbecause those are the valid indices for a"},"2026.71":{"start":"2026.71","dur":"7","text":"row. Now the other thing we need to check\nis whether columns is legal. So 0 less than"},"2037.01":{"start":"2037.009","dur":"7","text":"or equal to c and c is less than columns.\nNow you could check those separately if you"},"2044.91":{"start":"2044.909","dur":"7","text":"wanted to. If those two are legal, that&#39;s\nwhen we&#39;re going to set the grid. Now we have"},"2052.33":{"start":"2052.33","dur":"4.65","text":"to decide what we&#39;re going to do if somebody\nmakes an illegal choice. People tend to like"},"2056.98":{"start":"2056.98","dur":"5.16","text":"to do things like system out print line here\nand that&#39;s really kind of awkward, although"},"2062.14":{"start":"2062.14","dur":"5.06","text":"for debugging purposes it can be useful because\nwe would not want to set an illegal position"},"2067.20":{"start":"2067.2","dur":"6.53","text":"on the grid. So for now let&#39;s put that in\nhere, but we may want to remove it later on."},"2073.73":{"start":"2073.73","dur":"7","text":"There are some more elegant solutions to this\nthat you&#39;ll learn as you advance in programming."},"2087.27":{"start":"2087.27","dur":"3.159","text":"Usually when you start to debug a program,\nparticularly one that might be a little bit"},"2090.43":{"start":"2090.429","dur":"6.49","text":"bigger like this one might be at the end,\nany help you can get, any way you can make"},"2096.92":{"start":"2096.919","dur":"7","text":"your job easier is worth it. So there we have\nour set grid method. Of course all of these"},"2105.41":{"start":"2105.41","dur":"7","text":"classes should be Javadoc&#39;d. So when we cleared\nthe array we used a nested for loop. Now let&#39;s"},"2114.91":{"start":"2114.91","dur":"4.76","text":"make some observations about what we&#39;ve done\nso far. We&#39;ve created three different classes"},"2119.67":{"start":"2119.67","dur":"4.94","text":"that are going to be an integral part of a\nFrogger game. Having more classes actually"},"2124.61":{"start":"2124.61","dur":"4.46","text":"makes programming easier. You&#39;ve probably\nnoticed that the logic in those three classes"},"2129.07":{"start":"2129.07","dur":"6.23","text":"was not very complicated. It was really simple\nstuff. Well, guess what? That&#39;s what having"},"2135.30":{"start":"2135.3","dur":"5.9","text":"more classes can do for you. The hard part\nis the design, is figuring out which class"},"2141.20":{"start":"2141.2","dur":"6.31","text":"should do what. Selecting the classes, keeping\nthe classes as a separate as possible, those"},"2147.51":{"start":"2147.51","dur":"5.14","text":"are the things that then become the challenge.\nWhen the design is good, the implementation"},"2152.65":{"start":"2152.65","dur":"6.11","text":"can be really simple. So learning good design\nis a very important goal for a programmer."},"2158.76":{"start":"2158.76","dur":"5","text":"One way to learn a great deal about design\nis by looking at the Java API. Remember those"},"2163.76":{"start":"2163.76","dur":"4.51","text":"classes have been discussed by hundreds and\nhundreds of programmers. I&#39;m not saying the"},"2168.27":{"start":"2168.27","dur":"4.32","text":"designs are perfect, in fact, I&#39;ve pointed\nout some places where the designs aren&#39;t,"},"2172.59":{"start":"2172.59","dur":"5.55","text":"but really in general they&#39;re very, very good\ndesigns. So keep programming!"}}