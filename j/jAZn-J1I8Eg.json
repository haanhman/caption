{"0":{"dur":3,"text":"[MUSIC PLAYING]"},"5":{"dur":1,"text":"OLIVER WOODMAN: So\nmy name's Ollie."},"7":{"dur":1,"text":"This is Andrew."},"9":{"dur":1,"text":"It's great to see\nso many of you here."},"10":{"dur":2,"text":"I know it's been a long day."},"13":{"dur":2,"text":"And today we're going to talk\nto you about media playback"},"15":{"dur":3,"text":"on Android using ExoPlayer."},"18":{"dur":1,"text":"In terms of what\nwe're going to cover,"},"20":{"dur":2,"text":"we're really going to try and\ncater a little bit for everyone"},"23":{"dur":1,"text":"in this talk."},"24":{"dur":1,"text":"So what that means is\nwe're going to start"},"26":{"dur":0,"text":"with some fundamentals."},"27":{"dur":3,"text":"So we're going to briefly\ndiscuss what ExoPlayer is."},"31":{"dur":2,"text":"We're going to discuss\nsome of its features."},"34":{"dur":2,"text":"We're going to discuss a\nlittle bit about when you"},"36":{"dur":1,"text":"might want to use ExoPlayer."},"38":{"dur":2,"text":"And we're going to go\nthrough a simple example that"},"40":{"dur":2,"text":"shows how you might be\nable to get started."},"43":{"dur":2,"text":"After that, perhaps more\nfor those who are already"},"45":{"dur":1,"text":"familiar with\nExoPlayer, we're going"},"46":{"dur":4,"text":"to run quite quickly through\nsome more advanced topics."},"51":{"dur":2,"text":"So we'll talk about\nmedia composition, which"},"53":{"dur":3,"text":"is a new feature ExoPlayer v2."},"56":{"dur":3,"text":"We'll talk about some of\nthe internals of ExoPlayer,"},"60":{"dur":3,"text":"and we'll describe a little\nbit about how they work"},"63":{"dur":3,"text":"and how playback actually works."},"66":{"dur":2,"text":"And then finally we'll\nbuild on that knowledge"},"68":{"dur":2,"text":"and we'll start to talk about\nhow you can really customize"},"70":{"dur":3,"text":"and fine tune ExoPlayer to do\na really good job of matching"},"74":{"dur":3,"text":"your specific use case."},"78":{"dur":2,"text":"OK, so let's get started."},"80":{"dur":1,"text":"What is ExoPlayer?"},"82":{"dur":2,"text":"So for those of you who\naren't familiar with ExoPlayer"},"84":{"dur":4,"text":"already, it's a media\nplayback library for Android."},"88":{"dur":2,"text":"It works on Jelly\nBean and above,"},"90":{"dur":1,"text":"and it's written in Java."},"92":{"dur":2,"text":"So as Android developers,\nit's already in the language"},"94":{"dur":3,"text":"that you're most familiar with."},"98":{"dur":2,"text":"If you want to ExoPlayer, you\ninclude it as a dependency,"},"100":{"dur":3,"text":"just as you would include\nany other Java library."},"104":{"dur":1,"text":"And it's also open source."},"105":{"dur":1,"text":"So if you're\ninspired to check out"},"107":{"dur":2,"text":"our source code after this\ntalk, you can easily do that."},"109":{"dur":2,"text":"And the last slide\nof this presentation"},"112":{"dur":4,"text":"will actually have a link\nto our GitHub repository."},"116":{"dur":2,"text":"In terms of features,\nwe have come a long way"},"118":{"dur":2,"text":"since we initially open\nsourced ExoPlayer, which"},"120":{"dur":3,"text":"was back at Google I\/O in 2014."},"124":{"dur":1,"text":"So in that initial\nrelease, we supported"},"126":{"dur":3,"text":"DASH and SmoothStreaming\nadaptive media playbacks,"},"130":{"dur":4,"text":"primarily using fragmented\nMP4 as the container format."},"134":{"dur":5,"text":"We also supported TTML\ncaptions and common encryption."},"139":{"dur":1,"text":"Not too long after\nthat we added support"},"141":{"dur":4,"text":"for HLS and the MPEG-TS\ncontainer format,"},"145":{"dur":3,"text":"and also some additional\ncaption formats."},"149":{"dur":1,"text":"And since then we've\nreally been quite busy,"},"151":{"dur":2,"text":"adding support for loads\nof more traditional media"},"153":{"dur":4,"text":"formats like MP3, MP4, Ogg\nand Matroska and so on."},"163":{"dur":3,"text":"We also others\nseveral extensions."},"166":{"dur":2,"text":"What ExoPlayer\nextensions are is a way"},"169":{"dur":4,"text":"of bringing functionality from\nother libraries into ExoPlayer."},"173":{"dur":4,"text":"So as a concrete example, if you\nuse OkHttp as your networking"},"177":{"dur":2,"text":"stack for the rest\nof your application,"},"180":{"dur":2,"text":"you might actually want to\nuse that exact same networking"},"182":{"dur":2,"text":"stack for media playbacks."},"185":{"dur":3,"text":"And you can do that with\nOkHttp extension, which"},"188":{"dur":3,"text":"allows you to use that exact\nsame network stack inside"},"191":{"dur":3,"text":"of ExoPlayer."},"194":{"dur":3,"text":"So this brings us up to\nthe middle of last year."},"197":{"dur":2,"text":"And at this point we\nkind of took a step back,"},"200":{"dur":2,"text":"and we made some quite\nin-depth architectural changes"},"202":{"dur":1,"text":"inside the player."},"204":{"dur":3,"text":"And we released\nExoPlayer version 2."},"207":{"dur":1,"text":"In this release\nwe had the support"},"209":{"dur":3,"text":"for more advanced features\nlike MultiPeriod DASH supports,"},"212":{"dur":1,"text":"gapless audio, and\nmedia composition,"},"214":{"dur":1,"text":"which is something\nwe'll talk quite"},"216":{"dur":2,"text":"a lot about in a little while."},"218":{"dur":2,"text":"At the same time we tried to\nmake ExoPlayer easier to use."},"221":{"dur":2,"text":"So we added Simple\nExoPlayer view--"},"223":{"dur":3,"text":"sorry, Simple ExoPlayer, which\nis a slightly higher level"},"227":{"dur":3,"text":"API for using ExoPlayer,\nand also some playback UI"},"230":{"dur":1,"text":"components that\nyou can use to get"},"231":{"dur":3,"text":"started really quickly\nout of the box."},"235":{"dur":1,"text":"Since then we've been\nadding more features."},"237":{"dur":1,"text":"Most notably we\nrecently added support"},"239":{"dur":1,"text":"for variable speed playback."},"240":{"dur":2,"text":"And we've also been\nbuilding up our ability"},"242":{"dur":4,"text":"to cache media as it's played."},"247":{"dur":2,"text":"And so this is where\nwe're at today."},"249":{"dur":1,"text":"And the key takeaway\nfrom this slide"},"251":{"dur":1,"text":"isn't necessarily that\nyou should understand"},"252":{"dur":1,"text":"everything that's on it."},"254":{"dur":2,"text":"Probably for your\nparticular use case"},"256":{"dur":3,"text":"you only need a very small\nsubset of these features."},"260":{"dur":2,"text":"The key takeaway here\nis really that ExoPlayer"},"262":{"dur":2,"text":"has kind of evolved into quite\na fully featured media library"},"265":{"dur":0,"text":"now."},"266":{"dur":3,"text":"And so if you have a media\nplayback use case for Android,"},"269":{"dur":4,"text":"probably ExoPlayer is going to\nsupport what you want to do."},"274":{"dur":2,"text":"So now we know a bit\nabout the features there."},"276":{"dur":3,"text":"Let's talk about when it might\nmake sense to use ExoPlayer"},"279":{"dur":2,"text":"and when it might makes sense\nto use the obviously alternative"},"282":{"dur":5,"text":"to ExoPlayer, which is Android's\nbuilt in MediaPlayer API."},"287":{"dur":1,"text":"So the first thing to\nnote is that MediaPlayer"},"289":{"dur":3,"text":"works all the way back to\nthe beginning of Android."},"292":{"dur":3,"text":"ExoPlayer is Jelly\nBean and above only."},"295":{"dur":2,"text":"This is far less of an\nissue than it used to be."},"297":{"dur":3,"text":"And in fact there's only around\n2% of active Android devices"},"301":{"dur":2,"text":"still on earlier\nversions of Android."},"303":{"dur":1,"text":"But if you really care\na lot about providing"},"305":{"dur":3,"text":"continued support to\nthat 2%, then MediaPlayer"},"308":{"dur":3,"text":"is going to be your best bet."},"312":{"dur":2,"text":"In terms of what use cases\neach of these solutions"},"314":{"dur":4,"text":"is best suited for, MediaPlayer\ndoes quite a good job"},"318":{"dur":1,"text":"of simple use cases."},"320":{"dur":1,"text":"So if you just\nhave an MP3 that's"},"321":{"dur":2,"text":"maybe bundled in\nyour APK and you"},"324":{"dur":2,"text":"want to play it inside\nyour app, then MediaPlayer"},"326":{"dur":1,"text":"is going to work\njust fine for you."},"328":{"dur":1,"text":"Maybe you're already using it."},"329":{"dur":3,"text":"And there's no real reason\nwhy you should switch."},"333":{"dur":2,"text":"Where ExoPlayer really\ncomes into its own"},"335":{"dur":3,"text":"is for more advanced use\ncases, so specifically"},"339":{"dur":3,"text":"any kind of adaptive streaming,\nincluding DASH, SmoothStreaming"},"342":{"dur":2,"text":"and HLS, and use\ncases where you really"},"345":{"dur":1,"text":"want to leverage some\nof the advanced features"},"347":{"dur":3,"text":"that ExoPlayer provides, like\nmedia composition and caching."},"353":{"dur":1,"text":"Another difference that's\nworth bearing in mind"},"355":{"dur":3,"text":"is the way that these two\nAPIs have been designed."},"358":{"dur":1,"text":"MediaPlayer is very\nmuch a black box."},"360":{"dur":2,"text":"You don't get very much\ncontrol over the inner workings"},"362":{"dur":1,"text":"of the player."},"364":{"dur":2,"text":"And in contrast, ExoPlayer\nis designed really"},"366":{"dur":2,"text":"to be very customizable\nand extensible."},"368":{"dur":1,"text":"And you can really\ndig in and start"},"370":{"dur":3,"text":"to fine tune the various\ndials inside of ExoPlayer"},"373":{"dur":4,"text":"to get things working just\nthe way you want them to."},"377":{"dur":3,"text":"So ExoPlayer is really\nbest if you are probably"},"380":{"dur":4,"text":"an advanced user and you want\nto kind of tweak these things."},"385":{"dur":1,"text":"A final but important\nconsideration"},"387":{"dur":4,"text":"is to consider the difference\nof where the player actually"},"391":{"dur":3,"text":"lives when using\nMediaPlayer and ExoPlayer."},"395":{"dur":4,"text":"So when you use MediaPlayer, as\nyou can see on the left here,"},"399":{"dur":1,"text":"the MediaPlayer\nimplementation is actually"},"401":{"dur":1,"text":"in the Android operating system."},"403":{"dur":3,"text":"And the division here is the\nhorizontal line that you see."},"406":{"dur":4,"text":"So below is the operating system\nand above is your application."},"411":{"dur":1,"text":"When you use ExoPlayer,\nthe actual player"},"412":{"dur":3,"text":"implementation ships as\npart of your application."},"416":{"dur":2,"text":"And it really just goes through\nto some quite low level media"},"418":{"dur":2,"text":"APIs in the platform,\nmainly for providing access"},"421":{"dur":2,"text":"to hardware decoders."},"424":{"dur":2,"text":"So why is this important?"},"426":{"dur":1,"text":"Well one reason is that\nAndroid's media power"},"428":{"dur":1,"text":"has actually evolved over time."},"430":{"dur":3,"text":"So as a result of that,\nthe behavior that you get"},"433":{"dur":4,"text":"may vary slightly from Android\nrelease to Android release."},"438":{"dur":2,"text":"In contrast with ExoPlayer,\nwe have an advantage."},"440":{"dur":2,"text":"So you can ship a single\nversion of the player"},"442":{"dur":1,"text":"inside your application."},"444":{"dur":2,"text":"And you're going to get\nthat exact same version"},"446":{"dur":2,"text":"across all versions of Android."},"449":{"dur":1,"text":"And this means that\nExoPlayer is really"},"450":{"dur":5,"text":"better positioned to provide\na very consistent experience."},"455":{"dur":2,"text":"Another important\nbenefit of this model"},"457":{"dur":3,"text":"is when we add a new\nfeature, we can generally"},"460":{"dur":2,"text":"support all the way back to\nJelly Bean with ExoPlayer,"},"463":{"dur":1,"text":"whereas a new feature\nin MediaPlayer"},"464":{"dur":2,"text":"is only going to be available\nfor subsequent releases"},"467":{"dur":2,"text":"of Android."},"470":{"dur":2,"text":"An interesting example\nof these advantages"},"473":{"dur":3,"text":"is actually variable\nspeed playback supports."},"476":{"dur":3,"text":"So this was supported in\nMediaPlayer from Marshmallow."},"480":{"dur":1,"text":"And recently we added\nsupport in ExoPlayer."},"481":{"dur":3,"text":"And because we didn't have any\ndependencies on new low level"},"485":{"dur":2,"text":"media APIs or anything\nlike that in the platform,"},"487":{"dur":3,"text":"we were able to add support\nall the way back to Jelly Bean."},"491":{"dur":2,"text":"What we discovered next\nwas that there was actually"},"493":{"dur":4,"text":"a bug in the playback rate and\npitch adjustment implementation"},"498":{"dur":3,"text":"that affected both\nMediaPlayer and ExoPlayer."},"501":{"dur":1,"text":"And we were able to\nfix that bug, again,"},"503":{"dur":2,"text":"all the way back to Jelly\nBean with ExoPlayer,"},"505":{"dur":3,"text":"and only in O and\nlater for MediaPlayer."},"511":{"dur":2,"text":"So at this point, hopefully you\ncan see some of the benefits"},"514":{"dur":1,"text":"ExoPlayer has."},"515":{"dur":1,"text":"But you might be\nthinking that you"},"517":{"dur":1,"text":"would be more\nconfident in using it"},"518":{"dur":4,"text":"if you knew that some people\nwere using it already."},"522":{"dur":1,"text":"And I'm happy to\nsay that we actually"},"524":{"dur":2,"text":"use ExoPlayer very extensively\nin Google's own applications."},"527":{"dur":2,"text":"So most notably YouTube,\nwhich is obviously"},"529":{"dur":2,"text":"a huge video streaming\nservice, and also"},"532":{"dur":4,"text":"applications like Google Play\nMovies and Google Photos."},"537":{"dur":1,"text":"And we've actually seen\nreally strong adoption"},"539":{"dur":2,"text":"from the wider development\ncommunity as well."},"541":{"dur":1,"text":"So here are just some\nof the applications"},"543":{"dur":5,"text":"that for some use or\nother use ExoPlayer today."},"548":{"dur":1,"text":"And it's not just\na handful either."},"550":{"dur":3,"text":"There are actually over 140,000\napplications on the Play Store"},"554":{"dur":3,"text":"today that are making\nuse of ExoPlayer."},"557":{"dur":1,"text":"If your app's one\nof these, thank you"},"559":{"dur":1,"text":"very much for your adoption."},"560":{"dur":3,"text":"And please keep\nsending us feedback."},"563":{"dur":2,"text":"It's really important\nto us and it actually"},"565":{"dur":3,"text":"does guide a lot\nof what we work on."},"569":{"dur":2,"text":"So next up we're going\nto dive in some code"},"571":{"dur":1,"text":"and show a simple example."},"572":{"dur":3,"text":"And for that I'm going to\nhand you over to Andrew."},"576":{"dur":1,"text":"ANDREW LEWIS: Hi, everyone."},"578":{"dur":4,"text":"[APPLAUSE]"},"582":{"dur":2,"text":"So let's imagine you've\ngot an existing app"},"585":{"dur":3,"text":"and you'd like to\nadd an MP4 player"},"588":{"dur":2,"text":"to that app-- so just\nshowing a simple video"},"590":{"dur":1,"text":"in your existing app."},"591":{"dur":1,"text":"I'm going to go through\nthe minimal changes"},"593":{"dur":2,"text":"that you need to make\nto use ExoPlayer."},"596":{"dur":1,"text":"So the first step is\ngoing to be to add"},"598":{"dur":2,"text":"a dependency on ExoPlayer And\nthere are two main options"},"600":{"dur":1,"text":"here."},"602":{"dur":3,"text":"You can either bring in the\nwhole of the ExoPlayer library."},"605":{"dur":2,"text":"And that will include support\nfor adaptive streaming formats"},"608":{"dur":1,"text":"like DASH and HLS."},"609":{"dur":4,"text":"And for that you can use this\nline in your build.gradle file."},"613":{"dur":1,"text":"This is kind of the\nkitchen sink option."},"615":{"dur":2,"text":"So the alternative is that\nyou can just pick and choose"},"618":{"dur":2,"text":"the specific modules from\nthe ExoPlayer library"},"620":{"dur":1,"text":"that you need."},"621":{"dur":2,"text":"So for this example, I'm\ngoing to add a dependency"},"623":{"dur":2,"text":"on the core library, which\ncontains the main player"},"626":{"dur":4,"text":"obviously, and also support\nfor regular media for like MP4s"},"630":{"dur":1,"text":"and MP3s."},"632":{"dur":3,"text":"And there's also a dependency\nhere on the UI library,"},"636":{"dur":2,"text":"which brings in\nSimpleExoPlayerView, which"},"639":{"dur":3,"text":"is a minimal but\ncustomizable player that you"},"642":{"dur":0,"text":"can put in your app."},"646":{"dur":1,"text":"So once we've added\nthe dependency,"},"648":{"dur":2,"text":"the next step is to\nadd some code snippets"},"650":{"dur":5,"text":"to your activity, which will\ncreate a player and use it."},"655":{"dur":1,"text":"So we have this\nExoPlayer factory,"},"657":{"dur":4,"text":"which has several methods for\ncreating player instances."},"661":{"dur":1,"text":"And this is the\neasiest to use one."},"663":{"dur":3,"text":"It takes a context\nand a track selector."},"666":{"dur":1,"text":"And for this simple\nuse case we can"},"668":{"dur":2,"text":"use the\nDefaultTrackSelector which"},"670":{"dur":4,"text":"has sensible defaults for almost\neverything you'd want to do."},"674":{"dur":1,"text":"Once we've created the\nplayer, the next step"},"676":{"dur":2,"text":"is to drop a view\ninto your app's layout"},"679":{"dur":2,"text":"and then bind it to the player\nby calling the setPlayer"},"681":{"dur":2,"text":"method."},"684":{"dur":2,"text":"Now most importantly, we need to\ntell the player exactly what we"},"687":{"dur":1,"text":"want to play."},"688":{"dur":2,"text":"And for this we're going\nto use a MediaSource."},"690":{"dur":3,"text":"In ExoPlayer, everything that\nyou can play is a MediaSource."},"694":{"dur":1,"text":"It's responsible for\nloading the media"},"696":{"dur":2,"text":"and providing it to the player."},"698":{"dur":3,"text":"So we're going to create an\nExtractorMediaSource, which"},"701":{"dur":3,"text":"has support for regular\nmedia files like MP4s, MP3s,"},"705":{"dur":2,"text":"and Matroska files and so on."},"707":{"dur":1,"text":"So you pass that to\nthe prepare method."},"709":{"dur":1,"text":"And then we call\nsetPlayWhenReady"},"711":{"dur":2,"text":"to tell the player that as\nsoon as buffering is completed"},"713":{"dur":4,"text":"and playback can begin,\nthen playback should start."},"718":{"dur":2,"text":"And finally it's very\nimportant that you release"},"720":{"dur":2,"text":"the player when\nplayback is complete"},"722":{"dur":3,"text":"because the player holds\nsystem resources like codecs"},"726":{"dur":2,"text":"and it uses memory for buffers."},"728":{"dur":1,"text":"So these code snippets\nwould generally"},"730":{"dur":3,"text":"go in activity lifecycle\nmethods in your app."},"737":{"dur":2,"text":"So this is a video\nof what you got."},"739":{"dur":3,"text":"I've got a nice video of\nthe skyline of London."},"743":{"dur":2,"text":"And you can see there\nthat it had basic playback"},"745":{"dur":4,"text":"controls like play and\npause button and a seek bar."},"749":{"dur":1,"text":"So if you'd like\nto try this out,"},"751":{"dur":2,"text":"there's a codelab being\npublished as part of I\/O, which"},"754":{"dur":1,"text":"you can go and try out."},"755":{"dur":1,"text":"And there's also\na developer guide"},"757":{"dur":2,"text":"on our project page, which will\nwalk you through these steps."},"763":{"dur":2,"text":"So as I mentioned,\neverything that you can play"},"765":{"dur":1,"text":"is a media source."},"767":{"dur":3,"text":"And it's responsible for\nloading media for the player."},"770":{"dur":2,"text":"And in that example we\nused ExtractorMediaSource,"},"772":{"dur":2,"text":"but there are actually\nother more advanced media"},"774":{"dur":2,"text":"sources available."},"777":{"dur":2,"text":"So you may have\nheard of DASH, which"},"779":{"dur":2,"text":"is a specification\nfor streaming which"},"781":{"dur":2,"text":"allows for adaptation\nbetween qualities"},"784":{"dur":2,"text":"to handle varying\nnetwork conditions."},"786":{"dur":4,"text":"And we provide DASHMediaSource\nfor support for DASH."},"791":{"dur":2,"text":"We also have a HLS media\nsource for supporting"},"793":{"dur":6,"text":"HTTP live streaming and a media\nsource for SmoothStreaming."},"800":{"dur":2,"text":"And with our recent\nv2 release, we've"},"802":{"dur":3,"text":"also added a new category\nof MediaSources which"},"805":{"dur":1,"text":"are designed for composition."},"807":{"dur":2,"text":"And by composition we\nmean joining together"},"809":{"dur":1,"text":"other media sources."},"811":{"dur":1,"text":"Why would we want to do this?"},"812":{"dur":1,"text":"Well I'll go through an example."},"814":{"dur":3,"text":"So let's say we've got a\nvideo that we want to play"},"817":{"dur":2,"text":"and also some subtitles,\nwhich are in a separate file,"},"820":{"dur":2,"text":"an SRT file."},"822":{"dur":3,"text":"In that case, we can create\nan ExtractorMediaSource"},"825":{"dur":3,"text":"to load the video, a single\nsample media source, which"},"829":{"dur":2,"text":"is going to load the SRT file."},"832":{"dur":3,"text":"And then we're going to play the\nsubtitles alongside the video."},"835":{"dur":1,"text":"Now you could try\nand do this yourself"},"837":{"dur":1,"text":"by looking at the\nplayer position"},"838":{"dur":3,"text":"and synchronizing the playback\nposition with the subtitles"},"841":{"dur":0,"text":"that you're showing."},"842":{"dur":2,"text":"But this is actually quite\ndifficult to do in general."},"845":{"dur":3,"text":"It's much easier to use\na MergingMediaSource."},"849":{"dur":2,"text":"And the MergingMediaSource\njust takes the video"},"851":{"dur":1,"text":"you want to play\nand the subtitles"},"853":{"dur":1,"text":"and handles everything for you."},"855":{"dur":1,"text":"So it will handle\nthe synchronization."},"856":{"dur":2,"text":"And then they'll be\nshown in the player."},"861":{"dur":4,"text":"Another time you'd use\ncomposition is for playlists."},"866":{"dur":4,"text":"So in this case, say you\nhave an album of MP3s"},"870":{"dur":3,"text":"that you want to\nplay back to back."},"873":{"dur":1,"text":"You could try and\ndo this yourself"},"875":{"dur":3,"text":"by playing the first stream\nand then swapping out"},"878":{"dur":1,"text":"the source for the next one."},"879":{"dur":2,"text":"But that's not going to be\ngreat because the player is"},"881":{"dur":3,"text":"going to buffer when\nyou swap out the source."},"885":{"dur":4,"text":"So we've added a\nConcatenatingMediaSource,"},"889":{"dur":2,"text":"which takes a list\nof sources that you"},"891":{"dur":2,"text":"want to combine together\nand then plays them"},"894":{"dur":2,"text":"back to back with a\nconsistent buffering policy."},"897":{"dur":2,"text":"So if you tell the player to\nhave three seconds of media"},"899":{"dur":1,"text":"buffered at all\ntimes, then it will"},"901":{"dur":2,"text":"ensure that that is the\ncase even across transitions"},"904":{"dur":1,"text":"from one source to the next."},"905":{"dur":2,"text":"And this also supports\ngapless playback metadata."},"908":{"dur":2,"text":"So you can play the album\nof MP3s with completely"},"910":{"dur":0,"text":"seamless playback."},"914":{"dur":1,"text":"And also composition\nis very flexible."},"916":{"dur":2,"text":"So we can combine those\ntwo examples that we saw."},"918":{"dur":3,"text":"So we concatenate a video\nwith the merged source"},"922":{"dur":3,"text":"that we created earlier\nthat had subtitles."},"925":{"dur":2,"text":"And if you do that, this is\nwhat you're going to get."},"928":{"dur":2,"text":"So the first video plays."},"930":{"dur":1,"text":"And then when the\nfirst video completes,"},"932":{"dur":2,"text":"we get a seamless transition\nto the next video."},"934":{"dur":1,"text":"And you can see the\nsubtitles are coming up"},"936":{"dur":0,"text":"as we'd expect there."},"941":{"dur":1,"text":"So this is great."},"942":{"dur":4,"text":"We can play these\ncompositions of media."},"946":{"dur":1,"text":"So we implemented this."},"948":{"dur":2,"text":"And then we thought,\nhold on a moment."},"950":{"dur":1,"text":"We've got this seekTo\nmethod on the player."},"952":{"dur":3,"text":"But now we've got playlists\nthat we want to play back"},"956":{"dur":1,"text":"that have multiple sources."},"957":{"dur":2,"text":"And a timestamp is not\nreally enough information"},"960":{"dur":3,"text":"to know where you want\nto seek to anymore."},"963":{"dur":2,"text":"So we thought about\nthis, and we thought"},"965":{"dur":2,"text":"about other types of media\nsources you might want to play,"},"968":{"dur":1,"text":"like live media sources."},"970":{"dur":4,"text":"And we realized that we really\nneed a way to expose to the app"},"974":{"dur":1,"text":"the structure of\nthe media source"},"976":{"dur":2,"text":"and what media is available."},"979":{"dur":5,"text":"So to solve the issue\nof needing to know which"},"984":{"dur":2,"text":"source you want to seek\ninto, we added a parameter"},"987":{"dur":2,"text":"that tells the player\nwhich of the source"},"989":{"dur":4,"text":"is in the playlist\nyou want to seek to."},"993":{"dur":1,"text":"And then we thought,\nwe're going to need"},"995":{"dur":1,"text":"a description of\nthe media available."},"997":{"dur":4,"text":"So we added a new data\nstructure called a timeline."},"1001":{"dur":3,"text":"And a timeline basically\nis a representation"},"1004":{"dur":2,"text":"of all the media that is\navailable in a media source."},"1007":{"dur":2,"text":"And it consists of\na list of windows."},"1010":{"dur":1,"text":"Each of those\nwindows corresponds"},"1011":{"dur":1,"text":"to one item in a playlist."},"1013":{"dur":2,"text":"And it describes which\nparts of the media"},"1015":{"dur":1,"text":"you can seek to at\nany given moment."},"1017":{"dur":1,"text":"So I'm going to show\nan example of this"},"1019":{"dur":1,"text":"to make it a bit clearer."},"1021":{"dur":2,"text":"So let's imagine we've\ngot a single source where"},"1023":{"dur":1,"text":"you can seek anywhere."},"1025":{"dur":2,"text":"The red line here\nrepresents one window."},"1028":{"dur":3,"text":"The dot at the left\nhand side represents"},"1031":{"dur":3,"text":"the default start position for\nthis media source is at zero."},"1035":{"dur":1,"text":"So when the player\nreaches the source,"},"1037":{"dur":3,"text":"if it's in a concatenation,\nthen it will go to time zero."},"1040":{"dur":1,"text":"And the window\nextends all the way"},"1041":{"dur":2,"text":"to the duration of\nthe media source."},"1044":{"dur":3,"text":"A more interesting case is if\nyou concatenate two sources"},"1048":{"dur":1,"text":"And in this case, you\nend up with a timeline"},"1050":{"dur":1,"text":"that has two windows."},"1052":{"dur":1,"text":"And as you can see,\nfor both windows"},"1054":{"dur":4,"text":"the start position is at the\nbeginning of that source."},"1058":{"dur":3,"text":"What about if we have\na live media source?"},"1061":{"dur":2,"text":"Well in this case, the\ntimeline is actually dynamic."},"1064":{"dur":2,"text":"So as the live event\nprogresses, more media"},"1066":{"dur":1,"text":"is becoming available\nin the window."},"1068":{"dur":1,"text":"And you can see that\nthe default position"},"1070":{"dur":2,"text":"is tracking the live edge."},"1073":{"dur":1,"text":"And then when the\nlive event completes,"},"1075":{"dur":2,"text":"the default position snaps\nback to the beginning"},"1077":{"dur":1,"text":"so that this becomes\na regular stream where"},"1079":{"dur":1,"text":"playback begins at\nthe beginning and you"},"1081":{"dur":1,"text":"can seek to any position."},"1085":{"dur":1,"text":"And we can build on\ntop of this to have"},"1086":{"dur":2,"text":"concatenations of regular\nstreams and live streams."},"1089":{"dur":1,"text":"And this works in\nthe way you'd expect."},"1091":{"dur":2,"text":"So when you concatenate\nsources, you"},"1093":{"dur":1,"text":"end up with a time\nline that consists"},"1095":{"dur":1,"text":"of the concatenation\nof the windows"},"1096":{"dur":1,"text":"of those individual sources."},"1100":{"dur":2,"text":"So you'll see this\ntimeline exposed"},"1103":{"dur":1,"text":"in ExoPlayer's top level API."},"1104":{"dur":2,"text":"You can get the\ncurrent timeline."},"1107":{"dur":2,"text":"You can pass in a window index\nwhen you seek the player."},"1109":{"dur":2,"text":"So you can say please seek to\nthe second item in the playlist"},"1112":{"dur":1,"text":"at a particular offset."},"1114":{"dur":2,"text":"And you can inspect\ndetails about these windows"},"1117":{"dur":4,"text":"like where the window\nstarts and how long it is."},"1121":{"dur":2,"text":"Now back over to Ollie to\ntalk a bit about the internals"},"1123":{"dur":0,"text":"of the players."},"1129":{"dur":1,"text":"OLIVER WOODMAN:\nSo as Andrew says,"},"1131":{"dur":4,"text":"we're now going to dive in\na bit deeper to ExoPlayer,"},"1135":{"dur":3,"text":"and really talk about\nwhat happens internally"},"1138":{"dur":1,"text":"during a playback."},"1139":{"dur":1,"text":"And the reason that\nwe're going to do this"},"1141":{"dur":2,"text":"is that after we've\ntalked about some"},"1143":{"dur":1,"text":"of the internal\ncomponents, we're"},"1145":{"dur":3,"text":"then going to go and talk about\nhow we might customize those"},"1148":{"dur":4,"text":"to very fine tune the player\nto your specific use case."},"1152":{"dur":1,"text":"So here we have an\nExoPlayer and it's just"},"1154":{"dur":3,"text":"received its MediaSource\nthat it's going to play back."},"1158":{"dur":3,"text":"So what are the important\ninternal components?"},"1161":{"dur":1,"text":"Well the first\nimportant component"},"1163":{"dur":2,"text":"that we should\nmention are renderers."},"1166":{"dur":1,"text":"A renderer is\nresponsible for rendering"},"1167":{"dur":2,"text":"a single component of media."},"1170":{"dur":4,"text":"So a VideoRenderer will\ndecode and display just video."},"1174":{"dur":3,"text":"And an AudioRenderer similarly\nwill decode and output"},"1177":{"dur":2,"text":"just audio."},"1179":{"dur":1,"text":"And a real ExoPlayer\ninstance will"},"1181":{"dur":2,"text":"have additional renderers for\nthings like text and metadata"},"1183":{"dur":0,"text":"as well."},"1184":{"dur":2,"text":"But we're going to omit\nthose from this diagram just"},"1186":{"dur":2,"text":"for simplicity."},"1188":{"dur":3,"text":"Another component that is\nimportant is a TrackSelector."},"1192":{"dur":1,"text":"A media source may\nactually expose"},"1194":{"dur":3,"text":"multiple tracks that could\nbe played back by the player."},"1198":{"dur":2,"text":"Particularly if you have a\nDASH or HLS adaptive playback,"},"1201":{"dur":2,"text":"the MediaSource may actually\nexpose multiple video streams"},"1203":{"dur":3,"text":"at different resolutions, and\nmaybe multiple audio languages"},"1207":{"dur":1,"text":"as well."},"1208":{"dur":1,"text":"And its the job of\nthe TrackSelector"},"1210":{"dur":1,"text":"to select the subset\nof those tracks"},"1211":{"dur":4,"text":"that should be buffered\nand played by the player."},"1216":{"dur":3,"text":"The last component that we need\nto talk about is a LoadControl."},"1219":{"dur":2,"text":"A LoadControl\nactually has two jobs."},"1222":{"dur":2,"text":"Its first job is to\ntell the MediaSource"},"1225":{"dur":2,"text":"whether it should be buffering\nat this point in time."},"1227":{"dur":1,"text":"And this is indicated\nin this diagram"},"1229":{"dur":2,"text":"by the green dots on\nthe left hand side."},"1232":{"dur":1,"text":"So since we haven't\nstarted playback yet,"},"1234":{"dur":1,"text":"we don't have anything buffered."},"1235":{"dur":2,"text":"And therefore it's green to\nrepresent that a MediaSource"},"1237":{"dur":1,"text":"should be buffering."},"1239":{"dur":2,"text":"Its second job is to tell\nthe player when playback"},"1242":{"dur":1,"text":"is actually allowed to start."},"1244":{"dur":2,"text":"This is represented by\nthe right hand side dot."},"1246":{"dur":1,"text":"And because we don't\nhave any media yet,"},"1248":{"dur":5,"text":"it's obviously too soon to start\nplayback and therefore is red."},"1253":{"dur":3,"text":"One of the components that we\nshould mention are DataSources."},"1257":{"dur":3,"text":"MediaSources use DataSources\nto load the actual media"},"1260":{"dur":3,"text":"that I'm going to provide\nto the player for playback."},"1266":{"dur":3,"text":"So I've kind of given you\nsome major components."},"1270":{"dur":1,"text":"But let's talk a\nlittle bit about how"},"1272":{"dur":4,"text":"these components actually\ninteract during a playback."},"1276":{"dur":1,"text":"Well we haven't\nbuffered anything yet,"},"1278":{"dur":1,"text":"and LoadControl is\ntelling the MediaSource"},"1280":{"dur":2,"text":"that it should be buffering."},"1282":{"dur":2,"text":"And so the MediaSource is\ngoing to start loading data"},"1284":{"dur":3,"text":"through its DataSource."},"1288":{"dur":1,"text":"And after it's\nloaded enough media,"},"1289":{"dur":3,"text":"probably not very much, just a\nheader for a normal media file,"},"1293":{"dur":1,"text":"the MediaSource is going\nto be able to work out"},"1295":{"dur":2,"text":"what tracks it can actually\nexpose to the player."},"1298":{"dur":3,"text":"And it does this by exposing\nsomething called TrackGroups."},"1302":{"dur":2,"text":"Now we know the TrackSelector\nis the thing that's"},"1304":{"dur":3,"text":"going to choose which of\nthe tracks to actually play."},"1307":{"dur":2,"text":"But the TrackSelector\nneeds something else."},"1310":{"dur":1,"text":"And the reason it\nneeds something else"},"1311":{"dur":2,"text":"is that different devices\nhave different capabilities."},"1314":{"dur":2,"text":"And in particular\nthe VideoRenderer"},"1316":{"dur":3,"text":"may only be able to decode up\nto a particular resolution."},"1320":{"dur":4,"text":"And so even if the MediaSource\nexposes a 4K video stream,"},"1324":{"dur":1,"text":"if you're on a low\nend device, it's"},"1326":{"dur":1,"text":"not going to make sense\nfor the TrackSelector"},"1328":{"dur":3,"text":"to actually choose that stream."},"1331":{"dur":2,"text":"And the way we represent\nthese kind of capabilities"},"1333":{"dur":2,"text":"in the player is we have each\nrenderer expose something"},"1336":{"dur":2,"text":"called a\nRendererCapabilities object"},"1338":{"dur":5,"text":"that describes specifically what\nit's actually able to handle."},"1344":{"dur":2,"text":"So what happens next\nis that the TrackGroups"},"1346":{"dur":3,"text":"and the RendererCapabilities\nare fed into the TrackSelector."},"1349":{"dur":1,"text":"The TrackSelector\ndoes its magic."},"1351":{"dur":1,"text":"It produces a selection."},"1353":{"dur":4,"text":"And that selection goes\nback to the MediaSource."},"1357":{"dur":1,"text":"At this point the\nMediaSource knows"},"1358":{"dur":1,"text":"what it's going to\nbuffer, because it"},"1360":{"dur":1,"text":"knows what the\ntrack selection is,"},"1362":{"dur":3,"text":"and so it allocates\nsome buffers."},"1365":{"dur":1,"text":"Of course we still\nhaven't actually"},"1367":{"dur":2,"text":"loaded any useful\nmedia for playback."},"1369":{"dur":4,"text":"The LoadControl is still\ntelling the MediaSource to load."},"1373":{"dur":3,"text":"And therefore the MediaSource\ncontinues to load data"},"1376":{"dur":1,"text":"and it starts to\nfill its buffers."},"1378":{"dur":1,"text":"And what you can see\nhere is that as soon"},"1380":{"dur":2,"text":"as these buffers\nstart to get full,"},"1383":{"dur":2,"text":"the renderers actually start\nconsuming from those buffers"},"1386":{"dur":2,"text":"and feeding that media data\nthrough their decoders,"},"1388":{"dur":3,"text":"getting ready for playback."},"1391":{"dur":2,"text":"So at this point we\nhave some media buffers."},"1393":{"dur":2,"text":"The renderers have\ndecoded a bit of media,"},"1395":{"dur":2,"text":"so they're kind of\nprimed and ready to go."},"1398":{"dur":1,"text":"And so LoadControl\nmay at this point"},"1400":{"dur":1,"text":"actually start the playback."},"1402":{"dur":3,"text":"So that little red\ncircle has gone green."},"1405":{"dur":3,"text":"And of course the MediaSource\nis continuing to buffer."},"1409":{"dur":3,"text":"And at this point we've actually\nbuffered quite a lot of media."},"1412":{"dur":3,"text":"So these buffers on the left\nhand side are quite full."},"1416":{"dur":3,"text":"Of course we don't want to\nbuffer arbitrarily far ahead."},"1419":{"dur":2,"text":"So the LoadControl may stop\nbuffering at this point."},"1422":{"dur":1,"text":"Because playbacks\ncontinuing, the renderers"},"1423":{"dur":1,"text":"are still consuming."},"1425":{"dur":2,"text":"And therefore these buffers\nare draining back down"},"1427":{"dur":2,"text":"to a lower level."},"1430":{"dur":1,"text":"Of course we don't want\nthe buffers to run out,"},"1432":{"dur":3,"text":"so the LoadControl might\ntoggle buffering on again."},"1435":{"dur":1,"text":"And so you see this\npattern emerging"},"1436":{"dur":2,"text":"of data being pulled\nthrough the DataSource"},"1438":{"dur":3,"text":"into MediaSource and\nout to the renderers."},"1442":{"dur":1,"text":"One additional complexity\nto keep in mind"},"1444":{"dur":2,"text":"when you're thinking about\nthis is, as Andrew said,"},"1446":{"dur":3,"text":"a MediaSource can actually be a\nconcatenation of, for example,"},"1449":{"dur":1,"text":"different videos."},"1451":{"dur":2,"text":"And those videos may have a\ndifferent selection of tracks"},"1454":{"dur":2,"text":"available."},"1456":{"dur":1,"text":"And so as this\nprocess is continuing,"},"1458":{"dur":2,"text":"you may actually get\nadditional track selections"},"1460":{"dur":3,"text":"taking place at the same time."},"1463":{"dur":2,"text":"And so here we have the\nplayback continuing."},"1465":{"dur":1,"text":"The buffers are filling\nup and draining down."},"1467":{"dur":2,"text":"And you see this pattern of\ndata being intermittently read"},"1470":{"dur":2,"text":"through the DataSource\nand continuously consumed"},"1473":{"dur":1,"text":"by the renderers."},"1479":{"dur":3,"text":"So now we know a bit about how\nthe important components work"},"1483":{"dur":2,"text":"during a playback."},"1485":{"dur":2,"text":"Let's talk a little bit\nabout how we might customize"},"1488":{"dur":3,"text":"those internal behaviors."},"1492":{"dur":3,"text":"So here is code snippet\nAndrew showed you earlier."},"1495":{"dur":3,"text":"We're creating an ExoPlayer\nwith ExoPlayerFactory."},"1499":{"dur":1,"text":"But there are actually\nmore complicated methods"},"1501":{"dur":3,"text":"for creating an ExoPlayer\nThis is one of them."},"1504":{"dur":2,"text":"And you can see that what we're\ninjecting into this player"},"1506":{"dur":2,"text":"instance are exactly the\ncomponents that we've just"},"1509":{"dur":2,"text":"been talking about-- so the\nrenderers, a TrackSelector,"},"1512":{"dur":0,"text":"and a LoadControl."},"1513":{"dur":4,"text":"And here we're just inserting\ndefault implementations."},"1518":{"dur":2,"text":"So let's look at how we might\nfine tune the player by pulling"},"1520":{"dur":1,"text":"one of those out."},"1521":{"dur":1,"text":"So we'll look at\nthe LoadControl."},"1523":{"dur":4,"text":"And here we're still using\nthe default implementation."},"1527":{"dur":3,"text":"But we can actually pass some\nvariables into the constructor"},"1531":{"dur":2,"text":"to manipulate its behavior."},"1533":{"dur":1,"text":"So this default\nLoadControl is saying"},"1534":{"dur":3,"text":"that it wants between 15 and\n30 seconds in the buffer,"},"1538":{"dur":1,"text":"and it wants to\nstart playback when"},"1539":{"dur":4,"text":"there's 2.5 seconds buffered."},"1544":{"dur":1,"text":"So what does that\nlooks like in terms"},"1545":{"dur":1,"text":"of wall clock time\nversus duration"},"1547":{"dur":2,"text":"of media in the buffer?"},"1549":{"dur":1,"text":"Well the buffer starts to fill."},"1550":{"dur":2,"text":"And at 2.5 seconds we\nallow playback to start,"},"1553":{"dur":3,"text":"as indicated by the\nlittle orange dot."},"1556":{"dur":2,"text":"And the LoadControl allows\nbuffering to continue up"},"1559":{"dur":2,"text":"until 30 seconds."},"1562":{"dur":1,"text":"Buffering will then be\nturned off for a while."},"1564":{"dur":1,"text":"And the MediaSource\nbuffers would drain down"},"1566":{"dur":3,"text":"to 15 seconds, which\nis the lower limit."},"1569":{"dur":1,"text":"And buffering would\nthen turn on again."},"1570":{"dur":2,"text":"And so you get this\nkind of sawtooth pattern"},"1572":{"dur":2,"text":"in terms of buffering behavior."},"1575":{"dur":1,"text":"So at this point it's\nprobably quite clear"},"1577":{"dur":2,"text":"that you can start to really\ninfluence this behavior."},"1580":{"dur":2,"text":"So you could change this\nnumber from 15 to 25"},"1583":{"dur":1,"text":"if you're not comfortable\nwith allowing a buffer"},"1585":{"dur":2,"text":"to drain that low."},"1587":{"dur":2,"text":"And because we understand how\ndefault LoadControl works,"},"1589":{"dur":2,"text":"we can show the new graph."},"1591":{"dur":3,"text":"So here the buffer is kept\nmore full at all points"},"1594":{"dur":1,"text":"during the playback."},"1596":{"dur":3,"text":"And buffering is toggled on\nand off far more frequently."},"1600":{"dur":1,"text":"We could also\ndecide we might want"},"1601":{"dur":3,"text":"to be more conservative when\nwe allow playback to start."},"1605":{"dur":4,"text":"So we bump up the value from\n2.5 seconds to 10 seconds."},"1609":{"dur":1,"text":"And again we can\nunderstand the difference"},"1611":{"dur":3,"text":"in terms of this graph."},"1615":{"dur":2,"text":"We can now take our\nmodified default LoadControl"},"1617":{"dur":3,"text":"and inject it back\ninto the player."},"1620":{"dur":2,"text":"So what if\nLoadControl just isn't"},"1623":{"dur":3,"text":"flexible enough for the actual\nbuffering policy that you want?"},"1626":{"dur":1,"text":"Well you can go further\nand you can just"},"1628":{"dur":3,"text":"implement your own\nLoadControl from scratch."},"1631":{"dur":1,"text":"So one of the\nmethods that you have"},"1632":{"dur":3,"text":"to implement if you do this is\ncalled shouldContinueLoading."},"1636":{"dur":1,"text":"It returns a boolean."},"1637":{"dur":1,"text":"It's polled during playback."},"1639":{"dur":1,"text":"And this is exactly\nthe method that's"},"1640":{"dur":2,"text":"actually controlling whether\nthe MediaSource buffers or not."},"1643":{"dur":3,"text":"And you could implement all\nkinds of behaviors and logics"},"1647":{"dur":4,"text":"in your own implementation."},"1651":{"dur":2,"text":"You can do similar things with\nthe TrackSelector as well."},"1653":{"dur":3,"text":"So in this case, we can\nactually get some parameters,"},"1657":{"dur":2,"text":"and we can start manipulating\nthe way the default"},"1660":{"dur":2,"text":"TrackSelector actually\nchooses its tracks."},"1662":{"dur":5,"text":"So here we're limiting the\nvideo tracks to SD, so 480p."},"1667":{"dur":2,"text":"And you might want to do this\nif you know that your user is"},"1670":{"dur":2,"text":"on a metered mobile connection."},"1673":{"dur":1,"text":"And even if they have\nreally great bandwidth,"},"1675":{"dur":2,"text":"you probably don't want to use\nall of their data very quickly."},"1677":{"dur":2,"text":"So you might want to\nkeep a cap on the quality"},"1679":{"dur":1,"text":"that you deliver."},"1681":{"dur":3,"text":"Similarly if you know\nthat your user is German,"},"1684":{"dur":2,"text":"you might select a preferred\naudio language for the case"},"1687":{"dur":1,"text":"where there are multiple\naudio tracks exposed"},"1689":{"dur":1,"text":"by the MediaSource."},"1691":{"dur":2,"text":"And you can certainly\nmodify parameters back"},"1693":{"dur":3,"text":"on the selector to actually\nactivate this new behavior."},"1699":{"dur":2,"text":"Again if the default\nimplementation of TrackSelector"},"1701":{"dur":2,"text":"isn't suitable, you can go\na step further and implement"},"1703":{"dur":1,"text":"your own TrackSelector."},"1705":{"dur":1,"text":"One of the methods\nyou need to implement"},"1707":{"dur":1,"text":"if you do this is selectTracks."},"1709":{"dur":2,"text":"And hopefully you can map\nthe signature of this method"},"1712":{"dur":2,"text":"back to the diagram\nwe saw earlier."},"1714":{"dur":2,"text":"It's receiving the\ncapabilities from the renderers"},"1716":{"dur":1,"text":"and the TrackGroups\nfrom the MediaSource,"},"1718":{"dur":4,"text":"and it's generating a selection."},"1722":{"dur":1,"text":"And of course the same\ntricks can be applied"},"1724":{"dur":2,"text":"for the renderers as well."},"1726":{"dur":2,"text":"Implementing your own\nVideoRenderer from scratch"},"1728":{"dur":2,"text":"is a pretty advanced\ncustomization,"},"1731":{"dur":1,"text":"but you could do it if\nyou really wanted to"},"1733":{"dur":3,"text":"and you kind of have a good\nhandle on exactly what you"},"1736":{"dur":2,"text":"have to do to achieve that."},"1739":{"dur":2,"text":"And you could extend\ndefault RenderersFactory,"},"1741":{"dur":2,"text":"override the\nbuildVideoRenderers method,"},"1743":{"dur":2,"text":"and actually inject your own\nVideoRenderer into the player"},"1746":{"dur":2,"text":"instead of the default that\nwould normally be created."},"1752":{"dur":2,"text":"ANDREW LEWIS: OK, great."},"1754":{"dur":2,"text":"So hopefully you can\nsee a pattern emerging"},"1756":{"dur":2,"text":"in each of the examples\nof customization"},"1759":{"dur":1,"text":"that Ollie talked about."},"1761":{"dur":2,"text":"So the first step\nwas establishing"},"1763":{"dur":2,"text":"which component in the\nplayer we need to customize,"},"1766":{"dur":4,"text":"whether it's the TrackSelector\nor the LoadControl."},"1771":{"dur":2,"text":"Then you look at the\nAPI for that component"},"1773":{"dur":4,"text":"and see if there's a way to\ncustomize its behavior using,"},"1777":{"dur":3,"text":"say, a different parameter,\nas we did with LoadControl."},"1781":{"dur":1,"text":"If that's not a\npossibility, then you"},"1782":{"dur":1,"text":"might be able to\nextend or actually"},"1784":{"dur":2,"text":"implement your own version of\nthis component from scratch."},"1790":{"dur":2,"text":"So I'm just going to do one\nmore example of customization"},"1792":{"dur":2,"text":"on the MediaSource\nside this time."},"1795":{"dur":2,"text":"So imagine that we need\nto send an authorization"},"1798":{"dur":5,"text":"header with each HTTP request\nthat a MediaSource makes."},"1803":{"dur":1,"text":"Well, we know that\nwe are passing"},"1805":{"dur":3,"text":"in a HttpDataSourceFactory."},"1808":{"dur":3,"text":"And this has a convenient method\nto get the default request"},"1811":{"dur":1,"text":"properties."},"1813":{"dur":2,"text":"And by getting the default\nrequest properties,"},"1816":{"dur":3,"text":"we can actually set a new header\nto set the authorization header"},"1819":{"dur":1,"text":"on the HTTP request."},"1821":{"dur":3,"text":"And once you've done that, you\npass the httpDataSourceFactory"},"1824":{"dur":1,"text":"into the MediaSource."},"1826":{"dur":2,"text":"And that header will appear\non all requests that it makes."},"1831":{"dur":2,"text":"As another example,\nlet's say that you"},"1833":{"dur":2,"text":"know that users are going to\nrewind videos quite a lot,"},"1836":{"dur":3,"text":"so you want to add a cache\nin so that the player doesn't"},"1840":{"dur":3,"text":"repeatedly load the same\nmedia off the network."},"1844":{"dur":3,"text":"ExoPlayer has a simple\ncache which you can use."},"1847":{"dur":1,"text":"And in this example\nI'm posting in a"},"1849":{"dur":2,"text":"LeastRecentlyUsedCacheEvictor."},"1851":{"dur":1,"text":"So the way this is\ngoing to work is"},"1853":{"dur":2,"text":"the cache has a maximum size."},"1855":{"dur":2,"text":"But if the media is\nlonger than that, then"},"1858":{"dur":1,"text":"when the media\nfinishes, if they've"},"1859":{"dur":1,"text":"watched the media\nall the way through,"},"1861":{"dur":1,"text":"then the cache\nwill actually have"},"1862":{"dur":2,"text":"started to evict the\nvery beginning of it."},"1867":{"dur":3,"text":"So this cache gets passed\ninto a CacheDataSourceFactory."},"1871":{"dur":2,"text":"And it also needs to take\na normal DataSource which"},"1874":{"dur":4,"text":"is used if there's a cache miss\nand also to populate the cache."},"1878":{"dur":1,"text":"And then you pass the\nCacheDataSourceFactory"},"1880":{"dur":1,"text":"to the ExtractorMediaSource."},"1882":{"dur":2,"text":"So hopefully to make this\na little bit clearer,"},"1885":{"dur":1,"text":"let's see how it fits\nin with the player"},"1886":{"dur":2,"text":"architecture we saw earlier."},"1889":{"dur":2,"text":"This cache is actually going\nto sit between the MediaSource"},"1892":{"dur":1,"text":"and the HttpDataSource."},"1894":{"dur":2,"text":"And when the MediaSource\nrequests data,"},"1896":{"dur":2,"text":"it's first going to\nlook it up in the cache."},"1898":{"dur":2,"text":"If there's a cache miss, then\nit's going to go to the network"},"1901":{"dur":2,"text":"and use the HttpDataSource."},"1903":{"dur":2,"text":"Then when that\nrequest is satisfied,"},"1905":{"dur":1,"text":"it's going to come back\nand fill in the cache"},"1907":{"dur":2,"text":"so that next time the\nMediaSource requests"},"1909":{"dur":2,"text":"the same chunk, then hopefully\nit's going to be in the cache."},"1916":{"dur":3,"text":"So we talked about how\nthe kind of extreme case"},"1919":{"dur":3,"text":"of customization is\nproviding a MediaSource"},"1923":{"dur":4,"text":"or whatever that you've\nimplemented yourself."},"1927":{"dur":2,"text":"So I'm going to go through\nan example of doing that."},"1929":{"dur":1,"text":"Let's say that you've\ngot an app where you're"},"1931":{"dur":1,"text":"showing some\ncontent, but now you"},"1932":{"dur":4,"text":"want to monetize that content\nby showing ads alongside it."},"1937":{"dur":2,"text":"Let's have a think about\nwhat the timeline is going"},"1940":{"dur":1,"text":"to look like in this case."},"1942":{"dur":2,"text":"Well, it may be very simple."},"1944":{"dur":1,"text":"In this example on\nthe screen there's"},"1946":{"dur":3,"text":"just one ad at the\nbeginning, a pre-roll ad."},"1949":{"dur":2,"text":"Or it may be more complicated."},"1951":{"dur":2,"text":"So in this case\nthere's a pre-roll ad"},"1954":{"dur":2,"text":"on a mid-roll ad\nand a post-roll ad."},"1956":{"dur":4,"text":"And they kind of\nsplit up the content."},"1960":{"dur":1,"text":"So at first glance\nyou might think"},"1962":{"dur":3,"text":"this is a place where we could\nuse ConcatenatingMediaSource."},"1965":{"dur":3,"text":"But unfortunately normally\nwhen you're loading ads,"},"1968":{"dur":3,"text":"you can't actually commit\nto a particular ad URI"},"1972":{"dur":1,"text":"until the time when\nyou're about to play it."},"1974":{"dur":2,"text":"It's not the case that we have\na list of exactly what ads"},"1976":{"dur":3,"text":"we're going to play upfront."},"1979":{"dur":1,"text":"So let's see what would\nhappen if we tried"},"1981":{"dur":4,"text":"to use just one player with\nconventional MediaSources"},"1986":{"dur":2,"text":"to play these ads."},"1988":{"dur":2,"text":"So at the beginning of\nplayback, we got the URI"},"1991":{"dur":2,"text":"for the first ad, and\nthen we can play it."},"1993":{"dur":2,"text":"But then we know that we\nneed to play the content."},"1996":{"dur":2,"text":"So the player is\nactually going to buffer"},"1998":{"dur":4,"text":"when we tell it that we want\nto play the content instead."},"2002":{"dur":2,"text":"Then the content will\nplay back and the user"},"2004":{"dur":2,"text":"is going to see buffering again."},"2006":{"dur":3,"text":"Then the ad, more\nbuffering, and I"},"2010":{"dur":2,"text":"guess you're saying how\nthis is going to work."},"2012":{"dur":1,"text":"There's a lot of buffering."},"2013":{"dur":2,"text":"And this is not a\ngood user experience."},"2015":{"dur":2,"text":"So one way that people\ntry to work around this"},"2018":{"dur":2,"text":"is they will try\nand use two players."},"2020":{"dur":1,"text":"And the idea is\nthat one player is"},"2022":{"dur":2,"text":"going to play what's on\nthe screen at the moment"},"2024":{"dur":2,"text":"while the other player is in the\nbackground buffering whatever"},"2026":{"dur":1,"text":"is coming up next."},"2028":{"dur":2,"text":"So as soon as the\nad URI arrives,"},"2030":{"dur":1,"text":"you can populate the\nbackground player"},"2032":{"dur":1,"text":"and hopefully get\nsome data buffered"},"2034":{"dur":2,"text":"before playback begins."},"2036":{"dur":2,"text":"And in this case,\nthe playback will"},"2039":{"dur":2,"text":"switch in between the\nad and the content."},"2041":{"dur":3,"text":"But this solution also\nhas its drawbacks."},"2045":{"dur":2,"text":"These two players are both going\nto use up memory for buffering,"},"2048":{"dur":3,"text":"and they may even both be\nusing codecs at the same time."},"2051":{"dur":1,"text":"So that's not very good."},"2053":{"dur":1,"text":"And also this is\njust very difficult"},"2055":{"dur":3,"text":"to implement correctly if\nyou've ever tried doing this."},"2058":{"dur":3,"text":"So we thought about implementing\na MediaSource that's"},"2061":{"dur":2,"text":"specifically designed for ads."},"2064":{"dur":1,"text":"And this MediaSource\nis implemented"},"2066":{"dur":3,"text":"in a slightly similar way to\nthe concatenating media source,"},"2069":{"dur":3,"text":"except that it has these\nplaylists items which"},"2073":{"dur":1,"text":"are not populated."},"2074":{"dur":2,"text":"And those are represented\nby the question marks."},"2076":{"dur":2,"text":"Those are going to get\nfilled in with the ads"},"2078":{"dur":2,"text":"as soon as they arrive."},"2081":{"dur":1,"text":"So let's see what\nplayback would look"},"2082":{"dur":3,"text":"like with this\nhypothetical MediaSource."},"2086":{"dur":2,"text":"Playback begins and\nwe get the first ad."},"2088":{"dur":1,"text":"Then the content plays."},"2089":{"dur":2,"text":"Hopefully we get the next\nad a little bit early."},"2092":{"dur":3,"text":"And that placeholder is\nfilled in in the timeline."},"2095":{"dur":2,"text":"And if this works\nwell, then the user"},"2098":{"dur":4,"text":"is actually not going to see\nany buffering during playback."},"2102":{"dur":2,"text":"So as a real practical\nexample of this,"},"2104":{"dur":2,"text":"Google provides the\nInteractiveMediaAds SDK."},"2107":{"dur":1,"text":"You may have heard of it."},"2109":{"dur":5,"text":"And we're using that for loading\nads in this ImaAdsMediaSource."},"2114":{"dur":2,"text":"And as you can see,\nthe area kind of"},"2117":{"dur":3,"text":"highlights when the\nad is loaded from IMA."},"2121":{"dur":3,"text":"And the media source\nis wrapping IMA,"},"2124":{"dur":2,"text":"so the player doesn't need to\nworry about any details of how"},"2126":{"dur":1,"text":"ads are actually loaded."},"2128":{"dur":2,"text":"And in this timeline you\nget seamless transitions"},"2130":{"dur":1,"text":"between content and ads."},"2135":{"dur":2,"text":"So we actually pushed this\nto our development branch"},"2138":{"dur":1,"text":"today if you want\nan early preview,"},"2139":{"dur":2,"text":"if you want to try inserting\nads in your content."},"2142":{"dur":1,"text":"It's very easy to use."},"2143":{"dur":2,"text":"So you take your\ncontent MediaSource"},"2145":{"dur":1,"text":"and you pass it\ninto the construct"},"2147":{"dur":4,"text":"of an ImaAdsMediaSource along\nwith an adTagUri which defines"},"2151":{"dur":3,"text":"what ad playlists to load."},"2155":{"dur":1,"text":"And it also takes\nan OverlayViewGroup"},"2156":{"dur":2,"text":"which interactive\nmedia ads will use"},"2159":{"dur":2,"text":"to show any ad user interface\non top of your player"},"2161":{"dur":3,"text":"like a skip button, for example."},"2165":{"dur":1,"text":"Here's what you get\nif you try doing this."},"2167":{"dur":3,"text":"So you can see the\npre-roll ad is playing."},"2170":{"dur":1,"text":"And then when the\nad finishes we get"},"2172":{"dur":2,"text":"a pretty seamless\ntransition between the ad"},"2174":{"dur":1,"text":"into the content."},"2176":{"dur":2,"text":"And you can see that our\nplayback controls have support"},"2179":{"dur":2,"text":"for showing little ad\nmarkers so the user can"},"2181":{"dur":1,"text":"see where the mid-roll ads are."},"2183":{"dur":1,"text":"And during this\nplayback, there's"},"2184":{"dur":2,"text":"a consistent buffering policy\nbeing applied at all times."},"2190":{"dur":3,"text":"Now back to Ollie to talk\nabout some of our future plans."},"2193":{"dur":1,"text":"OLIVER WOODMAN: So\nbefore we leave you,"},"2195":{"dur":2,"text":"I just want to say a little\nbit about the direction"},"2197":{"dur":2,"text":"in which ExoPlayer is headed."},"2200":{"dur":3,"text":"Just to caveat this,\nthis is no way a promise,"},"2203":{"dur":3,"text":"and we're not going to\nput timelines on anything."},"2207":{"dur":1,"text":"But in terms of\nthe kind of things"},"2208":{"dur":2,"text":"that we're going to be looking\nat over the next six months"},"2210":{"dur":2,"text":"to a year, we're\ngoing to continue"},"2213":{"dur":1,"text":"to fill in the\nremaining feature gaps"},"2215":{"dur":2,"text":"that we have in terms of\nbecoming a really complete"},"2217":{"dur":2,"text":"media playback library."},"2219":{"dur":3,"text":"One specific thing here that\nwe know is causing a lot of you"},"2222":{"dur":2,"text":"problems is proper\nsupport for offline."},"2225":{"dur":1,"text":"So this is where you\nactually download"},"2226":{"dur":2,"text":"media to playback later."},"2229":{"dur":1,"text":"And so you can\nexpect us to start"},"2230":{"dur":3,"text":"building up support for offline\nduring the next six months"},"2233":{"dur":1,"text":"to a year."},"2235":{"dur":1,"text":"We're also going\nto continue to work"},"2237":{"dur":1,"text":"on performance enhancements."},"2238":{"dur":3,"text":"And by that I mean things like\nmaintaining decoder instances"},"2242":{"dur":2,"text":"from the platform from\none playback to the next,"},"2245":{"dur":1,"text":"because releasing\nand instantiating"},"2246":{"dur":4,"text":"those decoders as we do\nnow can be quite expensive."},"2251":{"dur":2,"text":"Another aspect of performance\nthat we intend to look at"},"2253":{"dur":3,"text":"is improved adaptive track\nselections for DASH and HLS"},"2257":{"dur":3,"text":"and SmoothStreaming\nadaptive playbacks, and also"},"2260":{"dur":2,"text":"more advanced\nbuffering policies."},"2262":{"dur":2,"text":"So the default components\nthat we currently"},"2265":{"dur":2,"text":"provide for performing\nthese tasks,"},"2268":{"dur":2,"text":"they're pretty\neffective, but they're"},"2270":{"dur":2,"text":"quite simple in terms of\nthe policies they implement."},"2272":{"dur":3,"text":"So we really want to start\nkind of diving deeper"},"2276":{"dur":1,"text":"and doing some proper\nresearch and kind"},"2278":{"dur":3,"text":"of fine tuning these to\ndeliver better performance out"},"2281":{"dur":2,"text":"of the box."},"2283":{"dur":4,"text":"And finally we know that the\nExoPlayer API is very large"},"2288":{"dur":2,"text":"and that it can be daunting\nto get started with"},"2290":{"dur":2,"text":"and to figure out exactly where\nyou need to dive in if you"},"2293":{"dur":1,"text":"want to customize something."},"2295":{"dur":3,"text":"So we're going to work on some\nbetter documentation as well,"},"2298":{"dur":2,"text":"probably starting\nwith documenting"},"2300":{"dur":2,"text":"some of the internal\ncomponents that the player is"},"2302":{"dur":2,"text":"using, as we described earlier."},"2307":{"dur":2,"text":"In terms of what you can\ndo next with ExoPlayer"},"2310":{"dur":2,"text":"whilst you're here, we\nhave office hours tomorrow"},"2312":{"dur":3,"text":"over in the office hours\nbox at 9:30 in the morning."},"2315":{"dur":2,"text":"So if you have any questions for\nus, then please do come along"},"2318":{"dur":4,"text":"and we'll be more than happy to\nhave a chat and to answer them."},"2322":{"dur":2,"text":"If you want to go and\ncheck out our source codes,"},"2324":{"dur":4,"text":"the GitHub repository is public\nand you can go and have a look."},"2329":{"dur":1,"text":"And we also have\na home page, which"},"2330":{"dur":3,"text":"includes the developer guides\nthat will help you get started."},"2334":{"dur":2,"text":"And it also has various\npiece of documentation"},"2336":{"dur":3,"text":"such as supported formats."},"2340":{"dur":3,"text":"And with that, I'd like to\njust thank you all for coming."},"2343":{"dur":2,"text":"We unfortunately don't have\ntime for questions now,"},"2345":{"dur":2,"text":"but we will probably just\ndown in the corner afterwards."},"2348":{"dur":2,"text":"And as I said, if\nyou do have questions"},"2351":{"dur":1,"text":"that we can't answer\nnow, please do"},"2352":{"dur":1,"text":"you come along tomorrow\nmorning and we'd"},"2354":{"dur":1,"text":"be happy to answer them."},"2355":{"dur":1,"text":"So thank you very\nmuch for your time."},"2357":{"dur":2,"text":"[APPLAUSE]"},"2360":{"dur":3,"text":"[MUSIC PLAYING]"}}