{"0":{"dur":6,"text":"Most of you were here for Dr. Bryan Raney\u2019s\nlast Python tutorial, the basic introduction"},"7":{"dur":9,"text":"to Python. So today he\u2019s going to be taking\nus through some examples, hopefully some things"},"16":{"dur":6,"text":"that will actually be useful for research.\nI don't think I have anything else to say"},"22":{"dur":5,"text":"so I'll turn it over to Bryan.\nThank you. Okay, so this is the...what are"},"28":{"dur":12,"text":"you doing? Stop running. Silly thing. I don't\nknow why it did that. So this is a continuation"},"41":{"dur":9,"text":"of two weeks ago. The homework was to install\nPython on your laptops. Anybody have trouble"},"50":{"dur":6,"text":"with that? Or I guess \"who here has a laptop\nwith Python on it?\" is the question. Alright."},"57":{"dur":14,"text":"Very good. So we're going to go over examples.\nHopefully I won't use the entire time with"},"71":{"dur":9,"text":"my examples. We can give questions, try to\nfigure things out. For example, things I'm"},"81":{"dur":7,"text":"going to go into: if-statements, looping,\nI'm going to try to show some gridded data,"},"88":{"dur":9,"text":"Basemap (if I can get it to work) for drawing\nmaps, and whatever else we can come up with."},"98":{"dur":7,"text":"Yes, you have laptops, you have Anaconda.\nIf you can download that file, you can follow"},"105":{"dur":9,"text":"along. You can get my notebook and my data\nfiles and put them on your computer. You can"},"115":{"dur":7,"text":"practice with me because some of the stuff...you'll\nhave to have the data files on your computer"},"122":{"dur":14,"text":"if you want to do it. Go ahead and type people.envsci.rutgers.edu\/braney\n(that's me, brainy) and then \/python-pt2.zip."},"137":{"dur":14,"text":"I'll wait until everyone has at least started\nthe download. You should also... well,"},"151":{"dur":4,"text":"the Jupyter part we can do once you have the files.\nIs everybody... yes?"},"156":{"dur":4,"text":"It might be a little while because it's 122\nmegs."},"160":{"dur":4,"text":"-Is it slow?\n-Yeah, because of the wireless."},"165":{"dur":5,"text":"-Well, ok.\n-Mine is only at 3.8 megs."},"171":{"dur":4,"text":"-It takes like four minutes, it's not bad.\n-Four minutes?"},"175":{"dur":1,"text":"-Yeah.\n-Oops."},"176":{"dur":2,"text":"And everybody is trying to do it at"},"179":{"dur":11,"text":"the same time. Oops, I didn't realize it was\nthat big. Anybody have a problem finding the"},"190":{"dur":7,"text":"file? Anybody not know what to do with the\nzip file once you download it? It's ok if"},"198":{"dur":2,"text":"you don't.\n-Should we unzip it?"},"201":{"dur":9,"text":"Yeah, unzip it and then...once it's downloaded,\nyou unzip it and open a command prompt and"},"210":{"dur":6,"text":"go to the directory where you unzipped it\nto so that the notebook is in the current"},"217":{"dur":7,"text":"directory and there is a data subdirectory\nunder that. I can show you what it looks like"},"224":{"dur":11,"text":"for me. I have a few more files than in the\nzip but it's going to be this examples.ipynb"},"236":{"dur":4,"text":"for the notebook, and then a data directory\nthat has apparently a lot of megabytes of"},"241":{"dur":11,"text":"files in it, and then a couple other things.\nHow far along is it?"},"252":{"dur":12,"text":"-Almost finished.\n-Ok. We can be patient. Eat some pie, I guess."},"265":{"dur":9,"text":"You download it, you unzip it...you basically\nwant to start Jupyter in that location."},"278":{"dur":8,"text":"-Any problems? Are we just waiting?\n-I'm still working on it because I wasn't here"},"287":{"dur":3,"text":"last time.\n-Oh, ok, you can..."},"290":{"dur":6,"text":"-I think there is a serious lack of bandwidth.\n-Well, you can also look on with someone else,"},"297":{"dur":8,"text":"if you want. It's all available. If you don't\nwant to follow along, that's fine. You can"},"306":{"dur":11,"text":"just watch and it'll be on the video and you\ncan download it later if you want."},"318":{"dur":15,"text":"Everybody still downloading? Anyone still downloading?\nOk. Unzipping ok? No problems? So,"},"333":{"dur":8,"text":"then we're going to run the Jupyter notebook. We're done with the slides. One thing I forgot to do"},"342":{"dur":8,"text":"with the notebook was clear it out. If you\nbring up the notebook in Jupyter, you want"},"350":{"dur":7,"text":"to go to \"Cell\", \"All Output\", \"Clear\" so\nthat we can start over fresh with just the"},"358":{"dur":17,"text":"code. Anybody not in Jupyter yet? I'll wait\na little. Hopefully this won't take too long."},"379":{"dur":11,"text":"Raise your hand if you have the notebook open\nin Jupyter. No? Nobody? Ok. You got it? Ok,"},"390":{"dur":11,"text":"anyone else? Keep your hand up if you've got\nit open. Anyone want me to wait or should"},"402":{"dur":10,"text":"I just continue? I'm going to just go on.\nToo much dead air. If you clear it--if you"},"413":{"dur":5,"text":"go to \"Cell\" and \"All Output\", \"Clear\"--then\nthat resets the notebook and it hasn't actually"},"418":{"dur":9,"text":"run anything yet.\n-Bryan, can you make the font a little larger?"},"428":{"dur":7,"text":"Oh, sure. How's that? These first few lines\nare just loading some of the libraries that"},"435":{"dur":7,"text":"we need, the numpy and the pyplot stuff. I\nhave to hit Shift+Enter to make it run and"},"443":{"dur":7,"text":"then it has the little \"1\" here, which means\nit's actually done that. These things are"},"450":{"dur":8,"text":"in memory of Python. I missed it last time.\nI didn't talk about if-statements, which are"},"458":{"dur":10,"text":"kind of important if you're writing any kind\nof code. If I have a value that is 1.3 and"},"468":{"dur":5,"text":"I want to test if it is greater than 10, this\nis what the if-statement looks like in Python."},"474":{"dur":8,"text":"Basically, it\u2019s \"if\" and then the thing\nyou're testing, and then a colon. Then you"},"482":{"dur":8,"text":"indent, and then whatever you want to do if\nthat's true. The indentation is important."},"491":{"dur":8,"text":"That tells Python that this line of code goes\nwith the if-statement. If you type something"},"499":{"dur":6,"text":"else here and it's still indented, it's still\npart of the if-statement. But if you remove"},"506":{"dur":12,"text":"the indentation and type something else, then\nthat happens regardless of the if-statement."},"518":{"dur":8,"text":"If we run this, it doesn't say \"windy\" because\n1.3 is not greater than 10, but it does say"},"527":{"dur":11,"text":"\"done\". So if we change this number to 10.3\nand run it, then it says the \"windy\" statement"},"538":{"dur":5,"text":"and then it says \"done\". Any questions on\nthat?"},"543":{"dur":4,"text":"-Can you also do it again as \"else\"?\n-Of course, that's the next step."},"548":{"dur":7,"text":"Do you have to do the indentation by pressing\n\"Tab\"?"},"555":{"dur":7,"text":"You can do \"Tab\" or spaces. If you're writing\ncode in a text editor, the important thing"},"563":{"dur":7,"text":"is that you're consistent. If you hit \"Tab\"\nhere, then for each line that goes in that"},"571":{"dur":6,"text":"\"if\", you have to also hit \"Tab\".\n[audience question]"},"578":{"dur":7,"text":"Yeah. A lot of editors are intelligent. They\ndo it for you. In Jupyter here, it indented"},"586":{"dur":8,"text":"for me. I'll show you that here.\n-Just by virtue of having \"if\" on the line..."},"594":{"dur":5,"text":"The colon. The colon tells it that the next\nline is probably indented. But it's up to"},"599":{"dur":8,"text":"you to make sure the indentation is correct.\nLet's say we want to have it print something"},"608":{"dur":10,"text":"if it's not windy. Then you say \"print 'not\nso windy'\", but it still says \"windy\" because"},"619":{"dur":9,"text":"10.3 is still greater than 10. If I change\nthat back to 1.3, now it says \"not so windy\"."},"628":{"dur":6,"text":"You can even stack these up. That's \"elif\"."},"641":{"dur":5,"text":"Then you can say something like that. You can have as many \"elif\"s as you want"},"646":{"dur":4,"text":"and you'll have all these different conditions that you're"},"651":{"dur":9,"text":"testing for. This is basically saying that\nif the value is greater than 10, do this."},"660":{"dur":5,"text":"If it's less than 1... if it's not greater\nthan 10, but it's less than 1, do this. If"},"665":{"dur":5,"text":"it's not greater than 10 and not less than\n1, then you come to the \"else\", which is the"},"671":{"dur":12,"text":"catchall. You don't have to have the \"else\",\nbut usually you will. If I pick a number that's"},"683":{"dur":11,"text":"less than 1, then it writes \"calm\" here. You're\nnot always going to be printing words. In"},"695":{"dur":7,"text":"this case, you'll be doing something for illustration.\nAnd you can have multiple lines here. You"},"702":{"dur":12,"text":"can say \"w=w+1\", like if you were counting\nthe number of windy days, something like that."},"714":{"dur":11,"text":"But then you'd have to have \"w=0\", \"c=0\".\nYou can have multiple lines underneath the"},"725":{"dur":9,"text":"\u201cif\u201d as long as they're all indented.\nAny questions about that? Is everybody running"},"734":{"dur":6,"text":"the notebook?\n-I missed the part that got you running Jupyter."},"741":{"dur":13,"text":"Oh, sorry. Let's bring that up. Where is it?\nWhat you want to do is you go to the directory..."},"754":{"dur":6,"text":"-Oh, ok. Got it.\n-Yeah. Just say \"Jupyter\", space, \"notebook\","},"761":{"dur":8,"text":"space, and then the notebook file. Anybody\nelse having issues?"},"772":{"dur":2,"text":"Alright, that's pretty good."},"777":{"dur":4,"text":"So we have if-statements. And feel free to play around. This is a notebook. You're"},"782":{"dur":6,"text":"not going to break anything. Do whatever you\nwant in these cells. You can add your own"},"789":{"dur":10,"text":"cells and try things. I'm going to move on\nto looping. There are all kinds of different"},"799":{"dur":6,"text":"ways to do looping. Typically you want to\ndo looping when you want to accomplish the"},"805":{"dur":8,"text":"same task on several different pieces of information.\nThe very basic version of that is, let's say"},"814":{"dur":6,"text":"you have a list of numbers and you want to\nloop through each number and do something"},"821":{"dur":9,"text":"with it. In this case, let's keep it simple\nhere. Let's just print \"value\". What this"},"830":{"dur":9,"text":"does is I give it a list of numbers and then\nI say \"for\" and then I give a name. This name"},"839":{"dur":8,"text":"is just part of the loop. This is the thing\nthat is changing as we loop through the list."},"847":{"dur":6,"text":"Then I say \"in\" and then the list of things\nto loop over. If you're used to other programming"},"854":{"dur":7,"text":"languages that have a more cumbersome for-loop\nstyle, where you have to worry about indexing"},"861":{"dur":5,"text":"and stuff like that, you don't have to do\nthat here. It's pretty much just \"I want to"},"866":{"dur":7,"text":"loop through the items in this container\".\nWhat it does is, for each one of those items,"},"874":{"dur":5,"text":"it will print the value. You can see it prints\nfour things because there were four things"},"879":{"dur":6,"text":"in the list. Any questions about that?\n-But what if you do... suppose you were looping"},"886":{"dur":5,"text":"through latitudes and longitudes and you wanted\nto have two..."},"892":{"dur":11,"text":"Ok, that depends. In this case, I'm showing\na very simple Python list. In that case, you'd"},"903":{"dur":10,"text":"be using the numpy array. There would be a\nslightly different mechanism but I can show"},"913":{"dur":12,"text":"that in a minute. That's a good question.\nI can change what I'm doing here. I can multiply"},"925":{"dur":7,"text":"by 3, which then instead of showing the individual\nitems in the list, it shows some sort of transformation"},"933":{"dur":8,"text":"of them. Let's do \"plus 2\", because that's\nin my examples below. This is the basic for-loop."},"941":{"dur":5,"text":"Notice there's a colon at the end and the\nprint statement is indented. It's the same"},"946":{"dur":8,"text":"rules as before. You can do multiple things.\nYou could say \"a=value+2\". You can have multiple"},"954":{"dur":6,"text":"lines here and they all happen each time through\nthe loop. Yes?"},"961":{"dur":10,"text":"If you wanted to run the test through the\nsecond and third element of values... [inaudible]"},"971":{"dur":8,"text":"Second and third? The 5 and the 21? Ok. Because the indexing starts at 0, the 5 is actually"},"980":{"dur":11,"text":"index 1. So I put a 1 here and I want to go\nto two, but you actually have to put the 1"},"991":{"dur":8,"text":"after. So it's 3. If we do that, it does the\n5 and the 21 but it's adding 2 to them."},"1004":{"dur":4,"text":"The things that are indented, the two lines,\nare part of the for-loop?"},"1009":{"dur":3,"text":"-Right.\n-It knows that the for-loop has ended when"},"1012":{"dur":7,"text":"it encounters something that is not indented?\n-Right, yes. That's typical of Python. In other"},"1020":{"dur":6,"text":"languages, like in Fortran or something or\nMatlab, it'll have the word \"end\" or something"},"1026":{"dur":6,"text":"to signify the end of the loop or the end\nof the if-statement. But in Python, it relies"},"1032":{"dur":6,"text":"on the indentation for that. In other programming\nlanguages, indentation is optional and highly"},"1039":{"dur":7,"text":"recommended. In Python, it's required.\n-Indentation can be with spaces or tabs?"},"1046":{"dur":8,"text":"It's up to you. There's no required amount\nof indentation or style of indentation, as"},"1055":{"dur":9,"text":"long as each line is consistent. Yes, Matt?\n-I did the for-value as \u201cvalue space 1:3"},"1064":{"dur":4,"text":"space colon\u201d.\n-Those aren't spaces, those are square brackets."},"1068":{"dur":2,"text":"-They're just hard to see.\n-Oh!"},"1071":{"dur":6,"text":"Sorry. It was highlighting them because of\nwhere my cursor was. It's square brackets."},"1077":{"dur":6,"text":"The square brackets are saying I want to look\nup something inside the values list."},"1084":{"dur":7,"text":"But if you wanted to nest the for-loop inside\nanother for-loop, is it another set of indentations?"},"1092":{"dur":11,"text":"Yes. You could...let's try that. Let's insert\na cell below and let's do \u201cvalues2D equals\u201d..."},"1113":{"dur":19,"text":"This would be for row in values2D, for col, or\nfor val in row...that is looping. This here"},"1133":{"dur":9,"text":"is a list of lists, which I don't really recommend\nusing too much. The numpy stuff is better."},"1142":{"dur":8,"text":"This first one is looping through the outer\nlist and the second loop is looping, taking"},"1151":{"dur":11,"text":"the outer list as its input and then looping\nthrough that list. Sort of staged. I'm printing"},"1162":{"dur":6,"text":"the value each time. This is just going through\nthe whole thing. I can do other stuff, like"},"1168":{"dur":11,"text":"I could say... and then you can see it does\nthe equal signs once per row, so you can do"},"1179":{"dur":4,"text":"all kinds of stuff like that. You can see\nfrom the indentation that this print goes"},"1184":{"dur":14,"text":"with this for-loop and not this one. Any questions\nabout that?"},"1198":{"dur":3,"text":"Ok. If you wanted to...going back"},"1202":{"dur":5,"text":"to this example, if you wanted to loop through\nthe values, get a new number for each one"},"1207":{"dur":10,"text":"and store that, you'd have to do something\nlike this, at least as far as we know so far."},"1217":{"dur":7,"text":"In this case, I've created a new, empty list\nand I'm looping through the values list and"},"1225":{"dur":8,"text":"then for each value I'm appending to the new\nlist the new value and then I'm printing out"},"1233":{"dur":11,"text":"the new list. You can see I've got a list\nhere, as opposed to up here where it just"},"1244":{"dur":4,"text":"printed each thing but it didn't store them\nanywhere. Here, I've actually stored the list"},"1249":{"dur":9,"text":"in the variable. But this is a lot of... it's\nvery wordy and Python doesn't like that. There's"},"1258":{"dur":8,"text":"a better way to do that. So if you go down\nhere, this is the same exact thing. What this"},"1267":{"dur":9,"text":"does is, you say \u201cthis variable, equals, square\nbrackets\u201d and then you actually do the for-loop"},"1276":{"dur":7,"text":"in the square brackets, essentially. You're\nsaying \u201cfor v in values\u201d, but the thing"},"1283":{"dur":7,"text":"that goes before the word \"for\" is what you\nwant to stick in the resulting list. If you"},"1290":{"dur":4,"text":"think about it, it's taking this...you kind\nof have to read it from right to left. You"},"1295":{"dur":8,"text":"take this list, you loop through it with the\nvalue v each time and then you calculate v+2"},"1303":{"dur":7,"text":"each time. Because that's in square brackets,\nyou store that as a list. This is doing the"},"1311":{"dur":6,"text":"same thing as this loop up here. It's just\na more compact way of saying it."},"1317":{"dur":8,"text":"-[audience question]\n-Right. In this case...otherwise, if you said"},"1326":{"dur":9,"text":".append and it wasn't defined, it wouldn't\nknow what you were talking about. What this"},"1336":{"dur":5,"text":"does is it produces a resulting list first\nand then it stores it in the variable that"},"1341":{"dur":8,"text":"you name it. You don't have pre-define it.\nI have to show you this because you'll see"},"1350":{"dur":10,"text":"it a lot in other people's code and it's pretty\nuseful. Any other questions so far? Alright."},"1360":{"dur":8,"text":"Another thing you can do. Let's say you have\na function, and here's how you define a function."},"1369":{"dur":6,"text":"It's pretty similar to what we have seen.\nYou've got \"def\" which means \"define\" and"},"1375":{"dur":6,"text":"then the name of the function, the inputs\nof the function, and then a colon. All the"},"1382":{"dur":5,"text":"indented lines after that are part of the\nfunction definition. What I'm saying here"},"1388":{"dur":5,"text":"is I send it something called \"old value\"\nand then it calculates a new value based on"},"1394":{"dur":6,"text":"the old value and then it returns the new\nvalue. If I have a value of 50 and I call"},"1400":{"dur":9,"text":"it function and store it and look at the output,\nthe result is 50+2. What you can do then is"},"1410":{"dur":8,"text":"you can take this idea up here, combine it\nwith the function, and then you get this."},"1418":{"dur":10,"text":"You say for all the v's in values, call the\nfunction on the v's and then store the results."},"1428":{"dur":5,"text":"That results in the same list as the other\nways."},"1434":{"dur":8,"text":"This might have been something we covered\nlast time, but for the def, does Python understand...is"},"1443":{"dur":7,"text":"that specific to defining a function?\n-Pretty much, yeah. Def just means I'm defining"},"1451":{"dur":18,"text":"a function. There are other things you can\ndefine in Python that use other words there."},"1469":{"dur":10,"text":"This is a slightly more advanced idea here.\nHere we have to look at this closely. When"},"1480":{"dur":6,"text":"When I write this here, I'm calling the function\ncalled \"compute new value\" and I'm giving"},"1486":{"dur":8,"text":"it a value. I'm giving it information. It's\nrunning and it's giving me an output. Here,"},"1495":{"dur":8,"text":"it looks like I'm calling \"compute new value\"\non the value v but I'm not really because"},"1503":{"dur":6,"text":"this is sort of symbolic. What I'm saying\nis for all the v in values, I'm going to be"},"1510":{"dur":8,"text":"doing this with each one of those v's. Instead\nof calling the function, this is like a description."},"1518":{"dur":7,"text":"You're telling Python you want it to call\nthe function. The automatic looping that happens"},"1526":{"dur":5,"text":"with the \u201cfor\u201d here is calling the function\nfor you. Even though this looks very similar"},"1531":{"dur":7,"text":"to this, they're slightly different meanings.\nHere is another way of looking at it where"},"1538":{"dur":7,"text":"I'm calling a function called \"Map\" and instead\nof calling the function \"compute new value\","},"1546":{"dur":8,"text":"I'm passing the function into Map. I'm telling\nMap to use this function. I'm giving it a"},"1554":{"dur":9,"text":"list of values and if I run this, this doesn't\nwork. It says I have a Map. What you actually"},"1564":{"dur":11,"text":"have to do is put lists around it to convert\nthe Map to a list. What this does is for each"},"1576":{"dur":7,"text":"value in value, it calls the function on that\nvalue. It's exactly the same as this; it's"},"1584":{"dur":9,"text":"just another way to write it.\n-It's not any more efficient?"},"1593":{"dur":7,"text":"It could be. There's actually similar functions\nin the numpy that are more efficient than"},"1600":{"dur":12,"text":"looping yourself but this one's a little easier\nto comprehend so I'm showing that first."},"1615":{"dur":6,"text":"Does that make any sense? Here's \u201cvalues\u201d,\nthere's \u201cvalues.\u201d Here's \u201ccompute new"},"1622":{"dur":5,"text":"value\u201d, there's \u201ccompute new value\u201d.\nIt's just that the \"v\" and the \"for v\" part"},"1627":{"dur":6,"text":"are handled by Map. And the reason you have\nto put \"list\" here is because Map returns"},"1633":{"dur":7,"text":"something called an iterator, which is...\nactually, when you do the for-loop up here"},"1641":{"dur":6,"text":"and you put values there, Python converts\nthat list into an iterator. An iterator is"},"1648":{"dur":7,"text":"a thing you use to go through lists. The trick\nis that you don't have to have the entire"},"1655":{"dur":5,"text":"list in your memory. The iterator can figure\nout what the next value is every time you"},"1661":{"dur":5,"text":"ask it. It's good for for-loops because you\ndon't have to remember everything; you just"},"1667":{"dur":7,"text":"have to know where to look. It's mostly a\nthing that happens under the hood but it is"},"1674":{"dur":11,"text":"a concept that Python programming encounters.\nFor example, you can use the Map thing directly"},"1686":{"dur":9,"text":"into a for-loop. Instead of storing this in\na variable and putting that variable here,"},"1695":{"dur":10,"text":"I just put the Map directly and what that\nallows me to do is go through the list that"},"1706":{"dur":7,"text":"the Map would produce without actually storing\nthe entire list. The for-loop sees the Map"},"1714":{"dur":4,"text":"as an iterator and it tells it \"Give me the\nfirst item in the list, the give me the second,"},"1719":{"dur":6,"text":"then give me the third one\". It keeps doing\nthat until Map says that there are no more."},"1725":{"dur":11,"text":"This is much more efficient that doing this\nfirst and then doing... if you were to write..."},"1741":{"dur":11,"text":"What is going on here? You could write that\nas doing the same exact thing. You would be"},"1753":{"dur":6,"text":"looping over the list that you made up here\nbut this version is more efficient."},"1761":{"dur":2,"text":"Just two different ways of doing it."},"1768":{"dur":5,"text":"Now for the next\nlevel of advancement. Are there any questions so far?"},"1774":{"dur":8,"text":"Ok. You don't necessarily have to\nfollow all of this just yet but these are"},"1783":{"dur":6,"text":"concepts that I think are very useful. We\ncan talk more in depth about them if people"},"1789":{"dur":12,"text":"are interested later. The lambda is a way\nof defining a function without defining a function."},"1802":{"dur":11,"text":"Here, if we compare this up here...\nI'm going to copy this down, just for reference."},"1815":{"dur":6,"text":"Before, I gave it the name of a function and\nit would call that function inside the Map"},"1822":{"dur":15,"text":"loop. Here, instead I am defining a function\non the fly. Lambda is a fancy computer science"},"1837":{"dur":7,"text":"word. What I am saying is I have a variable\nv that is my input and then the output is"},"1845":{"dur":6,"text":"v+2. What this entire thing does is Python\ngenerates a function for me that has that"},"1851":{"dur":10,"text":"input and that output. It gives that function\nto the Map thing. It basically removes the"},"1862":{"dur":6,"text":"overhead of having to write all this stuff\nin the situations where that makes sense."},"1869":{"dur":4,"text":"Sometimes you do want to have a function and\nyou want to call it but sometimes, if it's"},"1874":{"dur":5,"text":"a quick and dirty thing that you're doing,\nthen a lambda is easier to see what's going"},"1879":{"dur":5,"text":"on. You can see v is turning into v+2 and\nthat's all you need to know."},"1884":{"dur":7,"text":"If you had a function that involved a two-step\ntransformation, could you use this lambda"},"1892":{"dur":6,"text":"syntax to do that? Suppose you wanted to first\nadd 2 to v and then..."},"1898":{"dur":4,"text":"-Times 3.\n-Would you represent any other form as a line?"},"1903":{"dur":6,"text":"Right. You can do that but once you start\ngetting a lot of that, then the lambda doesn't"},"1910":{"dur":9,"text":"make sense. Lambdas are meant more for\npretty terse things."},"1924":{"dur":6,"text":"It's very contextual. If for some reason I was expecting v to be a list,"},"1930":{"dur":5,"text":"then I might have to do something like v is 0."},"1938":{"dur":7,"text":"It just depends. If you have something\ncomplicated then you should put it in a function."},"1945":{"dur":10,"text":"The lambdas are typically for something that's\npretty short and to the point."},"1956":{"dur":4,"text":"I think there's a way to append \nmultiple statements there but I haven't"},"1961":{"dur":7,"text":"looked into that so I'm\nnot sure. Let's comment this out and then"},"1968":{"dur":10,"text":"run this. This is doing the same thing as\nbefore. It's producing the same list"},"1978":{"dur":8,"text":"You can take a lambda and store it in a variable\nand then that variable becomes a function."},"1987":{"dur":10,"text":"Here, I've defined my lambda. It takes two\ninputs: an x and a y. It produces this output,"},"1998":{"dur":5,"text":"which is just some equation involving x and\ny. If I store that into the variable func"},"2004":{"dur":8,"text":"and I call func with 3 and 4, it returns that\noutput with 5. If you wanted to write all"},"2012":{"dur":6,"text":"that out in a more explicit way, you would\ndo it as a function. This function is functionally"},"2018":{"dur":9,"text":"the same as this lambda. It's just two different\nwas of doing things. Any questions on that?"},"2028":{"dur":6,"text":"Confusions? Or \"Why did you go over this?\"\nquestions?"},"2035":{"dur":5,"text":"[audience question]\n-You don't need to use lambda. It's completely"},"2041":{"dur":8,"text":"optional. But there will be situations where...one\nof the reasons I'm going over these things"},"2049":{"dur":4,"text":"is because you are going to see them in other\npeople's code. You need to have some idea"},"2053":{"dur":6,"text":"of what they mean. It terms of using it yourself,\nyou don't have to use it until you're ready."},"2060":{"dur":4,"text":"You'll be ready when you realize, \"Dang, I\nhave to write all these little functions all"},"2065":{"dur":5,"text":"over the place and I'm only using them in\none spot and it would be nice if I didn't"},"2070":{"dur":3,"text":"have to do extra work.\" The lambda takes care\nof that for you."},"2074":{"dur":8,"text":"That seems like it would be very useful, for\nexample, if you had to do unit conversions."},"2082":{"dur":4,"text":"-Right.\n-...one set of units but you want them in another set."},"2087":{"dur":9,"text":"Right, exactly. These are just things I think"},"2096":{"dur":11,"text":"you should have some idea of what they are.\nAny other questions? Wow, it's already 1:12."},"2107":{"dur":11,"text":"Let's move on. This is going to be a little\ndifferent. This was supposed to be not doing that."},"2118":{"dur":9,"text":"Ok. This is a little bit of a diversion\nbecause we're going to need this later. One"},"2128":{"dur":7,"text":"thing you sometimes need to do in Python is\ncall another program. That other program could"},"2136":{"dur":7,"text":"be very simple, like a little utility, or\nit could be you're running a model and Python"},"2143":{"dur":8,"text":"is managing the running of that. There's a\nfew ways to do that. There's a module called"},"2152":{"dur":10,"text":"Subprocess. If you load that and do \"Call\"\nand then you give it a list, the first item"},"2162":{"dur":4,"text":"in the list is the command you want to run\nand then everything else after that is the"},"2167":{"dur":7,"text":"arguments to that command. If you were typing\nthis on the Command line, it would look like"},"2174":{"dur":11,"text":"\"open\"... that, for example. If I ran that\non the command line, it would open this file"},"2185":{"dur":11,"text":"here. Ok, great. If I do it in Python, it's\nthe same thing. If I run this, it does the"},"2197":{"dur":10,"text":"same exact thing. It's just written in a slightly\ndifferent way. If you want to actually see"},"2208":{"dur":8,"text":"the output of that program, then you would\nuse \"Check Output\". It runs this program,"},"2217":{"dur":5,"text":"that program does some stuff, spits out some\noutput, the output is stored here, and then"},"2222":{"dur":9,"text":"you can do something with it. If you're in\nJupyter, you can do all that more easily with"},"2232":{"dur":11,"text":"the exclamation point command. You say \"!\" and\nthe command you want to run, and it does that."},"2243":{"dur":10,"text":"-You have in 29, the b and the \\n...\n-The echo command prints the line with the"},"2254":{"dur":9,"text":"return character after it. The \\n is the return\ncharacter and the b and the quotes mean this"},"2263":{"dur":9,"text":"is what Python calls a byte string, basically\na list of characters. Python hasn't quite"},"2273":{"dur":10,"text":"converted this into its own string type. Because\nthis is coming from another program, it's"},"2283":{"dur":7,"text":"not in a nice format. In this case, Jupyter\nis doing some extra processing to make everything"},"2291":{"dur":11,"text":"smooth. Usually when you're processing something\nlike this, you'd say \"output.trim\", I think"},"2302":{"dur":8,"text":"it is. Oh, it's a bytes object. Let's try\nthis. Output equals..."},"2325":{"dur":4,"text":"What is it? I forget the command."},"2332":{"dur":7,"text":"Trim... it's not trim, it's something\nelse. There's a command that strips off the"},"2340":{"dur":6,"text":"extra characters but I can't remember what\nit is."},"2356":{"dur":5,"text":"-I think it's \"strip\".\n-Strip. Ok, thank you."},"2364":{"dur":3,"text":"Yeah, \"trim\" I think is Perl."},"2370":{"dur":7,"text":"That didn't work. It got worse. Well,\nI don't know what to do here."},"2377":{"dur":6,"text":"I could figure it out, but that would take too long."},"2384":{"dur":4,"text":"Weird. Oh well."},"2390":{"dur":4,"text":"That's running an external program, which I will be doing in a second."},"2395":{"dur":3,"text":"First,\nI have to explain. The next part I want to"},"2399":{"dur":6,"text":"cover is gridded data, which is very common\nin the atmospheric science and the ocean science"},"2406":{"dur":7,"text":"when you have model output or reanalysis.\nAnything that comes from a nice computer model"},"2414":{"dur":10,"text":"that can give you regular information. For\nthat, I'm going to show this picture."},"2434":{"dur":8,"text":"Let\u2019s say you have data on a latitude--longitude\ngrid. Over here you've got the two-dimensional"},"2443":{"dur":8,"text":"grid of information and then each row has...\nthat should have started at 0. Oops. Each"},"2451":{"dur":8,"text":"row has its own index and each column has\nits own index. You also have associated with"},"2459":{"dur":7,"text":"those rows and columns latitudes and longitudes.\nThat longitude is a separate piece of information"},"2467":{"dur":7,"text":"from the actual numerical data on the grid.\nSame with the latitude. You have to associate"},"2474":{"dur":9,"text":"the two in order to use this information.\nThe number of rows in your data matches the"},"2484":{"dur":5,"text":"number of latitudes that you have and the\nnumber of columns matches the number of longitudes."},"2489":{"dur":7,"text":"It's a nice, regular format but you have to\ndeal with all three of them. That gets more"},"2496":{"dur":8,"text":"complicated when you have the time axis. Here\nis your nice two-dimensional grid for time,"},"2505":{"dur":5,"text":"the first time index. Then you have a third\ndimension going backwards, of each additional"},"2511":{"dur":6,"text":"time index, which has another grid of data\nassociated with it. In that case, you have"},"2517":{"dur":10,"text":"a third coordinate, which is your time dimension\ngoing back there. When you have data like"},"2528":{"dur":8,"text":"this, there are a lot of separate pieces of\ninformation that have to go together. Typically,"},"2536":{"dur":7,"text":"this is put into what is called a NetCDF file,\nwhich is a particular format that stores the"},"2543":{"dur":7,"text":"grid, the coordinates, and all kinds of other\nmetadata, which is data about the data so"},"2550":{"dur":7,"text":"that you can use it correctly. Who here is\nfamiliar with NetCDF in some way?"},"2560":{"dur":7,"text":"I'll show that a little bit. The first thing we'll do,\nI've got a NetCDF file. That's probably the"},"2568":{"dur":9,"text":"main reason the zip file was so big. I'm going\nto run this program called ncdump, which shows"},"2578":{"dur":9,"text":"some information about the NetCDF file. It\ntells me here the dimensions. These are the"},"2587":{"dur":6,"text":"three coordinates in the file. It has a time\ncoordinate, a latitude, and a longitude coordinate."},"2594":{"dur":7,"text":"In these numbers here, it is saying there\nare 361 latitudes in the grid and there are"},"2601":{"dur":7,"text":"540 longitudes in the grid. \"Unlimited\" just\nmeans the time axis is allowed to grow. Right"},"2609":{"dur":8,"text":"now there's 248 time coordinates in the file.\nIf you look down here, these are variables"},"2618":{"dur":7,"text":"now, below here. The latitude variable is\nindexed on the latitude dimension, which means"},"2626":{"dur":6,"text":"there are 361 actual latitude values. It distinguishes\nbetween dimensions and variables but they're"},"2632":{"dur":7,"text":"usually named the same in the case of coordinates.\nThis is giving you things like units, it's"},"2639":{"dur":6,"text":"in \"degrees north\", it's called \"latitude\"\nand stuff like that. There's a longitude and"},"2646":{"dur":7,"text":"a time as well. Time is always interesting\nbecause it doesn't store year, month, day,"},"2654":{"dur":8,"text":"hour, minute, second. It stores it in, in\nthis case, number of days since this particular"},"2662":{"dur":10,"text":"moment. If it has the value 1 for time, that\nmeans one day after January 1st, 1900. If"},"2672":{"dur":4,"text":"it has the value...this is kind of giving\nyou more information, telling you the minimum"},"2677":{"dur":7,"text":"and maximum numbers, which is telling you\n41,000 days after 1900. That's some number"},"2685":{"dur":8,"text":"of years. Up here is the real variable that\nwe are interested in. This is the air temperature"},"2693":{"dur":6,"text":"variable. You can see it has indexes along\nall three dimensions. It is that three-dimensional"},"2699":{"dur":3,"text":"grid with the latitude, longitude, and time\ngoing back. Yes?"},"2703":{"dur":5,"text":"-I keep getting an error: ncdump not found.\n-That's because you don't have it installed"},"2709":{"dur":5,"text":"on your computer. Sorry. It's an external\nprogram, it's not part of Python. I didn't"},"2715":{"dur":10,"text":"think about that. I thought it came with the\nPython stuff but maybe not. There are other"},"2725":{"dur":4,"text":"ways to get this information with Python;\nthis was just the quickest way that I knew"},"2730":{"dur":11,"text":"to get it. Did you install the NetCDF package?\nOk, because in my instructions I had mentioned"},"2741":{"dur":5,"text":"that you could install that. That's probably\nwhy you don't have it. You'd have to install"},"2746":{"dur":12,"text":"that using the Conda command. You can just\ntry it right now. Conda install NetCDF4."},"2758":{"dur":9,"text":"That should bring the ncdump command with it. You\nget here that the units of T_air are Celcius"},"2768":{"dur":6,"text":"and it has information about FillValue and\nMissing Value. That's not terribly important"},"2775":{"dur":10,"text":"to us because the NetCDF commands deal with\nthat themselves. This whole thing is basically"},"2785":{"dur":5,"text":"designed to define this one variable, plus\nall the coordinates that go with it. Yes?"},"2790":{"dur":6,"text":"Since I'm playing catch-up, what do I have\nto do to get this file in my...?"},"2797":{"dur":3,"text":"Oh, let me see here."},"2809":{"dur":2,"text":"After you install the\nAnaconda..."},"2814":{"dur":3,"text":"-That's done. I did all that.\n-Did you do that?"},"2817":{"dur":2,"text":"-Yep.\n-Do you mean the notebook."},"2819":{"dur":3,"text":"-Yeah, I want the notebook.\n-Oh, sorry."},"2823":{"dur":5,"text":"-Thank you.\n-Hang on. For that you want to go into the"},"2829":{"dur":6,"text":"directory where you unzipped the data file\nand just call Jupyter notebook."},"2836":{"dur":10,"text":"-Oh, ok. I probably don't have the data files.\n-So go here and download this zip file. When"},"2846":{"dur":7,"text":"you've downloaded it, unzip it, which in Windows\nI think you can right click on it and unzip"},"2853":{"dur":10,"text":"it or...what is the word? Expand it, or something\nlike that. Or extract, that's the word. Extract it."},"2863":{"dur":5,"text":"You were saying with the particular data we"},"2868":{"dur":7,"text":"were looking at, T_air at 10^15 or something\nspecified as missing..."},"2876":{"dur":16,"text":"I guess I should explain that. The file just\nstores a bunch of numbers, plus this information"},"2893":{"dur":7,"text":"that's shown here. What they typically do...\nthere are cases when you have data, there"},"2900":{"dur":6,"text":"are cells in the data where you don't actually\nhave data. Because this is all designed to"},"2906":{"dur":6,"text":"be a regularly spaced data grid, you have\nto have something there. So they pick a value"},"2913":{"dur":7,"text":"that lies outside of the normal range of numbers\nand use that to indicate \"there's actually"},"2920":{"dur":13,"text":"not data here\". This is what they call the\nmissing value. Most programs that read NetCDF"},"2934":{"dur":5,"text":"files will handle that for you. But if you\nwere doing it in a very low-level way, you'd have to look"},"2940":{"dur":7,"text":"for that value yourself and somehow\nmark or recognize that that's invalid information."},"2948":{"dur":5,"text":"I think you answered the question, but Python knows you.."},"2953":{"dur":9,"text":"Yeah, the NetCDF4 module will deal with that."},"2962":{"dur":11,"text":"That'll be part of it. They use Fill Value\nand Missing Value because different programs"},"2974":{"dur":8,"text":"look for different names for that. It's just\nthe number that means \"invalid\" in this particular"},"2983":{"dur":5,"text":"situation. Different files might use different\nnumbers for that."},"2989":{"dur":7,"text":"But that's so when you read the file, you\ndon't have to skip to a predetermined"},"2996":{"dur":6,"text":"value of what represents missing because then it\nwould depend on what the data was supposed"},"3002":{"dur":4,"text":"to look like.\n-Exactly. If your data actually took on values"},"3006":{"dur":3,"text":"close to 1 to the...\n-You wouldn't want to use those."},"3010":{"dur":6,"text":"Exactly. You'd want to use some other crazy\nnumber."},"3016":{"dur":3,"text":"Usually these numbers are chosen automatically"},"3019":{"dur":8,"text":"when the file was saved but it depends on\nwho created the file and stuff."},"3030":{"dur":6,"text":"Any questions so far about what I'm talking about or what I'm doing? Yes?"},"3037":{"dur":6,"text":"[audience question]\n-What operating system do you have?"},"3043":{"dur":5,"text":"-Windows 10.\n-I don't know."},"3049":{"dur":9,"text":"I had that problem when I was installing just\nan hour ago Anaconda,"},"3059":{"dur":11,"text":"when I tried to install the 64-bit version. But when I switched to the 32-bit version, it worked."},"3071":{"dur":12,"text":"You could try that. DLLs are the way that\nWindows handles dynamic code and when you"},"3083":{"dur":8,"text":"have a DLL error, that's usually a pain to\ndeal with. In general, it means that something"},"3092":{"dur":8,"text":"went wrong, probably during the installation.\nOr when you told Conda to install something,"},"3100":{"dur":6,"text":"maybe it didn't work. It depends on which\nDLL it's complaining about and stuff. Since"},"3106":{"dur":6,"text":"it's Windows, the usual answer is to do something\ndrastic like uninstall it and reinstall it"},"3113":{"dur":6,"text":"or something like that. The 32-bit might be\na good work-around."},"3119":{"dur":3,"text":"You probably had Conda installed already,\nright?"},"3122":{"dur":4,"text":"-Yeah, I had it for a while.\n-It may just be generic DLL..."},"3127":{"dur":5,"text":"-So when did it give you that error?\n-Whenever I tried to call ncdump or when I"},"3132":{"dur":5,"text":"I tried the next slide which was using NetCDF4. It won't do that either."},"3137":{"dur":3,"text":"Maybe something  happened when I tried installing NetCDF4."},"3141":{"dur":2,"text":"When did you install NetCDF4?"},"3143":{"dur":5,"text":"-A half hour ago.\n-Was it before or after you opened the notebook?"},"3148":{"dur":3,"text":"-Oh!\n-If you did it after you opened the notebook,"},"3152":{"dur":3,"text":"then the notebook is using a version of Python\nbefore you installed NetCDF."},"3156":{"dur":3,"text":"I feel like I closed it and reopened it. I\ndon't know. Let me try that."},"3160":{"dur":8,"text":"You could reset the kernel. Restart your kernel,\nthat might help. But I can't take time to"},"3168":{"dur":12,"text":"debug that right now. It's a Windows, painful\nthing. I'm sorry that some people are having"},"3180":{"dur":15,"text":"issues with this. If you have major problems,\nyou could always put Anaconda on a Linux server"},"3196":{"dur":9,"text":"that doesn't have the Windows things. Or we\ncan sit down and work on it later, offline."},"3209":{"dur":10,"text":"Any other questions at this point? Now I'm\ngoing to use the NetCDF library, or module,"},"3220":{"dur":6,"text":"and I'm going to point it to the same data\nfile that I did the ncdump with. And this"},"3227":{"dur":9,"text":"is the with-statement, which I didn't cover\nyet. With the NetCDF thing, what you"},"3237":{"dur":7,"text":"have to do... the library does not load the\nentire contents of the file into memory when"},"3244":{"dur":5,"text":"you open it. This is good because you can\nopen very, very large files. You might only"},"3250":{"dur":7,"text":"be interested in a subset of the data in that\nfile. What you have to do is open the file,"},"3257":{"dur":6,"text":"do some stuff with the file... basically extract\nthe parts you want, and then close the file."},"3263":{"dur":7,"text":"Closing the file is very important but it's\noften forgotten. What Python did is come up"},"3271":{"dur":7,"text":"with this with-statement, which is like an\nautomatic open-close. What we are doing is"},"3279":{"dur":10,"text":"we are saying \"With this thing\" (that's the\ncommand to open the file), and by saying \"as"},"3289":{"dur":7,"text":"ds\", I am giving a name to the open file so\nI can use it. What happens is when the indentation"},"3297":{"dur":8,"text":"stops, then the close happens automatically.\nIt's just nice. It's indented because there's"},"3305":{"dur":5,"text":"a colon there and it's a visual indication\nthat what you are doing there relies on something"},"3311":{"dur":8,"text":"that is temporary. The ds, here, is a temporary\nexistence as long as I'm in the \u201cwith\u201d."},"3319":{"dur":2,"text":"Once I'm done with the \u201cwith\u201d, ds is not\nvalid anymore."},"3322":{"dur":7,"text":"So that syntax in the parenthesis, the 'r'?\nDoes that mean \"read\"?"},"3329":{"dur":7,"text":"This is particular to the way NetCDF works. It's saying\n\"Here's the file I want to open\" and 'r' means"},"3337":{"dur":6,"text":"I'm opening it to read it. You can also use\na 'w' to say \"I want to write to it\". Then"},"3343":{"dur":3,"text":"you would be doing very different things.\nYou would actually be taking data you already"},"3347":{"dur":6,"text":"have in variables and sticking it in the file\nand stuff like that. Writing to a NetCDF is"},"3353":{"dur":9,"text":"a whole other talk, probably. Reading from\nit is not too bad. I'm saying, open this file"},"3363":{"dur":10,"text":"for reading, call it ds while it's open, and\nwe're going to do some stuff with ds. First,"},"3373":{"dur":9,"text":"look up here. You've got dimensions and variables.\nI'm actually saying ds.variables. It's very"},"3383":{"dur":7,"text":"similar to this layout up here. Then I'm saying\nthe name of the variable I want to look up,"},"3391":{"dur":11,"text":"which matches this name here. That whole thing\n(ds.variables 'Tair') refers to the entire"},"3402":{"dur":10,"text":"concept of that variable, not just the data.\nI can say 'long_name'. I can say..."},"3416":{"dur":13,"text":"I want to see the units. Whatever. Here I'm doing\nthe same thing with the long variable. If"},"3429":{"dur":7,"text":"you put the [:] there, that means \"take all\nof the data from that variable and store it"},"3437":{"dur":7,"text":"in here\". Do the same thing with latitude\nafter that."},"3444":{"dur":6,"text":"So the with command is more like creating\na link to the file rather than... [inaudible]?"},"3451":{"dur":7,"text":"The \"with\" doesn't do that. The nc4 does that.\nThe nc4 is essentially opening that file and"},"3459":{"dur":7,"text":"looking inside of it. When you do these types\nof statements, you are telling the nc4 to"},"3467":{"dur":5,"text":"do things with the file. Essentially, what\nthis line is doing is shuttling information"},"3472":{"dur":4,"text":"out of the file into memory. That information\nwas not brought into memory until we asked"},"3477":{"dur":7,"text":"for it because you may not want all of it.\nFor example, instead of saying colon, I could"},"3484":{"dur":8,"text":"say \"I just want longitudes 0-9 and that way\nI get a subset of the data instead of everything."},"3493":{"dur":6,"text":"If you just wanted to go ahead and load the\nentire file with all the variables, how would"},"3500":{"dur":6,"text":"you do it?\n-You'd have to have one of these lines for"},"3506":{"dur":10,"text":"each variable. You'd have to specifically\nask for each one. Here, I'm grabbing T_air"},"3517":{"dur":5,"text":"but not all of it. You can see here I have\nthree different things in the square brackets"},"3522":{"dur":8,"text":"because there are three dimensions to this.\nTime is first, then lat, then lon. What I'm"},"3531":{"dur":8,"text":"saying down here is I want the 100th time\nslice and then I want all the latitudes and"},"3540":{"dur":5,"text":"all the longitudes. I'm right there pulling\nout a subset of the data."},"3545":{"dur":9,"text":"To follow up on the question that was just\nasked, there's no way to open the NetCDF file"},"3555":{"dur":6,"text":"within Python and at that point look at what's\nin the NetCDF?"},"3561":{"dur":2,"text":"Yeah, you can do this."},"3568":{"dur":4,"text":"-So that would tell you everything that's in there?\n-You can look through the file yourself if"},"3573":{"dur":9,"text":"you don't know what's in there, but it is\nnot trivial to try to write code that can"},"3583":{"dur":6,"text":"deal with any file you give it. You are pretty\nmuch going to be writing code either for that"},"3589":{"dur":8,"text":"specific file or for a family of related files\nthat are all of the same format. You can browse"},"3597":{"dur":4,"text":"through that data if you want to.\n-I guess there I was thinking about Ferret."},"3602":{"dur":7,"text":"Understanding that you're going to open a\nNetCDF file and all of those variables are"},"3610":{"dur":4,"text":"then read in.\n-Actually, they're not read in. The same thing"},"3614":{"dur":5,"text":"as here, they are looked at but the data isn't\nactually brought into Ferret until you actually"},"3619":{"dur":6,"text":"use them for something. Ferret is handling\nthat behind your back so you don't have to"},"3626":{"dur":5,"text":"worry about it. With Python, you have to be\na little more explicit. It's very similar."},"3631":{"dur":7,"text":"Where I ask it to print \"ds.variables\", it's\nprinting all this information, but it's not"},"3639":{"dur":5,"text":"printing the actual numbers. It's just\nprinting stuff it knows about the data. That's"},"3644":{"dur":5,"text":"exactly what happens when you say \"Show Data\"\nin Ferret. It's the same thing. It's just"},"3650":{"dur":5,"text":"formatted differently. Anything--yes?\n-Instead of getting all of that, all it gave"},"3655":{"dur":9,"text":"me was temperature 2m above the displacement\nheight. That's all it said."},"3664":{"dur":10,"text":"I changed this code here. Feel free to...the\noriginal code in the notebook just had the"},"3674":{"dur":8,"text":"name that it printed. If you look, I'm printing\nds.variables, ds.variables \u2018Tair\u2019 .long_name,"},"3683":{"dur":7,"text":"ds.variables Tair .units... all those things\nare output here. Here's what you have. Temperature"},"3691":{"dur":9,"text":"at 2 meters above the displacement height.\nThat's the long name and Celsius is the units."},"3700":{"dur":8,"text":"All these things I can do and play around\nwith. Once I'm done with the \"with\", ds vaporizes."},"3709":{"dur":12,"text":"If I try to do something with ds...let's comment\nthis one out...then it says \"not a valid ID\"."},"3722":{"dur":12,"text":"It's saying \"that's not open anymore\", essentially.\nWe don't do that outside of the \"with\"."},"3734":{"dur":6,"text":"I'm typing the type of lon so we can see that\nthis is actually giving us a numpy array,"},"3741":{"dur":7,"text":"which is very useful because that's a lot\neasier to deal with than regular lists."},"3748":{"dur":11,"text":"If we did Tair.shape, we can see T_air is 361x540,\nwhich matches the number of latitudes by the"},"3759":{"dur":10,"text":"number of longitudes. We also know that T_air,\nthe original, was also 248 time slices but"},"3769":{"dur":6,"text":"we extracted only one of them. That's why\nthe shape is two-dimensional instead of three-dimensional."},"3780":{"dur":12,"text":"If we look at the shape of latitude, it's\none-dimensional of length 361. Any questions?"},"3792":{"dur":8,"text":"That should remind you of this picture. Before,\nwe had three-dimensional data and we took"},"3801":{"dur":5,"text":"a two-dimensional slice out of it. We have\nthis two-dimensional data, the T_air, and"},"3806":{"dur":6,"text":"then we have out latitudes. The size of the\nlatitude matches the number of rows and the"},"3813":{"dur":8,"text":"size of the longitude matches the number of\ncolumns. Let's confirm that."},"3822":{"dur":4,"text":"You can see here, latitude matches the first one"},"3827":{"dur":7,"text":"and longitude\nmatches the second one. Any questions? Ok."},"3838":{"dur":10,"text":"What time is it? Can't tell. 1:41, ok. 20\nminutes, that's pretty good."},"3852":{"dur":15,"text":"What I wanted to do was...here I'm creating indices into\nthe latitude array. I know the latitude goes"},"3868":{"dur":10,"text":"up to 361. This variable is just a list of\nnumbers from 200 to 280. In fact, let's split"},"3879":{"dur":13,"text":"this up a little bit. Let's start with this\nand just take a look at that. The np.arange"},"3892":{"dur":6,"text":"function gives us a list of numbers from A\nto B, but you can see that it actually doesn't"},"3899":{"dur":6,"text":"include the last one, just like the range\nfunction in Python. This is just a normal,"},"3906":{"dur":6,"text":"Python way of doing things. It does start...\n- I thought that it automatically iterates by"},"3913":{"dur":2,"text":"1.\n-Yes. If I didn't want it to iterate by 1,"},"3915":{"dur":11,"text":"I could tell it like this. It's the starting\nvalue, a little bit after the stopping value,"},"3927":{"dur":13,"text":"and the interval. Let's go back to 1. In fact,\nI'll just change that to a 1. We'll do the"},"3941":{"dur":12,"text":"same thing here. That's 400 to 500, except\nit's really 400-499. It never does the last one."},"3954":{"dur":4,"text":"I may be just a little lost here. How does"},"3959":{"dur":12,"text":"it know what it's acting on? The np.arange?\n-This is just a normal function. Arange inside"},"3971":{"dur":10,"text":"of the np library or module. I'm just giving\nit some inputs and it's producing an output."},"3982":{"dur":6,"text":"There's nothing else happening. There's no\nconnection to what I was doing above, yet."},"3988":{"dur":4,"text":"-So these are just numbers that have been generated\nby this command?"},"3993":{"dur":6,"text":"-Yeah. I'm arbitrarily creating a list of numbers.\n-Now I understand."},"3999":{"dur":9,"text":"Then what I can do is I can say...instead\nof printing out the numbers, I can print out"},"4009":{"dur":10,"text":"the latitudes at those numbers. Now I'm dealing\nwith the 200th latitude in the latitude list."},"4019":{"dur":13,"text":"It goes through the 279th latitude in the\nlatitude list. If I do the same thing here,"},"4033":{"dur":8,"text":"this is the 400-500th longitudes. You can\nsee here that the longitudes are spaced by"},"4042":{"dur":16,"text":"2\/3 of a degree, it looks like. What I would\nlike to do is then take those same ranges"},"4058":{"dur":12,"text":"and extract a subset of the T_air data that\ngoes with them. If I did it...let's do \"Edit\","},"4071":{"dur":10,"text":"\"Split Cell\"... if I did it like this... oops,\nthose were the wrong numbers. 200-280."},"4082":{"dur":5,"text":"If  I did it like that, it would work fine. But\nI want to reuse these numbers up here and"},"4088":{"dur":3,"text":"that doesn't actually work."},"4094":{"dur":9,"text":"What was it? lat_ind,\nlon_ind. That gives me an error. If you are"},"4104":{"dur":6,"text":"familiar with Matlab, you might have a clue\nwhat that is about. The solution is to use"},"4110":{"dur":5,"text":"meshgrid. When you have a two-dimensional\narray and you want to look up stuff from the"},"4115":{"dur":6,"text":"two-dimensional array, you have to have two-dimensional indices. What I'm trying to give it here"},"4121":{"dur":6,"text":"is two one-dimensional indices. Instead, I need to give it two two-dimensional indices"},"4128":{"dur":9,"text":"so it knows which row and which column in every case. In that case, you use the meshgrid"},"4137":{"dur":9,"text":"function. You take the two sets of indices\nand you create a new set of indices. Let's"},"4147":{"dur":17,"text":"split that out. lat_ind was the numbers 200-279\nbut mlat is the numbers from 200-279 repeated"},"4164":{"dur":14,"text":"100 times. It's now two-dimensional. If we\nlook at... \"Insert below\", mlon. What you"},"4179":{"dur":7,"text":"can see if you look closely is that mlat goes\nfrom 200-279 horizontally and then repeats"},"4186":{"dur":10,"text":"vertically, whereas mlon goes from 400-499\nvertically and repeats horizontally. If you"},"4196":{"dur":11,"text":"look at the i,j location in mlat and combine\nthat with the i,j location in mlon, you get"},"4208":{"dur":14,"text":"a unique pair of coordinates. Now I can put\nthose into my t_air and look up... let's"},"4223":{"dur":11,"text":"split that out. Now I've got that and this\nis now an array. Actually, let's look at the"},"4234":{"dur":23,"text":"shape. We can see that this is 100x80. We've\nnow taken the\u2026 the lat indices were 400-500."},"4258":{"dur":14,"text":"I mean the lon ones...there's 100 lons and\n80 lats. This is showing as 100x80, although"},"4273":{"dur":9,"text":"that feels backwards to me. I'm not sure.\nThis was originally 361x540."},"4284":{"dur":6,"text":"-Yeah, it's gotten mixed up.\n-Isn't because you have the meshgrid?"},"4291":{"dur":3,"text":"I probably have the meshgrid wrong."},"4302":{"dur":9,"text":"That's wrong too though. Lon should go to 540."},"4313":{"dur":10,"text":"There we go. Apparently, I had the directionality\nwrong. Let's try that again. There. That may"},"4323":{"dur":13,"text":"be why some other things didn't work. Subset\nA was actually inputting these things directly,"},"4337":{"dur":12,"text":"the ranges directly. Subset B was using the\nmeshgrid. I'm trying here to compare the two"},"4349":{"dur":9,"text":"and you can see that the shapes are the same\nand it has a big list of trues because it"},"4358":{"dur":4,"text":"is comparing each item to each other item.\nAre they equal? That's what the two equals"},"4363":{"dur":7,"text":"signs mean. If I say \"all\", then I am saying..."},"4378":{"dur":4,"text":"If I say \"does subset A equal subset B?\" and"},"4382":{"dur":5,"text":"then I say \"all\" to mean \"are they all true?\"\nSo this gives me \"true\" to say \"yes, they're"},"4388":{"dur":8,"text":"equal\". They're the same. Does that make sense?\nAny questions?"},"4399":{"dur":4,"text":"I'm not sure if I got that. Can you go over\nit again?"},"4404":{"dur":6,"text":"-Which part?\n-The subset A. It gives a list of numbers,"},"4410":{"dur":5,"text":"from 200-280 and from 400-500, right?\n-Right."},"4416":{"dur":7,"text":"And then on this whole line, it should be\nsubset B. You were creating indexes, which"},"4424":{"dur":7,"text":"is the same lat and lon. If these are the\nsame numbers, I don't understand why it doesn't work."},"4432":{"dur":4,"text":"They are the same numbers so conceptually"},"4436":{"dur":8,"text":"it should work. The problem is, writing numbers\nwith a colon in it is different from inputting"},"4445":{"dur":16,"text":"an array. It's treated different by Python\nand also numpy. When you give it arrays instead"},"4462":{"dur":9,"text":"of ranges, it treats those as \"this is the\nlist of things I want to pull out\". It doesn't"},"4471":{"dur":10,"text":"treat them as a range, it treats them as a\nlist. Since you're giving it two lists, then"},"4481":{"dur":5,"text":"each list is for a different coordinate. Since\nthe shape of the array is two-dimensional,"},"4487":{"dur":5,"text":"the coordinates lists need to be two-dimensional.\nIn this case, this is a shortcut for saying"},"4493":{"dur":11,"text":"\"rows 200 to 280 and columns 400 to 500\".\nIn the second form, even though to our mind"},"4504":{"dur":5,"text":"it looks like the same idea, to Python it\nhas a different purpose because you can do"},"4510":{"dur":9,"text":"other things with this. Like if you have a\nlist of true-false values, just like in Matlab,"},"4520":{"dur":4,"text":"you can stick that in there and it will give\nyou all the values that correspond to the"},"4524":{"dur":10,"text":"indices at the true items in the list. This\nis more versatile so you have to be more explicit."},"4534":{"dur":6,"text":"The whole meshgrid thing is to illustrate\nthe right way to do that. If you do this in"},"4540":{"dur":10,"text":"Matlab, it's the same problem.\n[audience question]"},"4551":{"dur":4,"text":"But if you have a two-dimensional array and\nyou give it two different arrays that are"},"4556":{"dur":5,"text":"not the same size, it's not going to like\nthat."},"4561":{"dur":8,"text":"[audience question]\nMaybe not, but this is how Python, or how"},"4570":{"dur":14,"text":"numpy requires it. Not much time left. I'm\ngoing to skip over this one for a second because"},"4584":{"dur":5,"text":"I didn't get it to work. One thing that's\ncool though: there's this other module called"},"4590":{"dur":8,"text":"Xray. It's a wrapper around the NetCDF4 module.\nWhat it does is, this whole thing I was talking"},"4599":{"dur":9,"text":"about with the indices...you have to use the\nindices for both the latitudes and the data,"},"4608":{"dur":8,"text":"right? Xray takes that requirement away. You\ncan actually tell."},"4616":{"dur":4,"text":"Here, I'm doing with X-ray.open_dataset."},"4621":{"dur":5,"text":"I'm giving it the name of the dataset. It's\nvery similar to the \"with\" for the NetCDF."},"4626":{"dur":8,"text":"I'm saying \"ds.T_air\". Instead of saying ds.variables\n'Tair', I'm just directly saying \"T_air\"."},"4634":{"dur":4,"text":"I want to select and then I can actually give\nit latitudes and longitudes I want to select"},"4638":{"dur":6,"text":"on. If you know Ferret, this is how Ferret\nworks. You can say \"I want to deal with things"},"4645":{"dur":8,"text":"in coordinates, not in indices.\" Xray lets\nyou do that. If I do this, since I'm giving"},"4653":{"dur":5,"text":"it a single latitude, a single longitude,\nand a single time coordinate, it's giving"},"4659":{"dur":4,"text":"me a single value back. It's pulling that\none value out of the entire three-dimensional"},"4663":{"dur":5,"text":"T_air list.\n-Do they have to be exact latitudes and longitudes?"},"4669":{"dur":6,"text":"I don't think so but I haven't played around\nwith this a whole lot. This is mainly just"},"4675":{"dur":4,"text":"to let you know it's out there and you might\nwant to try it."},"4679":{"dur":3,"text":"-Could you give it a range?\n-Yeah, there's a way to give it ranges and"},"4683":{"dur":9,"text":"stuff. The syntax is a little funny but essentially\nthe same kinds of ideas you can do in Ferret,"},"4692":{"dur":5,"text":"in terms of selecting information through\ncoordinates, you can do with Xray. It was"},"4698":{"dur":6,"text":"designed that way.\nDoes that mean you can kind of use this as"},"4704":{"dur":8,"text":"a shortcut for doing...?\n-Exactly. But you need to know both sides because"},"4712":{"dur":14,"text":"when things go wrong, you need to understand\nwhy. If I had more time to play with this,"},"4726":{"dur":10,"text":"I could have probably done the exact same\nexample with Xray. The Basemap thing, I couldn't"},"4737":{"dur":9,"text":"get it to work. What I can do is show is what\nBasemap is supposed to do."},"4757":{"dur":8,"text":"With Basemap, you can create projections and draw your data on those projections. The Pyplot functions"},"4765":{"dur":8,"text":"can do things like contouring, field contours,\nand stuff like that. What the Basemap does..."},"4773":{"dur":10,"text":"in fact, I should enlarge this. What I'm looking\nat is matplotlib.org\/basemap. Basemap is this"},"4784":{"dur":6,"text":"module that lets you do this stuff. It basically\nlets you project your data onto an actual"},"4791":{"dur":9,"text":"globe, in this case, or other projections.\nI really wanted to show you exactly how to"},"4801":{"dur":11,"text":"do this but I was having trouble with my data.\nHere's a crazy one. Anyway, this is what you"},"4812":{"dur":8,"text":"would do along the same lines as Ferret: fill,\ncontour, stuff like that. You can use different"},"4821":{"dur":9,"text":"projections and do different things with it.\nI can try to get that to work and send it"},"4830":{"dur":7,"text":"to everyone once I have it working. It's pretty\ncool. As you can see, there's a lot of lines"},"4838":{"dur":6,"text":"of code necessary to do these because you\nhave to be really specific about what the"},"4844":{"dur":7,"text":"projection is and what exactly you want it\nto do. Once you have it figured out once,"},"4852":{"dur":7,"text":"it's probably easier to do it again. Oh, this\nis neat. This is specific points on the map"},"4860":{"dur":7,"text":"and I think they are even different sized\ndots, which is pretty nice. The Basemap is"},"4868":{"dur":3,"text":"what you want to do if you want to map your\n2D data."},"4871":{"dur":15,"text":"-Is there a way of turning that into a function?\n-Absolutely. You could definitely start to"},"4887":{"dur":5,"text":"write a function where you give it a NetCDF\nfile and tell it a variable you want it to"},"4892":{"dur":4,"text":"look at. It can pull out the latitudes and\nlongitudes, make a map out of it, and plot"},"4897":{"dur":6,"text":"it and do a lot of this stuff semi-automatically.\nBut you'd have to write that code. There's"},"4903":{"dur":4,"text":"probably somebody out there who's already\nwritten that code."},"4909":{"dur":4,"text":"-If you write a lot of it, you've got Ferret.\n-Yeah, basically. There actually is a Python"},"4914":{"dur":8,"text":"wrapper for Ferret, where you can actually\nuse Ferret within Python. I think it's also"},"4923":{"dur":6,"text":"useful to know how to do it natively in Python\nas well. I think the reason you'd want to"},"4930":{"dur":5,"text":"use Python is so you have more control. Once\nyou hit the limits of what Ferret can do,"},"4935":{"dur":3,"text":"then you have to leave Ferret completely in\norder to do the next thing, so you might as"},"4939":{"dur":5,"text":"well not rely on that. But that could be a\nbridge. You could have some Ferret code that"},"4945":{"dur":5,"text":"you bring into Python through PyFerret and\nthen figure out how to translate it back into"},"4950":{"dur":13,"text":"Basemap and Xray and everything else. Let\nme quickly show one other thing. The Pandas"},"4964":{"dur":8,"text":"library is for reading column data. Let me\nshow you what I'm talking about."},"4979":{"dur":8,"text":"If I have a spreadsheet... and this is not Excel, but\nit's good enough for demo. Let's say I have"},"4987":{"dur":8,"text":"a spreadsheet with a bunch of data in it and\nthen I save it as a csv (Comma Separated Values)"},"4995":{"dur":13,"text":"format, then I can read that csv file using\nPandas. Oops, I have to do this first and"},"5009":{"dur":11,"text":"then this. And look at that. It's a nice table\nshowing all the data. Pandas recognizes the"},"5020":{"dur":9,"text":"numerical data. This is sort of like a spreadsheet\nbut also sort of like a database. You can"},"5030":{"dur":6,"text":"do searches and find the data that is interesting.\nIt's very different from NetCDF. NetCDF is"},"5036":{"dur":5,"text":"meant for uniform grids and numerical data.\nThis is meant for where you have columns where"},"5042":{"dur":14,"text":"each column has a different meaning and purpose.\nFor example, here I'm extracting a particular"},"5057":{"dur":18,"text":"column. I'm just using the column header name\nto do that. Let's take this off, first."},"5075":{"dur":8,"text":"This is a particular data format of Pandas that\nstores the numbers and some other information."},"5084":{"dur":9,"text":"But if I put the .get_values on the end, now\nit becomes a regular numpy array. I've pulled"},"5093":{"dur":4,"text":"the numbers out of a spreadsheet in 3 lines\nof code."},"5097":{"dur":4,"text":"-So what was it reading in this case?\n-It was reading the csv file that was saved"},"5102":{"dur":8,"text":"from this spreadsheet. This is an Excel spreadsheet\nand you go into... I don't actually have Excel,"},"5110":{"dur":9,"text":"but you can do the equivalent and export it\nas csv. You save it as a csv file instead"},"5119":{"dur":13,"text":"of an xls file. Then when you go here, you\nsay \"pd.read_csv\". And you can give it lots"},"5132":{"dur":8,"text":"of information about your csv file if you\nneed to. This would be useful for people who"},"5141":{"dur":8,"text":"have data that's not in the NetCDF format.\nOnce it's in the Pandas array, you can do"},"5149":{"dur":4,"text":"stuff with that. You can average it and plot\nit and all that kind of stuff."},"5153":{"dur":10,"text":"-Do you have any idea how to transform [inaudible]?\n-Which one?"},"5164":{"dur":12,"text":"[inaudible]\n-There are many options. There's a module in"},"5176":{"dur":10,"text":"Python called datetime that would probably\nbe my first stop. Datetime can recognize date-like"},"5186":{"dur":6,"text":"information. You would probably have to tell\nit \"This is month\/day\/year\" or something but"},"5193":{"dur":7,"text":"then it would turn that into something that\nthen you can deal with as a date. You could"},"5201":{"dur":7,"text":"even convert that into \"number of days since\n1900\" or whatever you need it to be. I think"},"5208":{"dur":3,"text":"Pandas has some of that functionality in it\nalso."},"5211":{"dur":11,"text":"-Can you show that? If you grab that column,\nwhat values would it return?"},"5223":{"dur":11,"text":"I have to get the name of it. Let's go down\nhere."},"5243":{"dur":6,"text":"Hang on. I have to figure out what the exact syntax is here."},"5259":{"dur":8,"text":"This is just a list\nof strings, first of all. But if I say that,"},"5267":{"dur":10,"text":"that's that string. Then I can say \"Import\ndatetime\" and then \"date\"."},"5284":{"dur":7,"text":"Ok, it didn't like that. Let's see. I know there's a way to do\nthis."},"5298":{"dur":5,"text":"Typically I have to look things up in order to get it right."},"5310":{"dur":3,"text":"Let's see if that works."},"5315":{"dur":4,"text":"How do you do that? I know there's a way to do that."},"5330":{"dur":7,"text":"Basically this is the procedure:\nyou Google it and you see how...That's it!"},"5345":{"dur":12,"text":"Come on. Really? Strptime... right. That's\nwhat I was doing wrong."},"5363":{"dur":20,"text":"And now it doesn't like what I did. Really? I'm trying to type too fast. Well, almost."},"5390":{"dur":16,"text":"Oh, there's a different library that has a different format here. There we go. So now this is an object that"},"5406":{"dur":4,"text":"specifically knows the year, the month, the\nday, the hour, and the minute. And then you"},"5411":{"dur":7,"text":"can do other stuff like that. I guess that\nwas a good example of how relatively easy"},"5418":{"dur":5,"text":"it is to figure out something in Python, even\nthough it took me a minute. Once I found the"},"5424":{"dur":7,"text":"information, using it wasn't that bad.\n-So the rest of us can multiply by a factor"},"5431":{"dur":7,"text":"of 10...\n-That factor will decrease as you do it more."},"5439":{"dur":8,"text":"I guess we're about out of time. Any last\nquestions? Thank you all for coming."},"5447":{"dur":3,"text":"[applause]"}}