{"0":{"dur":3,"text":"Today we are going to be talking about a problem in logic"},"3":{"dur":2,"text":"and how in solving that problem,"},"5":{"dur":4,"text":"Alan Turing almost inadvertently\ninvented the modern digital computer."},"12":{"dur":3,"text":"So we start back at the beginning of the\n20th century, where mathematicians had"},"16":{"dur":5,"text":"posed this problem - in logic we're\ninterested in finding \"Do these premises"},"21":{"dur":5,"text":"entail this conclusion?\" So premises are\nthe bits you start off with in an argument"},"27":{"dur":3,"text":"they are your -- the bits you know at the\nbeginning or your assumptions and the"},"31":{"dur":3,"text":"conclusion is the bit you want to\nestablish the bit that you reason to"},"34":{"dur":5,"text":"with your argument and we want to know\nis there a test that will tell us"},"39":{"dur":3,"text":"yes for sure these premises do or don't"},"43":{"dur":4,"text":"entail this conclusion. Is there an\nautomatic way of finding out whether"},"47":{"dur":2,"text":"they do or whether they don't?"},"49":{"dur":3,"text":"So that's the problem, it's called the\ndecision problem."},"53":{"dur":5,"text":"The mathematicians wanted to find out \"Is\nthere an answer to the decision problem"},"58":{"dur":1,"text":"for first order logic?\""},"60":{"dur":3,"text":"that's the kind of logic you learn in\nphilosophy or mathematics at university"},"64":{"dur":5,"text":"so lots of mathematicians were trying to\nwork out is first order logic decidable"},"69":{"dur":3,"text":"that is can we automatically test\nwhether the premises entail the"},"73":{"dur":0,"text":"conclusion"},"74":{"dur":4,"text":"Alan Turing was one of the first to\ndiscover that first order logic isn't"},"79":{"dur":4,"text":"decidable. To prove this"},"83":{"dur":4,"text":"it's really difficult conceptually\nbecause you have to be able to show no"},"88":{"dur":6,"text":"possible program can give you the answer\nbut how do you do that how do you show"},"95":{"dur":3,"text":"something about every possible program"},"98":{"dur":3,"text":"you can't run through every program one\nby one"},"101":{"dur":3,"text":"but Turing came up with a brilliant\nsolution"},"104":{"dur":3,"text":"his idea goes something like this"},"107":{"dur":4,"text":"suppose we have a program and let's just\ndraw it as a black box"},"113":{"dur":5,"text":"it's going to take some inputs and it's\ngoing to give us some outputs"},"118":{"dur":6,"text":"our program is going to solve some\nproblem a problem like \"Do the premises"},"124":{"dur":4,"text":"entail the conclusion\" we ask it a\nquestion and it will give us an answer"},"128":{"dur":3,"text":"yes or no"},"132":{"dur":5,"text":"now here's another question we can ask\nlet's look at all of those possible"},"137":{"dur":4,"text":"programs and we're just thinking of them\nas black boxes at the moment we might"},"141":{"dur":5,"text":"want to know is this program given a\ncertain input going to give us an answer"},"146":{"dur":6,"text":"or is it going to trundle on forever and\nnever give us an answer that is is it"},"153":{"dur":2,"text":"going to halt or is it not going to halt"},"155":{"dur":4,"text":"eventually so think about your computer\nrunning you want it to give you an"},"159":{"dur":3,"text":"answer of whether it's a good answer or\na bad answer"},"162":{"dur":4,"text":"it's better than no answer. No answer\nwould mean the computer trundles around"},"167":{"dur":3,"text":"forever and ever in a loop and you would\njust never know whether it's going to"},"171":{"dur":2,"text":"finish today tomorrow or never"},"174":{"dur":6,"text":"so halting is good so there's another\nquestion we can ask given some program"},"180":{"dur":1,"text":"and some input"},"181":{"dur":5,"text":"will it ever halt? Now it turns out that\nour logical problem"},"188":{"dur":6,"text":"\"Do these premises entail this conclusion?\"\nis very similar to this halting problem"},"195":{"dur":5,"text":"in fact if we can solve the logical\nproblem then we can solve the halting"},"200":{"dur":1,"text":"problem"},"201":{"dur":5,"text":"will this program halt on this input so\nthe clever part of Turing's proof is"},"207":{"dur":5,"text":"to show that it's impossible for any\nmachine however clever it is to solve"},"213":{"dur":5,"text":"the halting problem that is to tell us\nwhether a given machine with a given"},"218":{"dur":3,"text":"input will halt or not - and here's how\nhe did it"},"222":{"dur":5,"text":"let's suppose we've got a machine or a\nprogram that solves the problem for us"},"228":{"dur":4,"text":"it solves the halting problem don't\nworry about how it works let's just"},"232":{"dur":4,"text":"think of it as a black box taking the\ndescription of a machine and an input"},"236":{"dur":2,"text":"and giving us an answer"},"238":{"dur":3,"text":"yes it will halt or no it won't halt\njust suppose that's possible"},"243":{"dur":4,"text":"call that machine \"h\" for the halting\nproblem - if you give me that machine"},"247":{"dur":3,"text":"I can transform it into a different\nmachine like this"},"251":{"dur":4,"text":"I stick some extra bits on it so that if\nit gives me a yes answer"},"256":{"dur":3,"text":"I make it loop forever without ever\nstopping"},"260":{"dur":2,"text":"if it gives me a no answer on the other\nhand"},"262":{"dur":4,"text":"and it's going to halt straight away\nlet's call that big machine"},"268":{"dur":7,"text":"the whole thing \"h+\" now here's another\nquestion we can ask what happens if I"},"275":{"dur":8,"text":"feed the whole machine into itself so\ni'm going to put h+ in here and h+"},"283":{"dur":1,"text":"in here"},"284":{"dur":7,"text":"so the question I'm now asking is I'm\nfeeding h+ into itself so i'm asking the"},"291":{"dur":6,"text":"question \"Does h+ halt given input h+?\"\nand here's where it all goes wrong"},"298":{"dur":4,"text":"because if h plus does halt"},"302":{"dur":3,"text":"we get a yes answer but then it loops\nforever"},"306":{"dur":4,"text":"so it doesn't halt on the other hand if\nit doesn't halt"},"311":{"dur":5,"text":"we get a no answer but then it halts so\nif it does halt then it doesn't halt"},"317":{"dur":5,"text":"but if it doesn't halt then it does\nhalt. Either way we get a contradiction"},"322":{"dur":5,"text":"it's a paradox but what that shows is we\nstarted off assuming that we can solve"},"327":{"dur":1,"text":"the problem"},"328":{"dur":3,"text":"we've ended up with a paradox so our\nassumption was bad"},"332":{"dur":3,"text":"it turns out there's no possible machine"},"336":{"dur":3,"text":"no possible program that solves the\nhalting problem"},"339":{"dur":4,"text":"the really clever bit about Turing's\nidea is it doesn't matter what kind of"},"344":{"dur":5,"text":"program our machine is. It doesn't matter\nwhether it's an abstract algorithm"},"349":{"dur":3,"text":"whether it's a real computer, a physical\ncomputer"},"352":{"dur":4,"text":"it doesn't matter what it is we've prove\nthat no such program as possible"},"360":{"dur":6,"text":"Turing as part of his argument had to\nsay a little bit about what's going on"},"366":{"dur":5,"text":"in these black boxes \/\/DFB: and the idea is\nthat every card represents an instruction"},"371":{"dur":1,"text":"in the Turing machine"}}